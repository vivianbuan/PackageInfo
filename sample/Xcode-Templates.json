[{
   "repo_status": "None", 
   "_childDocuments_": [
      {
         "protected_date": 1370840488, 
         "_childDocuments_": [
            {
               "answer_id": 927378, 
               "tags": [], 
               "down_vote_count": 18, 
               "last_activity_date": 1513202608, 
               "creation_date": 1243620787, 
               "score": 801, 
               "body_markdown": "&lt;!-- language: lang-bash --&gt;\r\n\r\n    git rm yourfiles/*.class\r\n    git commit -a -m &quot;deleted all class files in folder &#39;yourfiles&#39;&quot;\r\n\r\nor\r\n\r\n    git reset --hard HEAD~1\r\n\r\n**Warning: The above command will permanently remove the modifications to the `.java` files (and any other files) that you wanted to commit.**\r\n\r\n\r\nThe `hard reset` to `HEAD-1` will set your working copy to the state of the commit before your wrong commit.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513202608, 
               "id": "927378", 
               "up_vote_count": 819
            }, 
            {
               "answer_id": 927386, 
               "tags": [], 
               "down_vote_count": 81, 
               "last_activity_date": 1512569572, 
               "creation_date": 1243620822, 
               "score": 17771, 
               "body_markdown": "### Undo a commit and redo\r\n\r\n&lt;!-- language: bash --&gt;\r\n\r\n    $ git commit -m &quot;Something terribly misguided&quot;              (1)\r\n    $ git reset HEAD~                                           (2)\r\n    &lt;&lt; edit files as necessary &gt;&gt;                               (3)\r\n    $ git add ...                                               (4)\r\n    $ git commit -c ORIG_HEAD                                   (5)\r\n\r\n1. This is what you want to undo\r\n2. This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they&#39;ll appear as &quot;Changes not staged for commit&quot; in `git status`, and you&#39;ll need to add them again before committing). If you *only* want to *add* more changes to the previous commit, or change the commit message&lt;sup&gt;1&lt;/sup&gt;, you could use `git reset --soft HEAD~` instead, which is like `git reset HEAD~` (where `HEAD~` is the same as `HEAD~1`) but leaves your existing changes staged.\r\n3. Make corrections to working tree files.\r\n4. `git add` anything that you want to include in your new commit.\r\n5. Commit the changes, reusing the old commit message. `reset` copied the old head to `.git/ORIG_HEAD`; `commit` with `-c ORIG_HEAD` will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the `-C` option.\r\n\r\n-----\r\n\r\n&lt;sup&gt;1&lt;/sup&gt; Note, however, that you don&#39;t need to reset to an earlier commit if you just made a mistake in your *commit message*. The easier option is to `git reset` (to upstage any changes you&#39;ve made since) and then [`git commit --amend`][1], which will open your default commit message editor pre-populated with the last commit message. \r\n\r\nBeware however that if you have added any new changes to the index, using `commit --amend` will add them to your previous commit.\r\n\r\n  [1]: https://stackoverflow.com/q/179123/1146608\r\n  [2]: https://git-scm.com/docs/git-reset\r\n\r\n\r\n\r\n\r\n\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": true, 
               "last_edit_date": 1512569572, 
               "id": "927386", 
               "up_vote_count": 17852
            }, 
            {
               "answer_id": 927397, 
               "tags": [], 
               "down_vote_count": 18, 
               "last_activity_date": 1476254755, 
               "creation_date": 1243620986, 
               "score": 1564, 
               "body_markdown": "Add/remove files to get things the way you want:\r\n\r\n    git rm classdir\r\n    git add sourcedir\r\n\r\nThen amend the commit:\r\n\r\n    git commit --amend\r\n\r\nThe previous, erroneous commit will be edited to reflect the new index state - in other words, it&#39;ll be like you never made the mistake in the first place.\r\n\r\nNote that you should only do this if you haven&#39;t pushed yet. If you have pushed, then you&#39;ll just have to commit a fix normally.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1476254755, 
               "id": "927397", 
               "up_vote_count": 1582
            }, 
            {
               "answer_id": 3377569, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1450390361, 
               "creation_date": 1280569153, 
               "score": 632, 
               "body_markdown": "## To change the last commit\r\n\r\nReplace the files in the index:\r\n\r\n    git rm --cached *.class\r\n    git add *.java\r\n\r\nThen, if it&#39;s a private branch, **amend** the commit:\r\n\r\n    git commit --amend\r\n\r\nOr, if it&#39;s a shared branch, make a new commit:\r\n\r\n    git commit -m &#39;Replace .class files with .java files&#39;\r\n&lt;br&gt;\r\n*(**to change a previous commit**, use the awesome [interactive rebase])*\r\n\r\n\r\n----------\r\n\r\nProTip\u2122: &#160; Add `*.class` to a [gitignore] to stop this happening again.\r\n\r\n----------\r\n\r\n## To revert a commit\r\n\r\nAmending a commit is the ideal solution if you need to change the last commit, but a more general solution is `reset`.\r\n\r\nYou can reset git to any commit with:\r\n\r\n    git reset @~N\r\n\r\nWhere `N` is the number of commits before `HEAD`, and `@~` resets to the previous commit.\r\n\r\nSo, instead of amending the commit, you could use:\r\n\r\n    git reset @~\r\n    git add *.java\r\n    git commit -m &quot;Add .java files&quot;\r\n\r\nCheck out `git help reset`, specifically the sections on `--soft` `--mixed` and `--hard`, for a better understanding of what this does.\r\n\r\n## Reflog\r\n\r\nIf you mess up, you can always use the reflog to find dropped commits:\r\n\r\n    $ git reset @~\r\n    $ git reflog\r\n    c4f708b HEAD@{0}: reset: moving to @~\r\n    2c52489 HEAD@{1}: commit: added some .class files\r\n    $ git reset 2c52489\r\n    ... and you&#39;re back where you started\r\n\r\n&lt;br&gt;\r\n\r\n\r\n  [gitignore]: https://help.github.com/articles/ignoring-files\r\n  [interactive rebase]: https://stackoverflow.com/a/28421811/405550", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1495540989, 
               "id": "3377569", 
               "up_vote_count": 636
            }, 
            {
               "answer_id": 6376039, 
               "tags": [], 
               "down_vote_count": 8, 
               "last_activity_date": 1517354844, 
               "creation_date": 1308245243, 
               "score": 1575, 
               "body_markdown": "This took me a while to figure out, so maybe this will help someone...\r\n\r\nThere are two ways to &quot;undo&quot; your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):\r\n\r\n##How to undo a local commit\r\nLet&#39;s say I committed locally, but now want to remove that commit.\r\n\r\n    git log\r\n        commit 101: bad commit    # latest commit, this would be called &#39;HEAD&#39;\r\n        commit 100: good commit   # second to last commit, this is the one we want\r\n\r\nTo restore everything back to the way it was prior to the last commit, we need to `reset` to the commit before `HEAD`:\r\n\r\n    git reset --soft HEAD^     # use --soft if you want to keep your changes\r\n    git reset --hard HEAD^     # use --hard if you don&#39;t care about keeping the changes you made\r\n\r\nNow `git log` will show that our last commit has been removed.\r\n\r\n##How to undo a public commit\r\n\r\nIf you have already made your commits public, you will want to create a new commit which will &quot;revert&quot; the changes you made in your previous commit (current HEAD).\r\n\r\n    git revert HEAD\r\n\r\nYour changes will now be reverted and ready for you to commit:\r\n\r\n    git commit -m &#39;restoring the file I removed by accident&#39;\r\n    git log\r\n        commit 102: restoring the file I removed by accident\r\n        commit 101: removing a file we don&#39;t need\r\n        commit 100: adding a file that we need\r\n\r\nFor more info, check out [Git Basics - Undoing Things][1]\r\n\r\n\r\n  [1]: https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1517354844, 
               "id": "6376039", 
               "up_vote_count": 1583
            }, 
            {
               "answer_id": 6866485, 
               "tags": [], 
               "down_vote_count": 16, 
               "last_activity_date": 1479898858, 
               "creation_date": 1311891740, 
               "score": 9370, 
               "body_markdown": "Undoing a commit is a little scary if you don&#39;t know how it works.  But it&#39;s actually amazingly easy if you do understand.\r\n\r\nSay you have this, where C is your HEAD and (F) is the state of your files.\r\n\r\n       (F)\r\n    A-B-C\r\n        \u2191\r\n      master\r\n\r\nYou want to **nuke commit C and never see it again**.  You do this:\r\n\r\n    git reset --hard HEAD~1\r\n\r\nThe result is:\r\n\r\n     (F)\r\n    A-B\r\n      \u2191\r\n    master\r\n\r\nNow B is the HEAD.  Because you used `--hard`, your files are reset to their state at commit B.\r\n\r\nAh, but suppose commit C wasn&#39;t a disaster, but just a bit off.  You want to **undo the commit but keep your changes** for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:\r\n\r\n       (F)\r\n    A-B-C\r\n        \u2191\r\n      master\r\n\r\nYou can do this, leaving off the `--hard`:\r\n\r\n    git reset HEAD~1\r\n\r\nIn this case the result is:\r\n\r\n       (F)\r\n    A-B-C\r\n      \u2191\r\n    master\r\n\r\nIn both cases, HEAD is just a pointer to the latest commit.  When you do a `git reset HEAD~1`, you tell Git to move the HEAD pointer back one commit.  But (unless you use `--hard`) you leave your files as they were.  So now `git status` shows the changes you had checked into C.  You haven&#39;t lost a thing!\r\n\r\nFor the lightest touch, you can even **undo your commit but leave your files and your [index](https://git.wiki.kernel.org/index.php/WhatIsTheIndex)**:\r\n\r\n    git reset --soft HEAD~1\r\n\r\nThis not only leaves your files alone, it even leaves your *index* alone.  When you do `git status`, you&#39;ll see that the same files are in the index as before.  In fact, right after this command, you could do `git commit` and you&#39;d be redoing the same commit you just had.\r\n\r\nOne more thing: **Suppose you destroy a commit** as in the first example, **but then discover you needed it after all**?  Tough luck, right?\r\n\r\nNope, there&#39;s *still* a way to get it back.  Type `git reflog` and you&#39;ll see a list of (partial) commit shas that you&#39;ve moved around in.  Find the commit you destroyed, and do this:\r\n\r\n    git checkout -b someNewBranchName shaYouDestroyed\r\n\r\nYou&#39;ve now resurrected that commit.  Commits don&#39;t actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn&#39;t mean to get rid of.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1479898858, 
               "id": "6866485", 
               "up_vote_count": 9386
            }, 
            {
               "answer_id": 8487487, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1323771511, 
               "creation_date": 1323771511, 
               "score": 401, 
               "body_markdown": "If you have [Git Extras](https://github.com/visionmedia/git-extras) installed, you can run `git undo` to undo the latest commit. `git undo 3` will undo the last 3 commits.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "8487487", 
               "up_vote_count": 404
            }, 
            {
               "answer_id": 10044540, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1333720732, 
               "creation_date": 1333720732, 
               "score": 370, 
               "body_markdown": "I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.\r\n\r\n    prompt&gt; git reset --hard 5a7404742c85\r\n    HEAD is now at 5a74047 Added one more page to catalogue\r\n    prompt&gt; git push origin master --force\r\n    Total 0 (delta 0), reused 0 (delta 0)\r\n    remote: bb/acl: neoneye is allowed. accepted payload.\r\n    To git@bitbucket.org:thecompany/prometheus.git\r\n     + 09a6480...5a74047 master -&gt; master (forced update)\r\n    prompt&gt;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "10044540", 
               "up_vote_count": 375
            }, 
            {
               "answer_id": 10757800, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1346418622, 
               "creation_date": 1337961869, 
               "score": 507, 
               "body_markdown": "Use `git revert SHA-Of-The-Commit-You-Want-To-Revert`\r\n\r\nTo get the `SHA`, just use `git log`", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1346418622, 
               "id": "10757800", 
               "up_vote_count": 510
            }, 
            {
               "answer_id": 13061212, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1468574690, 
               "creation_date": 1351136480, 
               "score": 358, 
               "body_markdown": "I prefer to use `git rebase -i` for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just *feels right*.\r\n\r\nChoose how many commits you want to list, then invoke like this (to enlist last three)\r\n\r\n    git rebase -i HEAD~3\r\n\r\nSample list\r\n\r\n    pick aa28ba7 Sanity check for RtmpSrv port\r\n    pick c26c541 RtmpSrv version option\r\n    pick 58d6909 Better URL decoding support\r\n\r\nThen git will remove commits for any line that you remove.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1468574690, 
               "id": "13061212", 
               "up_vote_count": 363
            }, 
            {
               "answer_id": 14620228, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1479214559, 
               "creation_date": 1359615970, 
               "score": 404, 
               "body_markdown": "If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don&#39;t worry anything about that, just do the following command.\r\n\r\n    git reset --hard HEAD^1\r\n\r\n(This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after `git add`) then do the following command.\r\n\r\n    git reset --soft HEAD^1\r\n\r\nNow your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command\r\n\r\n    git reset HEAD\r\n\r\nNow committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.\r\n\r\n[More][1]\r\n\r\n  [1]: http://madhan-tech-updates.blogspot.in/2013/01/how-to-undo-your-local-git-commit.html\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1479214559, 
               "id": "14620228", 
               "up_vote_count": 406
            }, 
            {
               "answer_id": 16175525, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1436954672, 
               "creation_date": 1366738065, 
               "score": 318, 
               "body_markdown": "## How to fix the previous local commit  ##\r\n\r\nUse git-gui (or similar) to perform a `git commit --amend`. From the GUI you can add or remove individual files from the commit. You can also modify the commit message. \r\n\r\n## How to undo the previous local commit ##\r\n\r\nJust reset your branch to the previous location (for example, using `gitk` or `git rebase`). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use `git reset HEAD~1`.\r\n\r\n**Word of warning**: *Careless use of `git reset` is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.*\r\n\r\n## How to undo a public commit ##\r\n\r\nPerform a [reverse cherry pick][1] ([git-revert][2]) to undo the changes.\r\n\r\nIf you haven&#39;t yet pulled other changes onto your branch, you can simply do...\r\n\r\n    git revert --no-edit HEAD\r\n\r\nThen push your updated branch to the shared repository.\r\n\r\n  [1]: https://stackoverflow.com/a/1624724/86967\r\n  [2]: http://git-scm.com/docs/git-revert.html", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1495541913, 
               "id": "16175525", 
               "up_vote_count": 320
            }, 
            {
               "answer_id": 16527510, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1435138461, 
               "creation_date": 1368465145, 
               "score": 124, 
               "body_markdown": "Another way:\r\n\r\nCheckout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected &quot;Reset BRANCHNAME to this commit&quot;.\r\n\r\nThen navigate to your repository&#39;s local directory and run this command:\r\n\r\n    git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME\r\n\r\nThis will erase all commits after the current one in your local repository but only for that one branch.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138461, 
               "id": "16527510", 
               "up_vote_count": 126
            }, 
            {
               "answer_id": 16565962, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1435138458, 
               "creation_date": 1368623549, 
               "score": 120, 
               "body_markdown": "Type `git log` and find the last commit hash code and then enter:\r\n\r\n    git reset &lt;the previous co&gt;\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138458, 
               "id": "16565962", 
               "up_vote_count": 122
            }, 
            {
               "answer_id": 16609755, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1435138455, 
               "creation_date": 1368795733, 
               "score": 272, 
               "body_markdown": "If you want to permanently undo it and you have cloned some repository \r\n\r\nThe commit id can be seen by \r\n\r\n    git log \r\n\r\nThen you can do -\r\n   \r\n\r\n    git reset --hard &lt;commit_id&gt;\r\n\r\n    git push origin &lt;branch_name&gt; -f\r\n\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138455, 
               "id": "16609755", 
               "up_vote_count": 276
            }, 
            {
               "answer_id": 17362437, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1435138451, 
               "creation_date": 1372414709, 
               "score": 231, 
               "body_markdown": "On [SourceTree][1] (GUI for GitHub), you may right-click the commit and do a &#39;Reverse Commit&#39;. This should undo your changes.\r\n\r\nOn the terminal:\r\n\r\nYou may alternatively use:\r\n\r\n    git revert\r\n\r\nOr:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git reset --soft HEAD^ # Use --soft if you want to keep your changes.\r\n    git reset --hard HEAD^ # Use --hard if you don&#39;t care about keeping your changes.\r\n\r\n  [1]: https://www.atlassian.com/software/sourcetree/overview\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138451, 
               "id": "17362437", 
               "up_vote_count": 232
            }, 
            {
               "answer_id": 17716319, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1435138449, 
               "creation_date": 1374129676, 
               "score": 117, 
               "body_markdown": "In my case I accidentally committed some files I did not want to. So I did the following and it worked:\r\n\r\n    git reset --soft HEAD^\r\n    git rm --cached [files you do not need]\r\n    git add [files you need]\r\n    git commit -c ORIG_HEAD\r\n\r\nVerify the results with gitk or git log --stat", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138449, 
               "id": "17716319", 
               "up_vote_count": 117
            }, 
            {
               "answer_id": 18516122, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1497273708, 
               "creation_date": 1377793119, 
               "score": 100, 
               "body_markdown": "Use [SourceTree][1] (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it.\r\n\r\n  [1]: https://www.atlassian.com/software/sourcetree/overview\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1497273708, 
               "id": "18516122", 
               "up_vote_count": 102
            }, 
            {
               "answer_id": 19159566, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1513202688, 
               "creation_date": 1380804237, 
               "score": 137, 
               "body_markdown": "&quot;Reset the working tree to the last commit&quot;\r\n\r\n    git reset --hard HEAD^ \r\n\r\n&quot;Clean unknown files from the working tree&quot;\r\n\r\n    git clean    \r\nsee - [Git Quick Reference][1]\r\n\r\n\r\n  [1]: http://jonas.nitro.dk/git/quick-reference.html\r\n\r\n**NOTE:** This command will delete your previous commit, so use with caution! `git reset --hard` is safer \u2013", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513202688, 
               "id": "19159566", 
               "up_vote_count": 137
            }, 
            {
               "answer_id": 19320941, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1435138400, 
               "creation_date": 1381502476, 
               "score": 138, 
               "body_markdown": "First run: \r\n\r\n    git reflog\r\n\r\nIt will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.\r\n\r\nThen do:\r\n\r\n    git reset --hard ActionIdFromRefLog\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138400, 
               "id": "19320941", 
               "up_vote_count": 138
            }, 
            {
               "answer_id": 20960584, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1389047646, 
               "creation_date": 1389047646, 
               "score": 152, 
               "body_markdown": "Use reflog to find a correct state\r\n\r\n    git reflog\r\n\r\n![reflog before][1]\r\n_REFLOG BEFORE RESET_\r\n\r\nSelect the correct reflog (f3cb6e2 in my case) and type \r\n\r\n    git reset --hard f3cb6e2\r\n\r\nAfter that the repo HEAD will be reset to that HEADid\r\n![reset effect][2]\r\n_LOG AFTER RESET_\r\n\r\nFinally the reflog looks like the picture below\r\n\r\n![reflog after][3]\r\n_REFLOG FINAL_\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/c7e7D.png\r\n  [2]: http://i.stack.imgur.com/GdnDT.png\r\n  [3]: http://i.stack.imgur.com/Fhhub.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "20960584", 
               "up_vote_count": 153
            }, 
            {
               "answer_id": 21615125, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1391724511, 
               "creation_date": 1391724511, 
               "score": 77, 
               "body_markdown": "This **article** has an **excellent explanation** as to how to go **about various scenarios** (where a commit has been done as well as the push OR just a commit, before the push):\r\n\r\nhttp://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html\r\n\r\nFrom the article, the **easiest command** I saw to **revert a previous commit by its commit id**, was:\r\n\r\n    git revert dd61ab32", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "21615125", 
               "up_vote_count": 77
            }, 
            {
               "answer_id": 22163029, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1405973708, 
               "creation_date": 1393907718, 
               "score": 64, 
               "body_markdown": "### For a local commit\r\n\r\n    git reset --soft HEAD~1\r\n\r\nor if you do not remember exactly in which commit it is, you might use\r\n\r\n    git rm --cached &lt;file&gt;\r\n\r\n### For a pushed commit\r\n\r\nThe proper way of removing files from the repository history is using `git filter-branch`. That is,\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git filter-branch --index-filter &#39;git rm --cached &lt;file&gt;&#39; HEAD\r\n\r\nBut I recomnend you use this command with care. Read more at *[git-filter-branch(1) Manual Page][1]*.\r\n\r\n  [1]: https://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1405973708, 
               "id": "22163029", 
               "up_vote_count": 64
            }, 
            {
               "answer_id": 22199804, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1405973614, 
               "creation_date": 1394027735, 
               "score": 217, 
               "body_markdown": "A single command:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git reset --soft &#39;HEAD^&#39; \r\n\r\nIt works great to undo the last local commit!\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1405973614, 
               "id": "22199804", 
               "up_vote_count": 218
            }, 
            {
               "answer_id": 23242764, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490429641, 
               "creation_date": 1398252080, 
               "score": 183, 
               "body_markdown": "**How to undo the last Git commit?**\r\n\r\nTo restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.\r\n\r\n1. If you don&#39;t want to keep your changes that you made:\r\n\r\n        git reset --hard HEAD^\r\n\r\n2. If you want to keep your changes:\r\n\r\n        git reset --soft HEAD^\r\n\r\nNow check your git log. It will show that our last commit has been removed.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429641, 
               "id": "23242764", 
               "up_vote_count": 183
            }, 
            {
               "answer_id": 25553225, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1474010701, 
               "creation_date": 1409241784, 
               "score": 82, 
               "body_markdown": "To reset to the previous revision, permanently deleting all uncommitted changes: \r\n\r\n    git reset --hard HEAD~1", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1474010701, 
               "id": "25553225", 
               "up_vote_count": 86
            }, 
            {
               "answer_id": 25638420, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1411631905, 
               "creation_date": 1409728530, 
               "score": 277, 
               "body_markdown": "If you have committed junk but not pushed,\r\n\r\n    git reset --soft HEAD~1\r\n\r\n&gt; \r\n**HEAD~1** is a shorthand for the commit before head. Alternatively you can refer to the **SHA-1** of the hash if you want to reset to. *--soft* option will delete the commit but it will leave all your changed files &quot;Changes to be committed&quot;, as git status would put it.\r\n\r\n&gt;    If you want to get rid of any changes to tracked files in the working tree since the commit before head use &quot;**--hard**&quot; instead.\r\n\r\nOR\r\n\r\n&gt;If you already pushed and someone pulled which is usually my case, you can&#39;t use *git reset*. You can however do a *git revert*,\r\n\r\n\r\n    git revert HEAD\r\n\r\n&gt;This will create a new commit that reverses everything introduced by the accidental commit.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1411631905, 
               "id": "25638420", 
               "up_vote_count": 278
            }, 
            {
               "answer_id": 25811069, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1452556247, 
               "creation_date": 1410533461, 
               "score": 103, 
               "body_markdown": "There are two main scenarios\r\n\r\n**You haven&#39;t pushed the commit yet**\r\n\r\nIf the problem was extra files you commited (and you don&#39;t want those on repository), you can remove them using `git rm` and then commiting with `--amend`\r\n\r\n    git rm &lt;pathToFile&gt;\r\n\r\nYou can also remove entire directories with `-r`, or even combine with other [Bash][1] commands\r\n\r\n    git rm -r &lt;pathToDirectory&gt;\r\n    git rm $(find -name &#39;*.class&#39;)\r\n\r\nAfter removing the files, you can commit, with **--amend** option\r\n\r\n    git commit --amend -C HEAD # the -C option is to use the same commit message\r\n\r\nThis will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.\r\n\r\n**You already pushed the commit**\r\n\r\nYou can apply the same solution of the other scenario and then doing `git push` with the `-f` option, but it is **not recommended** since it overwrites the remote history with a divergent change (it can mess your repository).\r\n\r\nInstead, you have to do the commit without `--amend` (remember this about -amend`: That option rewrites the history on the last commit).\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1452556247, 
               "id": "25811069", 
               "up_vote_count": 103
            }, 
            {
               "answer_id": 27002094, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1416337868, 
               "creation_date": 1416337868, 
               "score": 51, 
               "body_markdown": "Usually, you want to **undo** a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to **redo** a commit.\r\n\r\nMost of the answers here focus on the command line. While the command line is the best way to use Git when you&#39;re comfortable with it, its probably a bit alien to those coming from other version control systems to Git. \r\n\r\nHere&#39;s how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.\r\n\r\n**NOTE:** I will assume here that you realised the commit was wrong before you pushed it. If you don&#39;t know what pushing is, you probably haven&#39;t pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history. \r\n\r\nThat said, here&#39;s how to fix your most recent fault commit using a GUI:\r\n\r\n 1. Navigate to your repository on the command line and start the gui with `git gui`\r\n 2. Choose &quot;Amend last commit&quot;. You will see your last commit message, the files you staged and the files you didn&#39;t.\r\n 3. Now change things to how you want them to look and click Commit. ", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "27002094", 
               "up_vote_count": 51
            }, 
            {
               "answer_id": 30118831, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1431968134, 
               "creation_date": 1431072263, 
               "score": 41, 
               "body_markdown": "Just undo the last commit: \r\n\r\n    git reset --soft HEAD~\r\n\r\nOr undo the time before last time commit: \r\n\r\n    git reset --soft HEAD~2\r\n\r\nOr undo any previous commit: \r\n\r\n    git reset --soft &lt;commitID&gt;\r\n\r\n \r\n\r\n(you can get the commitID using `git reflog`)\r\n\r\nWhen you undo a previous commit, remember to clean the workplace with\r\n\r\n    git clean\r\n    \r\nMore details can be found in the docs: [git-reset][0]\r\n\r\n\r\n  [0]: http://git-scm.com/docs/git-reset", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1431968134, 
               "id": "30118831", 
               "up_vote_count": 42
            }, 
            {
               "answer_id": 30428348, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490429689, 
               "creation_date": 1432501744, 
               "score": 30, 
               "body_markdown": "You need to do the easy and fast\r\n\r\n        git commit --amend\r\n\r\nif it&#39;s a private branch or\r\n\r\n        git commit -m &#39;Replace .class files with .java files&#39;\r\n\r\nif it&#39;s a shared or public branch.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429689, 
               "id": "30428348", 
               "up_vote_count": 30
            }, 
            {
               "answer_id": 31241087, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1436171420, 
               "creation_date": 1436171420, 
               "score": 25, 
               "body_markdown": "Use this command\r\n\r\n    git checkout -b old-state 0d1d7fc32", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "31241087", 
               "up_vote_count": 26
            }, 
            {
               "answer_id": 31944160, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1439302274, 
               "creation_date": 1439302274, 
               "score": 26, 
               "body_markdown": "In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:\r\n\r\nOn the same branch that you committed and pushed, if you type &quot;git status&quot; you wont&#39;t see anything new because you committed and pushed, now type:\r\n\r\n`    git reset --soft HEAD~1`\r\n\r\nThis will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:\r\n\r\n    git reset FILE\r\n\r\nWhere &quot;File&quot; is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "31944160", 
               "up_vote_count": 26
            }, 
            {
               "answer_id": 34093958, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1449249650, 
               "creation_date": 1449249650, 
               "score": 22, 
               "body_markdown": "**Remove a wrong commit that is already pushed to Github**\r\n\r\n    git push origin +(previous good commit id):(branch name)\r\nPlease specify the last good commit id you would like to reset back in Github.\r\n\r\nFor example. If latest commit id is wrong then specify the previous commit id in above git command with branch name. \r\n\r\nYou can get previous commit id using `git log`", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "34093958", 
               "up_vote_count": 22
            }, 
            {
               "answer_id": 34195835, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490429716, 
               "creation_date": 1449731835, 
               "score": 22, 
               "body_markdown": "You can always do a `git checkout` (SHA code) of the previous version and then commit again with the new code.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429716, 
               "id": "34195835", 
               "up_vote_count": 22
            }, 
            {
               "answer_id": 34547846, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490429813, 
               "creation_date": 1451572465, 
               "score": 37, 
               "body_markdown": "###A Typical Git Cycle\r\n\r\nIn speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,\r\n\r\n1. Cloning the first time from the remote server\r\n\r\n    `git clone $project`\r\n\r\n2. Pulling from remote (when I don&#39;t have a pending local commit to push)\r\n\r\n    `git pull`\r\n\r\n3. Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means `staged` area)\r\n\r\n    `git add $file1`\r\n\r\n4. Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn&#39;t want)\r\n\r\n    `git reset $file2`\r\n\r\n5. Committing file1 which is in $to_be_committed_list\r\n\r\n    `git commit -m &quot;commit message description&quot;`\r\n\r\n6. Syncing local commit with remote repository before pushing\r\n\r\n    `git pull --rebase`\r\n\r\n7. Resolving when conflict occurs [prerequisite configure mergetool][1]\r\n\r\n    `git mergetool #resolve merging here, also can manually merge`\r\n\r\n8. Adding conflict-resolved files, let&#39;s say `file1`:\r\n\r\n    `git add $file1`\r\n\r\n9. Continuing my previous rebase command\r\n\r\n    `git rebase --continue`\r\n\r\n10. Pushing ready and already synced last local commit\r\n\r\n    `git push origin head:refs/for/$branch # branch = master, dev, etc.`\r\n\r\n  [1]: https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429813, 
               "id": "34547846", 
               "up_vote_count": 37
            }, 
            {
               "answer_id": 34583071, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490429882, 
               "creation_date": 1451865582, 
               "score": 39, 
               "body_markdown": "To undo your local commit you use `git reset &lt;file&gt;`. Also [that tutorial][1] is very helpful to show you how it works.\r\n\r\nAlternatively, you can use `git revert &lt;commit&gt;`: [reverting][2] should be used when you want to add another commit that rolls back the changes (but keeps them in the project history).\r\n\r\n  [1]: https://www.atlassian.com/git/tutorials/undoing-changes/git-reset\r\n  [2]: https://www.atlassian.com/git/tutorials/undoing-changes/git-revert/\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429882, 
               "id": "34583071", 
               "up_vote_count": 39
            }, 
            {
               "answer_id": 34635179, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1453154313, 
               "creation_date": 1452089412, 
               "score": 89, 
               "body_markdown": "Simple, run this in your command line:\r\n\r\n    git reset --soft HEAD~ \r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1453154313, 
               "id": "34635179", 
               "up_vote_count": 89
            }, 
            {
               "answer_id": 35472255, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1490429959, 
               "creation_date": 1455766058, 
               "score": 70, 
               "body_markdown": "There are many ways to do it:\r\n\r\nGit command to undo the last commit/ previous commits:\r\n\r\n**Basic command to revert the commit in Git is:**\r\n\r\n    $ git reset --hard &lt;COMMIT -ID&gt;\r\n\r\nor\r\n\r\n    $ git reset --hard HEAD~&lt;n&gt;\r\n\r\n**COMMIT-ID**: ID for the commit\r\n\r\n**n:**  is number of last commits you want to revert\r\n\r\nYou can get the commit id as shown below:\r\n\r\n    $ **git log --oneline**\r\n\r\n    d81d3f1 function to subtract two numbers\r\n\r\n    be20eb8 function to add two numbers\r\n\r\n    bedgfgg function to mulitply two numbers\r\n\r\nwhere **d81d3f1** and **be20eb8** are commit id.\r\n\r\n**Now let&#39;s see some cases:**\r\n\r\n*Suppose you want to revert the last commit &#39;d81d3f1&#39;. Below are the ways:*\r\n\r\n    $ git reset --hard d81d3f1\r\n\r\nor\r\n\r\n    $ git reset --hard HEAD~1\r\n\r\n*Suppose you want to revert the commit &#39;be20eb8&#39;. Below are the way:*\r\n\r\n    $ git reset --hard be20eb8\r\n\r\nFor more detailed information you can refer and try out some other commands too for resetting head to a specified state:\r\n\r\n    $ git reset --help\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429959, 
               "id": "35472255", 
               "up_vote_count": 71
            }, 
            {
               "answer_id": 35826537, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1513202720, 
               "creation_date": 1457265202, 
               "score": 120, 
               "body_markdown": "## Undo last commit: ##\r\n\r\n`git reset --soft HEAD^` or `git reset --soft HEAD~`\r\n\r\nThis will undo the last commit.\r\n\r\nHere `--soft` means reset into staging.\r\n\r\n`HEAD~` or `HEAD^` means to move to commit before HEAD.\r\n\r\n----------\r\n\r\n## Replace last commit to new commit: ##\r\n\r\n    git commit --amend -m &quot;message&quot;\r\n\r\nIt will replace the last commit with the new commit.\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513202720, 
               "id": "35826537", 
               "up_vote_count": 121
            }, 
            {
               "answer_id": 36040444, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1490430071, 
               "creation_date": 1458142910, 
               "score": 28, 
               "body_markdown": "I got the commit ID from `bitbucket` and then did:\r\n\r\n    git checkout commitID .\r\n\r\nExample:\r\n\r\n    git checkout 7991072 .\r\n\r\nAnd it reverted it back up to that working copy of that commit.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490430071, 
               "id": "36040444", 
               "up_vote_count": 30
            }, 
            {
               "answer_id": 36876212, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490430164, 
               "creation_date": 1461706553, 
               "score": 34, 
               "body_markdown": "**VISUAL STUDIO USERS (2015, etc.)**\r\n\r\nIf you cannot synchronise in Visual Studio as you are not allowed to push to a branch like &quot;development&quot; then as much as I tried, in Visual Studio NEITHER the **REVERT** NOR the **RESET** (hard or soft) would work.\r\n\r\nPer the answer with TONS OF VOTES:\r\n\r\nUse this at the command prompt of root of your project to nuke anything that will attempt to get pushed:\r\n\r\n    git reset --hard HEAD~1\r\n\r\nBackup or zip your files just in case you don&#39;t wish to lose any work, etc...\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490430164, 
               "id": "36876212", 
               "up_vote_count": 34
            }, 
            {
               "answer_id": 37510994, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1464531677, 
               "creation_date": 1464531677, 
               "score": 15, 
               "body_markdown": "Just use `git reset --hard &lt;last good SHA&gt;` to reset your changes and give new commit. You can also use `git checkout -- &lt;bad filename&gt;`.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "37510994", 
               "up_vote_count": 16
            }, 
            {
               "answer_id": 38091882, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1490430193, 
               "creation_date": 1467181706, 
               "score": 50, 
               "body_markdown": "You can use:\r\n\r\n    git reset HEAD@{1}\r\n\r\nThis command will delete your wrong commit without a Git log.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490430193, 
               "id": "38091882", 
               "up_vote_count": 52
            }, 
            {
               "answer_id": 38629666, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490430271, 
               "creation_date": 1469690662, 
               "score": 46, 
               "body_markdown": "## WHAT TO USE, `reset --soft` or `reset --hard`?\r\n\r\nI am just adding two cents for @Kyralessa&#39;s answer:\r\n\r\nIf you are unsure what to use go for `--soft` (I used this convention to remember it --**s**oft for safe).\r\n\r\n### Why ?\r\nIf you choose `--hard` by mistake you will **LOSE** your changes as it wasn&#39;t before.\r\nIf you choose `--soft` by mistake you can achieve the same results of `--hard` by applying additional commands\r\n\r\n    git reset HEAD file.html\r\n    git checkout -- file.html\r\n\r\n### Full example\r\n\r\n    echo &quot;some changes...&quot; &gt; file.html\r\n    git add file.html\r\n    git commit -m &quot;wrong commit&quot;\r\n\r\n    # I need to reset\r\n    git reset --hard HEAD~1 (cancel changes)\r\n    # OR\r\n    git reset --soft HEAD~1 # Back to staging\r\n    git reset HEAD file.html # back to working directory\r\n    git checkout -- file.html # cancel changes\r\n\r\nCredits goes to @Kyralessa.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490430271, 
               "id": "38629666", 
               "up_vote_count": 46
            }, 
            {
               "answer_id": 38656254, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490433739, 
               "creation_date": 1469787268, 
               "score": 43, 
               "body_markdown": "If you are working with **[SourceTree][1]**, this will help you.\r\n\r\n**Right click** on the commit then **select** &quot;*Reset (current branch)/master to this commit*&quot; and last **select**  *&quot;Soft&quot; reset*.\r\n\r\n [![Enter image description here][2]][2]\r\n\r\n  [1]: https://www.sourcetreeapp.com/\r\n  [2]: http://i.stack.imgur.com/BSMo2.png\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433739, 
               "id": "38656254", 
               "up_vote_count": 43
            }, 
            {
               "answer_id": 40445749, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1478404182, 
               "creation_date": 1478403522, 
               "score": 21, 
               "body_markdown": "In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:\r\n\r\n    git reset --hard HEAD~1\r\n    git reset --hard HEAD~2\r\n    ...\r\n    git reset --hard HEAD~n\r\n\r\nAnd, to get rid of anything after a specific commit:\r\n\r\n    git reset --hard &lt;commit sha&gt;\r\n\r\ne.g., \r\n\r\n    git reset --hard 0d12345\r\n\r\n&gt; PS:  \r\n&gt; 1- Be careful, because of &quot;hard&quot; option, it deletes the local changes\r\n&gt; in your repo as well and reverts to the previous mentioned commit. You\r\n&gt; should run this if you are sure you messed up in your last commit(s)\r\n&gt; and would like to go back in time. \r\n&gt; \r\n&gt; 2- Usually 7 letters of &quot;commit sha&quot; is enough, but in bigger\r\n&gt; projects, you may need up to 12 letters to guarantee be unique. You\r\n&gt; also can mention the whole 40 letters sha.\r\n&gt; \r\n&gt; 3- The above commands work in Github for Windows as well.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1478404182, 
               "id": "40445749", 
               "up_vote_count": 21
            }, 
            {
               "answer_id": 40619708, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1479244072, 
               "creation_date": 1479244072, 
               "score": 9, 
               "body_markdown": "[![enter image description here][1]][1]\r\n\r\nAssuming you&#39;re working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select `Revert`.  Easy as that.\r\n  [1]: https://i.stack.imgur.com/ueFVY.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "40619708", 
               "up_vote_count": 9
            }, 
            {
               "answer_id": 40672892, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1510781116, 
               "creation_date": 1479459459, 
               "score": 38, 
               "body_markdown": "Think we have ***code.txt*** file.\r\nWe make some changes on it and commit.\r\n**We can undo this commit in three ways**, but first you should know what is the staged file...\r\nAn staged file is a file that ready to commit and if you run `git status` this file will be shown with green color and if this is not staged for commit will be shown with red color:\r\n\r\n[![enter image description here][1]][1]\r\n\r\nIt means if you commit your change, your changes on this file is not saved.\r\nYou can add this file in your stage with `git add code.txt` and then commit your change:\r\n\r\n[![enter image description here][2]][2]\r\n\r\n**Undo last commit:**\r\n\r\n1. Now if we want just undo commit without any other changes, we can use\r\n\r\n    `git reset --soft HEAD^` \r\n\r\n    [![enter image description here][3]][3]\r\n\r\n2. If we want undo commit and its changes (***THIS IS DANGEROUS, because your change will lost***), we can use\r\n\r\n    `git reset --hard HEAD^`\r\n\r\n    [![enter image description here][4]][4]\r\n\r\n3. And if we want undo commit and remove changes from stage, we can use\r\n\r\n    `git reset --mixed HEAD^` or in a short form `git reset HEAD^`\r\n\r\n    [![enter image description here][5]][5]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/ymNKl.png\r\n  [2]: https://i.stack.imgur.com/36Yag.png\r\n  [3]: https://i.stack.imgur.com/Tx6x1.png\r\n  [4]: https://i.stack.imgur.com/8NDBS.png\r\n  [5]: https://i.stack.imgur.com/jg8g0.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1510781116, 
               "id": "40672892", 
               "up_vote_count": 38
            }, 
            {
               "answer_id": 41168796, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1490433800, 
               "creation_date": 1481818888, 
               "score": 7, 
               "body_markdown": "I have found [this][1] site which describes how to undo things that you have committed into the repository.\r\n\r\nSome commands:\r\n\r\n    git commit --amend        # Change last commit\r\n    git reset HEAD~ --soft    # Undo last commit\r\n\r\n  [1]: http://ohshitgit.com/\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433800, 
               "id": "41168796", 
               "up_vote_count": 11
            }, 
            {
               "answer_id": 41340201, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1490433829, 
               "creation_date": 1482820605, 
               "score": 17, 
               "body_markdown": "You just have to use a single command:\r\n\r\n    git reset --soft &#39;HEAD^&#39; \r\n\r\nIt works to undo the last local commit to your Git repository.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433829, 
               "id": "41340201", 
               "up_vote_count": 18
            }, 
            {
               "answer_id": 41350510, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490433842, 
               "creation_date": 1482864171, 
               "score": 23, 
               "body_markdown": "Use this command:\r\n\r\n    git checkout -b old-state number_commit\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433842, 
               "id": "41350510", 
               "up_vote_count": 23
            }, 
            {
               "answer_id": 41568578, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490433858, 
               "creation_date": 1484050351, 
               "score": 64, 
               "body_markdown": "If you want remove files in the last commit, you can use this:  \r\n\r\n    git reset --hard HEAD~1\r\n\r\nAnd if need files in the last commit, you can use this:  \r\n\r\n    git reset --soft HEAD~1\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433858, 
               "id": "41568578", 
               "up_vote_count": 64
            }, 
            {
               "answer_id": 41905003, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1485562213, 
               "creation_date": 1485562213, 
               "score": 24, 
               "body_markdown": "You have several options to undo your last commit. \r\nHere are some of your options summarize into a single answer with code snippets\r\n\r\n**First of all you need to figure which are the &quot;wrong&quot; commits which you wish to discard.** We will use `git reflog` to find it.\r\n\r\n---\r\n\r\n###[`git reflog`](https://git-scm.com/docs/git-reflog)\r\nYou can always use the `reflog` as well.  \r\n`git reflog ` will display any change which updated the `HEAD` and checking out the desired reflog entry will set the `HEAD` back to this commit. \r\n\r\n**Every time the HEAD is modified there will be a new entry in the `reflog`**.  \r\nThe `reflog` is similar to unix history command and is kept locally on your machine.\r\n\r\n    git reflog\r\n    git checkout HEAD@{...}\r\n    # or\r\n    git checkout &lt;sha-1&gt;\r\n    \r\nUsing the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.\r\n\r\n[![enter image description here][1]][1]\r\n\r\n---\r\n\r\n###***[`git reset HEAD --hard &lt;commit_id&gt;`](https://git-scm.com/docs/git-reset)***\r\n**&quot;Move&quot;** your head back to the desired commit.  \r\nGit reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value `--hard/--soft/--mixed` you choose to pick. `--hard` will update both stage area and working directory with the given &lt;sha-1&gt; content and will &quot;detach&quot; any other commits beyond this point on your local branch. \r\n\r\nIf those commits are not part of any other branch they will become &quot;dangle&quot;.  \r\n&quot;dangle&quot; content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the `gc`.\r\n\r\n    # This will destroy any local modifications.\r\n    # Don&#39;t do it if you have uncommitted work you want to keep.\r\n    git reset --hard 0d1d7fc32\r\n\r\n    # Alternatively, if there&#39;s work to keep:\r\n    git stash\r\n    git reset --hard 0d1d7fc32\r\n    git stash pop\r\n    # This saves the modifications, then reapplies that patch after resetting.\r\n    # You could get merge conflicts, if you&#39;ve modified things which were\r\n    # changed since the commit you reset to.\r\n\r\n---\r\n\r\nThis schema illustrate which command does what.  \r\nAs you can see there `reset &amp;&amp; checkout` modify the `HEAD`.\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n[1]: http://i.stack.imgur.com/atW9w.png\r\n[2]: http://i.stack.imgur.com/NuThL.png\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "41905003", 
               "up_vote_count": 24
            }, 
            {
               "answer_id": 42512807, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1490433894, 
               "creation_date": 1488295946, 
               "score": 20, 
               "body_markdown": "Use:\r\n\r\n    git reset HEAD~1 --soft\r\n\r\nMake changes, add, and commit the changes.\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433894, 
               "id": "42512807", 
               "up_vote_count": 21
            }, 
            {
               "answer_id": 42844988, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1489699251, 
               "creation_date": 1489699251, 
               "score": 4, 
               "body_markdown": "    git reset --hard your_last_good_commit_hash_here\r\n\r\n    git push --force origin master", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "42844988", 
               "up_vote_count": 5
            }, 
            {
               "answer_id": 43128168, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1491993095, 
               "creation_date": 1490907419, 
               "score": 16, 
               "body_markdown": "Reference: [How to undo last commit in Git?][1]\r\n\r\nIf you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from [here][2]).\r\n\r\nOpen Git Extensions, right click on the commit you want to revert then select &quot;Revert commit&quot;. \r\n\r\n[![Git Extensions screen shot][3]][3]\r\n\r\n\r\nA popup will be opened (see the screenshot below)\r\n\r\n[![Revert commit popup][4]][4]\r\n\r\n\r\nSelect &quot;Automatically create a commit&quot; if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on &quot;Revert this commit&quot; button.\r\n\r\n\r\n  [1]: http://www.coding-issues.com/2017/03/how-to-undo-or-revert-last-commits-in-git.html\r\n  [2]: https://gitextensions.github.io/\r\n  [3]: https://i.stack.imgur.com/j2fK1.png\r\n  [4]: https://i.stack.imgur.com/Skufo.jpg", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1491993095, 
               "id": "43128168", 
               "up_vote_count": 17
            }, 
            {
               "answer_id": 43826836, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1501538652, 
               "creation_date": 1494118866, 
               "score": 25, 
               "body_markdown": "Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.\r\n\r\nFirst we need to correct our local repo by going back to the commit that we desire:\r\n\r\n    git reset --hard &lt;previous good commit id where you want local repo to go&gt;\r\n\r\nNow we forcefully push this good commit on the remote repo by using this command:\r\n\r\n    git push --force-with-lease\r\n\r\nThe &#39;with-lease&#39; version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull).", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1501538652, 
               "id": "43826836", 
               "up_vote_count": 25
            }, 
            {
               "answer_id": 44347830, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1496518336, 
               "creation_date": 1496518336, 
               "score": 7, 
               "body_markdown": "Find the last commit hash code by seeing the log by :\r\n\r\n    git log\r\n\r\nThen\r\n\r\n    git reset &lt;the previous co&gt;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "44347830", 
               "up_vote_count": 8
            }, 
            {
               "answer_id": 44649998, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1500209638, 
               "creation_date": 1497953121, 
               "score": 8, 
               "body_markdown": "In IntelliJ IDEA you can just open Git Repository Log by pressing &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;9&lt;/kbd&gt;, then right mouse button click at some tag from commits list and select: &quot;Reset Current Branch to Here...&quot;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1500209638, 
               "id": "44649998", 
               "up_vote_count": 8
            }, 
            {
               "answer_id": 44672195, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1509108394, 
               "creation_date": 1498037599, 
               "score": 172, 
               "body_markdown": "Just reset it doing the command below using `git`:\r\n\r\n    git reset --soft HEAD~1\r\n\r\n**Explain:** what `git reset` does, it&#39;s basically `reset` to any commit you&#39;d like to go back to, then if you combine it with `--soft` key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, `HEAD` is the head of the branch and if you combine with `~1` (in this case you also use `HEAD^`), it will go back only one commit which what you want...\r\n\r\nI create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:\r\n\r\n[![How to undo the last commits in Git?][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/7zrzb.jpg", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1509108394, 
               "id": "44672195", 
               "up_vote_count": 173
            }, 
            {
               "answer_id": 44790317, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1500319624, 
               "creation_date": 1498599267, 
               "score": 7, 
               "body_markdown": "For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers. \r\n\r\nSince the commit was not pushed, the remote was unchanged, so:\r\n\r\n 1. Delete the local repo.\r\n 2. Clone the remote repo.\r\n\r\nThis is sometimes necessary if your fancy git client goes bye-bye.&lt;br&gt;\r\nDon&#39;t forget to re-commit your *saved* changes since the last push.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1500319624, 
               "id": "44790317", 
               "up_vote_count": 8
            }, 
            {
               "answer_id": 45164987, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1500375917, 
               "creation_date": 1500375917, 
               "score": 6, 
               "body_markdown": "**HEAD:**\r\n\r\n   Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...\r\n\r\n**git commmit:**\r\n\r\nEach changes assigned under commit which is represented by unique tag.. Commits can&#39;t be deleted. so if you want your last commit you can simply dive into it using `git reset`\r\n\r\nyou can dive into last commit using 2 method,\r\n\r\n**Method 1:** ( if you dont know commit number but want to move onto very first) \r\n\r\n    git reset HEAD~1  #it will move your head to last commit\r\n\r\n**Method 2:** ( if you know commit you simply reset onto your known commit)\r\n\r\n`git reset 0xab3` # commit number \r\n\r\n\r\n**Note:**  if you want to know recent commit try this, `git log -p -1` \r\n\r\nhere is the graphical representation,\r\n\r\n[![enter image description here][1]][1]\r\n\r\n   \r\n\r\n  \r\n\r\n\r\n  [1]: https://i.stack.imgur.com/boiKO.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "45164987", 
               "up_vote_count": 7
            }, 
            {
               "answer_id": 45456148, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1501664314, 
               "creation_date": 1501664314, 
               "score": 13, 
               "body_markdown": "You can undo your git commits in two ways:-\r\nFirst is you can use git revert, if you want to keep your commit history.\r\n\r\n    git revert HEAD~3\r\n    git revert &lt;hashcode of commit&gt;\r\n\r\nSecond is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.\r\n\r\n    git reset &lt;hashcode of commit&gt;\r\n    git reset HEAD~3\r\n\r\nYou can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it&#39;s extremely necessary.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "45456148", 
               "up_vote_count": 13
            }, 
            {
               "answer_id": 46210590, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1517175299, 
               "creation_date": 1505363632, 
               "score": 25, 
               "body_markdown": "**Undo the Last Commit**\r\n\r\nThere are tons of situations where you really want to undo that last commit into your code. E.g. because you&#39;d like to restructure it extensively - or even discard it altogether!\r\n\r\nIn these cases, the &quot;reset&quot; command is your best friend:\r\n\r\n    $ git reset --soft HEAD~1\r\n\r\nThe above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we&#39;d like to return to the one before the current revision - effectively making our last commit undone.\r\n\r\nNote the `--soft` flag: this makes sure that the changes in undone revisions are preserved. After running the command, you&#39;ll find the changes as uncommitted local modifications in your working copy.\r\n\r\nIf you don&#39;t want to keep these changes, simply use the `--hard` flag. Be sure to only do this when you&#39;re sure you don&#39;t need these changes any more.\r\n\r\n    $ git reset --hard HEAD~1\r\n\r\n[![Enter image description here][1]][1]\r\n\r\n  [1]: https://i.stack.imgur.com/hqetQ.png\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1517175299, 
               "id": "46210590", 
               "up_vote_count": 26
            }, 
            {
               "answer_id": 48801644, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1518678495, 
               "creation_date": 1518678495, 
               "score": 3, 
               "body_markdown": "**Undo last commit:**\r\n\r\n    git reset --soft HEAD^ or git reset --soft HEAD~\r\n\r\n**This will undo the last commit.**\r\n\r\nHere `--soft` means reset into staging.\r\n\r\n`HEAD~ or HEAD^` means to move to commit before HEAD.\r\n\r\nReplace last commit to new commit:\r\n\r\n    git commit --amend -m &quot;message&quot;\r\n\r\nIt will replace the last commit with the new commit.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "48801644", 
               "up_vote_count": 3
            }, 
            {
               "answer_id": 49025156, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1519806898, 
               "creation_date": 1519806898, 
               "score": 0, 
               "body_markdown": "Here is site: [`Oh shit, git!`](http://ohshitgit.com/).  \r\n\r\nHere are many recipes how to undo things in git. Some of them:\r\n\r\n&gt;Oh shit, I need to change the message on my last commit!\r\n\r\n    git commit --amend\r\n    # follow prompts to change the commit message\r\n\r\n&gt;Oh shit, I accidentally committed something to master that should have been on a brand new branch!\r\n\r\n    # create a new branch from the current state of master\r\n    git branch some-new-branch-name\r\n    # remove the commit from the master branch\r\n    git reset HEAD~ --hard\r\n    git checkout some-new-branch-name\r\n    # your commit lives in this branch now :)", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "49025156", 
               "up_vote_count": 0
            }
         ], 
         "last_activity_date": 1519806898, 
         "accepted_answer_id": 927386, 
         "creation_date": "1243620554", 
         "last_edit_date": "1518818337", 
         "id": "21914226-0", 
         "view_count": "6043820", 
         "title": "How to undo the most recent commits in Git", 
         "code_snippet": "[u'<code>git reset --bla foo</code>', u'<code>git --force push [--all] [somewhere-else-than-origin]</code>', u'<code>git pull</code>', u'<code>git fetch [--all]</code>', u'<code>git rebase origin/master</code>', u'<code>origin</code>', u'<code>[bla]</code>', u'<code>$ git commit -m \"Something terribly misguided\"              (1)\\n$ git reset HEAD~                                           (2)\\n&lt;&lt; edit files as necessary &gt;&gt;                               (3)\\n$ git add ...                                               (4)\\n$ git commit -c ORIG_HEAD                                   (5)\\n</code>', u'<code>git status</code>', u'<code>git reset --soft HEAD~</code>', u'<code>git reset HEAD~</code>', u'<code>HEAD~</code>', u'<code>HEAD~1</code>', u'<code>git add</code>', u'<code>reset</code>', u'<code>.git/ORIG_HEAD</code>', u'<code>commit</code>', u'<code>-c ORIG_HEAD</code>', u'<code>-C</code>', u'<code>git reset</code>', u'<code>git commit --amend</code>', u'<code>commit --amend</code>', u'<code>git checkout theRightBranch</code>', u'<code>git reset --soft HEAD^</code>', u'<code>git reset --soft HEAD~1</code>', u'<code>--soft</code>', u'<code>git reset HEAD~1</code>', u\"<code>git reset --soft 'HEAD^'</code>\", u'<code>--mixed</code>', u'<code>--mixed</code>', u'<code>--soft</code>', u'<code>zsh: no matches found: HEAD^</code>', u'<code>git reset --soft HEAD\\\\^</code>', u'<code>   (F)\\nA-B-C\\n    \\u2191\\n  master\\n</code>', u'<code>git reset --hard HEAD~1\\n</code>', u'<code> (F)\\nA-B\\n  \\u2191\\nmaster\\n</code>', u'<code>--hard</code>', u'<code>   (F)\\nA-B-C\\n    \\u2191\\n  master\\n</code>', u'<code>--hard</code>', u'<code>git reset HEAD~1\\n</code>', u'<code>   (F)\\nA-B-C\\n  \\u2191\\nmaster\\n</code>', u'<code>git reset HEAD~1</code>', u'<code>--hard</code>', u'<code>git status</code>', u'<code>git reset --soft HEAD~1\\n</code>', u'<code>git status</code>', u'<code>git commit</code>', u'<code>git reflog</code>', u'<code>git checkout -b someNewBranchName shaYouDestroyed\\n</code>', u'<code>git reset --hard HEAD^^</code>', u'<code>git branch -f &lt;branch&gt; &lt;commit-id&gt;</code>', u\"<code>git log\\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\\n    commit 100: good commit   # second to last commit, this is the one we want\\n</code>\", u'<code>reset</code>', u'<code>HEAD</code>', u\"<code>git reset --soft HEAD^     # use --soft if you want to keep your changes\\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made\\n</code>\", u'<code>git log</code>', u'<code>git revert HEAD\\n</code>', u\"<code>git commit -m 'restoring the file I removed by accident'\\ngit log\\n    commit 102: restoring the file I removed by accident\\n    commit 101: removing a file we don't need\\n    commit 100: adding a file that we need\\n</code>\", u'<code>git revert HEAD^</code>', u'<code>git revert HEAD</code>', u'<code>git rm classdir\\ngit add sourcedir\\n</code>', u'<code>git commit --amend\\n</code>', u'<code>git commit --amend</code>', u'<code>git commit</code>', u'<code>git reset --soft &lt;oldref&gt;</code>', u'<code>git reflog</code>', u'<code>git commit</code>', u'<code>git rm yourfiles/*.class\\ngit commit -a -m \"deleted all class files in folder \\'yourfiles\\'\"\\n</code>', u'<code>git reset --hard HEAD~1\\n</code>', u'<code>.java</code>', u'<code>hard reset</code>', u'<code>HEAD-1</code>', u'<code>git commit -a -m \"\"</code>', u'<code>git commit -am \"\"</code>', u'<code>git stash</code>', u'<code>git stash pop</code>', u'<code>git rm --cached *.class\\ngit add *.java\\n</code>', u'<code>git commit --amend\\n</code>', u\"<code>git commit -m 'Replace .class files with .java files'\\n</code>\", u'<code>*.class</code>', u'<code>reset</code>', u'<code>git reset @~N\\n</code>', u'<code>N</code>', u'<code>HEAD</code>', u'<code>@~</code>', u'<code>git reset @~\\ngit add *.java\\ngit commit -m \"Add .java files\"\\n</code>', u'<code>git help reset</code>', u'<code>--soft</code>', u'<code>--mixed</code>', u'<code>--hard</code>', u\"<code>$ git reset @~\\n$ git reflog\\nc4f708b HEAD@{0}: reset: moving to @~\\n2c52489 HEAD@{1}: commit: added some .class files\\n$ git reset 2c52489\\n... and you're back where you started\\n</code>\", u'<code>git revert commit-id</code>', u'<code>git log</code>', u'<code>git revert commit-id</code>', u'<code>git cherry-pick &lt;&lt;erroneous-commit-sha&gt;&gt;</code>', u'<code>git reset --hard HEAD^1\\n</code>', u'<code>git add</code>', u'<code>git reset --soft HEAD^1\\n</code>', u'<code>git reset HEAD\\n</code>', u'<code>git undo</code>', u'<code>git undo 3</code>', u'<code>prompt&gt; git reset --hard 5a7404742c85\\nHEAD is now at 5a74047 Added one more page to catalogue\\nprompt&gt; git push origin master --force\\nTotal 0 (delta 0), reused 0 (delta 0)\\nremote: bb/acl: neoneye is allowed. accepted payload.\\nTo git@bitbucket.org:thecompany/prometheus.git\\n + 09a6480...5a74047 master -&gt; master (forced update)\\nprompt&gt;\\n</code>', u'<code>git rebase -i</code>', u'<code>git rebase -i HEAD~3\\n</code>', u'<code>pick aa28ba7 Sanity check for RtmpSrv port\\npick c26c541 RtmpSrv version option\\npick 58d6909 Better URL decoding support\\n</code>', u'<code>git commit --amend</code>', u'<code>gitk</code>', u'<code>git rebase</code>', u'<code>git reset HEAD~1</code>', u'<code>git reset</code>', u'<code>git revert --no-edit HEAD\\n</code>', u'<code>gitk --all $(git reflog | cut -c1-7)&amp;</code>', u'<code>git reset</code>', u'<code>git reset --soft HEAD~1\\n</code>', u'<code>git revert HEAD\\n</code>', u'<code>HEAD~1</code>', u'<code>git log --stat</code>', u'<code>git reflog</code>', u'<code>git log \\n</code>', u'<code>git reset --hard &lt;commit_id&gt;\\n\\ngit push origin &lt;branch_name&gt; -f\\n</code>', u'<code>git reset --hard</code>', u'<code>-f</code>', u'<code>git revert\\n</code>', u\"<code>git reset --soft HEAD^ # Use --soft if you want to keep your changes.\\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes.\\n</code>\", u\"<code>git reset --soft 'HEAD^' \\n</code>\", u'<code>git reset --hard HEAD^\\n</code>', u'<code>git reset --soft HEAD^\\n</code>', u'<code>git</code>', u'<code>git reset --soft HEAD~1\\n</code>', u'<code>git reset</code>', u'<code>reset</code>', u'<code>--soft</code>', u'<code>HEAD</code>', u'<code>~1</code>', u'<code>HEAD^</code>', u'<code>git reflog\\n</code>', u'<code>git reset --hard f3cb6e2\\n</code>', u'<code>git reflog\\n</code>', u'<code>git reset --hard ActionIdFromRefLog\\n</code>', u'<code>git reset --hard HEAD^ \\n</code>', u'<code>git clean    \\n</code>', u'<code>git reset --hard</code>', u'<code>git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME\\n</code>', u'<code>git log</code>', u'<code>git reset &lt;the previous co&gt;\\n</code>', u'<code>git reset --soft HEAD^</code>', u'<code>git reset --soft HEAD~</code>', u'<code>--soft</code>', u'<code>HEAD~</code>', u'<code>HEAD^</code>', u'<code>git commit --amend -m \"message\"\\n</code>', u'<code>git reset --soft HEAD^\\ngit rm --cached [files you do not need]\\ngit add [files you need]\\ngit commit -c ORIG_HEAD\\n</code>', u'<code>git rm</code>', u'<code>--amend</code>', u'<code>git rm &lt;pathToFile&gt;\\n</code>', u'<code>-r</code>', u\"<code>git rm -r &lt;pathToDirectory&gt;\\ngit rm $(find -name '*.class')\\n</code>\", u'<code>git commit --amend -C HEAD # the -C option is to use the same commit message\\n</code>', u'<code>git push</code>', u'<code>-f</code>', u'<code>--amend</code>', u'<code>git reset --soft HEAD~ \\n</code>', u'<code>git reset --hard HEAD~1\\n</code>', u'<code>--soft</code>', u'<code>uncommitted changes</code>', u'<code>--hard</code>', u'<code>git reset --hard</code>', u'<code>git</code>', u'<code>git reset --hard</code>', u'<code>git revert dd61ab32\\n</code>']", 
         "score": 16693, 
         "body_markdown": "I accidentally committed wrong files to [Git][1], but I haven&#39;t pushed the commit to the server yet.\r\n\r\nHow can I undo those commits from the local repository? \r\n\r\n  [1]: http://en.wikipedia.org/wiki/Git_%28software%29\r\n\r\n", 
         "community_owned_date": 1363428511, 
         "is_answered": true, 
         "tags": "[u'git', u'git-commit', u'git-reset', u'git-revert']", 
         "answers": [
            {
               "answer_id": 927378, 
               "tags": [], 
               "down_vote_count": 18, 
               "last_activity_date": 1513202608, 
               "creation_date": 1243620787, 
               "score": 801, 
               "body_markdown": "&lt;!-- language: lang-bash --&gt;\r\n\r\n    git rm yourfiles/*.class\r\n    git commit -a -m &quot;deleted all class files in folder &#39;yourfiles&#39;&quot;\r\n\r\nor\r\n\r\n    git reset --hard HEAD~1\r\n\r\n**Warning: The above command will permanently remove the modifications to the `.java` files (and any other files) that you wanted to commit.**\r\n\r\n\r\nThe `hard reset` to `HEAD-1` will set your working copy to the state of the commit before your wrong commit.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513202608, 
               "id": "927378", 
               "up_vote_count": 819
            }, 
            {
               "answer_id": 927386, 
               "tags": [], 
               "down_vote_count": 81, 
               "last_activity_date": 1512569572, 
               "creation_date": 1243620822, 
               "score": 17771, 
               "body_markdown": "### Undo a commit and redo\r\n\r\n&lt;!-- language: bash --&gt;\r\n\r\n    $ git commit -m &quot;Something terribly misguided&quot;              (1)\r\n    $ git reset HEAD~                                           (2)\r\n    &lt;&lt; edit files as necessary &gt;&gt;                               (3)\r\n    $ git add ...                                               (4)\r\n    $ git commit -c ORIG_HEAD                                   (5)\r\n\r\n1. This is what you want to undo\r\n2. This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they&#39;ll appear as &quot;Changes not staged for commit&quot; in `git status`, and you&#39;ll need to add them again before committing). If you *only* want to *add* more changes to the previous commit, or change the commit message&lt;sup&gt;1&lt;/sup&gt;, you could use `git reset --soft HEAD~` instead, which is like `git reset HEAD~` (where `HEAD~` is the same as `HEAD~1`) but leaves your existing changes staged.\r\n3. Make corrections to working tree files.\r\n4. `git add` anything that you want to include in your new commit.\r\n5. Commit the changes, reusing the old commit message. `reset` copied the old head to `.git/ORIG_HEAD`; `commit` with `-c ORIG_HEAD` will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the `-C` option.\r\n\r\n-----\r\n\r\n&lt;sup&gt;1&lt;/sup&gt; Note, however, that you don&#39;t need to reset to an earlier commit if you just made a mistake in your *commit message*. The easier option is to `git reset` (to upstage any changes you&#39;ve made since) and then [`git commit --amend`][1], which will open your default commit message editor pre-populated with the last commit message. \r\n\r\nBeware however that if you have added any new changes to the index, using `commit --amend` will add them to your previous commit.\r\n\r\n  [1]: https://stackoverflow.com/q/179123/1146608\r\n  [2]: https://git-scm.com/docs/git-reset\r\n\r\n\r\n\r\n\r\n\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": true, 
               "last_edit_date": 1512569572, 
               "id": "927386", 
               "up_vote_count": 17852
            }, 
            {
               "answer_id": 927397, 
               "tags": [], 
               "down_vote_count": 18, 
               "last_activity_date": 1476254755, 
               "creation_date": 1243620986, 
               "score": 1564, 
               "body_markdown": "Add/remove files to get things the way you want:\r\n\r\n    git rm classdir\r\n    git add sourcedir\r\n\r\nThen amend the commit:\r\n\r\n    git commit --amend\r\n\r\nThe previous, erroneous commit will be edited to reflect the new index state - in other words, it&#39;ll be like you never made the mistake in the first place.\r\n\r\nNote that you should only do this if you haven&#39;t pushed yet. If you have pushed, then you&#39;ll just have to commit a fix normally.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1476254755, 
               "id": "927397", 
               "up_vote_count": 1582
            }, 
            {
               "answer_id": 3377569, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1450390361, 
               "creation_date": 1280569153, 
               "score": 632, 
               "body_markdown": "## To change the last commit\r\n\r\nReplace the files in the index:\r\n\r\n    git rm --cached *.class\r\n    git add *.java\r\n\r\nThen, if it&#39;s a private branch, **amend** the commit:\r\n\r\n    git commit --amend\r\n\r\nOr, if it&#39;s a shared branch, make a new commit:\r\n\r\n    git commit -m &#39;Replace .class files with .java files&#39;\r\n&lt;br&gt;\r\n*(**to change a previous commit**, use the awesome [interactive rebase])*\r\n\r\n\r\n----------\r\n\r\nProTip\u2122: &#160; Add `*.class` to a [gitignore] to stop this happening again.\r\n\r\n----------\r\n\r\n## To revert a commit\r\n\r\nAmending a commit is the ideal solution if you need to change the last commit, but a more general solution is `reset`.\r\n\r\nYou can reset git to any commit with:\r\n\r\n    git reset @~N\r\n\r\nWhere `N` is the number of commits before `HEAD`, and `@~` resets to the previous commit.\r\n\r\nSo, instead of amending the commit, you could use:\r\n\r\n    git reset @~\r\n    git add *.java\r\n    git commit -m &quot;Add .java files&quot;\r\n\r\nCheck out `git help reset`, specifically the sections on `--soft` `--mixed` and `--hard`, for a better understanding of what this does.\r\n\r\n## Reflog\r\n\r\nIf you mess up, you can always use the reflog to find dropped commits:\r\n\r\n    $ git reset @~\r\n    $ git reflog\r\n    c4f708b HEAD@{0}: reset: moving to @~\r\n    2c52489 HEAD@{1}: commit: added some .class files\r\n    $ git reset 2c52489\r\n    ... and you&#39;re back where you started\r\n\r\n&lt;br&gt;\r\n\r\n\r\n  [gitignore]: https://help.github.com/articles/ignoring-files\r\n  [interactive rebase]: https://stackoverflow.com/a/28421811/405550", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1495540989, 
               "id": "3377569", 
               "up_vote_count": 636
            }, 
            {
               "answer_id": 6376039, 
               "tags": [], 
               "down_vote_count": 8, 
               "last_activity_date": 1517354844, 
               "creation_date": 1308245243, 
               "score": 1575, 
               "body_markdown": "This took me a while to figure out, so maybe this will help someone...\r\n\r\nThere are two ways to &quot;undo&quot; your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):\r\n\r\n##How to undo a local commit\r\nLet&#39;s say I committed locally, but now want to remove that commit.\r\n\r\n    git log\r\n        commit 101: bad commit    # latest commit, this would be called &#39;HEAD&#39;\r\n        commit 100: good commit   # second to last commit, this is the one we want\r\n\r\nTo restore everything back to the way it was prior to the last commit, we need to `reset` to the commit before `HEAD`:\r\n\r\n    git reset --soft HEAD^     # use --soft if you want to keep your changes\r\n    git reset --hard HEAD^     # use --hard if you don&#39;t care about keeping the changes you made\r\n\r\nNow `git log` will show that our last commit has been removed.\r\n\r\n##How to undo a public commit\r\n\r\nIf you have already made your commits public, you will want to create a new commit which will &quot;revert&quot; the changes you made in your previous commit (current HEAD).\r\n\r\n    git revert HEAD\r\n\r\nYour changes will now be reverted and ready for you to commit:\r\n\r\n    git commit -m &#39;restoring the file I removed by accident&#39;\r\n    git log\r\n        commit 102: restoring the file I removed by accident\r\n        commit 101: removing a file we don&#39;t need\r\n        commit 100: adding a file that we need\r\n\r\nFor more info, check out [Git Basics - Undoing Things][1]\r\n\r\n\r\n  [1]: https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1517354844, 
               "id": "6376039", 
               "up_vote_count": 1583
            }, 
            {
               "answer_id": 6866485, 
               "tags": [], 
               "down_vote_count": 16, 
               "last_activity_date": 1479898858, 
               "creation_date": 1311891740, 
               "score": 9370, 
               "body_markdown": "Undoing a commit is a little scary if you don&#39;t know how it works.  But it&#39;s actually amazingly easy if you do understand.\r\n\r\nSay you have this, where C is your HEAD and (F) is the state of your files.\r\n\r\n       (F)\r\n    A-B-C\r\n        \u2191\r\n      master\r\n\r\nYou want to **nuke commit C and never see it again**.  You do this:\r\n\r\n    git reset --hard HEAD~1\r\n\r\nThe result is:\r\n\r\n     (F)\r\n    A-B\r\n      \u2191\r\n    master\r\n\r\nNow B is the HEAD.  Because you used `--hard`, your files are reset to their state at commit B.\r\n\r\nAh, but suppose commit C wasn&#39;t a disaster, but just a bit off.  You want to **undo the commit but keep your changes** for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:\r\n\r\n       (F)\r\n    A-B-C\r\n        \u2191\r\n      master\r\n\r\nYou can do this, leaving off the `--hard`:\r\n\r\n    git reset HEAD~1\r\n\r\nIn this case the result is:\r\n\r\n       (F)\r\n    A-B-C\r\n      \u2191\r\n    master\r\n\r\nIn both cases, HEAD is just a pointer to the latest commit.  When you do a `git reset HEAD~1`, you tell Git to move the HEAD pointer back one commit.  But (unless you use `--hard`) you leave your files as they were.  So now `git status` shows the changes you had checked into C.  You haven&#39;t lost a thing!\r\n\r\nFor the lightest touch, you can even **undo your commit but leave your files and your [index](https://git.wiki.kernel.org/index.php/WhatIsTheIndex)**:\r\n\r\n    git reset --soft HEAD~1\r\n\r\nThis not only leaves your files alone, it even leaves your *index* alone.  When you do `git status`, you&#39;ll see that the same files are in the index as before.  In fact, right after this command, you could do `git commit` and you&#39;d be redoing the same commit you just had.\r\n\r\nOne more thing: **Suppose you destroy a commit** as in the first example, **but then discover you needed it after all**?  Tough luck, right?\r\n\r\nNope, there&#39;s *still* a way to get it back.  Type `git reflog` and you&#39;ll see a list of (partial) commit shas that you&#39;ve moved around in.  Find the commit you destroyed, and do this:\r\n\r\n    git checkout -b someNewBranchName shaYouDestroyed\r\n\r\nYou&#39;ve now resurrected that commit.  Commits don&#39;t actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn&#39;t mean to get rid of.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1479898858, 
               "id": "6866485", 
               "up_vote_count": 9386
            }, 
            {
               "answer_id": 8487487, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1323771511, 
               "creation_date": 1323771511, 
               "score": 401, 
               "body_markdown": "If you have [Git Extras](https://github.com/visionmedia/git-extras) installed, you can run `git undo` to undo the latest commit. `git undo 3` will undo the last 3 commits.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "8487487", 
               "up_vote_count": 404
            }, 
            {
               "answer_id": 10044540, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1333720732, 
               "creation_date": 1333720732, 
               "score": 370, 
               "body_markdown": "I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.\r\n\r\n    prompt&gt; git reset --hard 5a7404742c85\r\n    HEAD is now at 5a74047 Added one more page to catalogue\r\n    prompt&gt; git push origin master --force\r\n    Total 0 (delta 0), reused 0 (delta 0)\r\n    remote: bb/acl: neoneye is allowed. accepted payload.\r\n    To git@bitbucket.org:thecompany/prometheus.git\r\n     + 09a6480...5a74047 master -&gt; master (forced update)\r\n    prompt&gt;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "10044540", 
               "up_vote_count": 375
            }, 
            {
               "answer_id": 10757800, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1346418622, 
               "creation_date": 1337961869, 
               "score": 507, 
               "body_markdown": "Use `git revert SHA-Of-The-Commit-You-Want-To-Revert`\r\n\r\nTo get the `SHA`, just use `git log`", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1346418622, 
               "id": "10757800", 
               "up_vote_count": 510
            }, 
            {
               "answer_id": 13061212, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1468574690, 
               "creation_date": 1351136480, 
               "score": 358, 
               "body_markdown": "I prefer to use `git rebase -i` for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just *feels right*.\r\n\r\nChoose how many commits you want to list, then invoke like this (to enlist last three)\r\n\r\n    git rebase -i HEAD~3\r\n\r\nSample list\r\n\r\n    pick aa28ba7 Sanity check for RtmpSrv port\r\n    pick c26c541 RtmpSrv version option\r\n    pick 58d6909 Better URL decoding support\r\n\r\nThen git will remove commits for any line that you remove.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1468574690, 
               "id": "13061212", 
               "up_vote_count": 363
            }, 
            {
               "answer_id": 14620228, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1479214559, 
               "creation_date": 1359615970, 
               "score": 404, 
               "body_markdown": "If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don&#39;t worry anything about that, just do the following command.\r\n\r\n    git reset --hard HEAD^1\r\n\r\n(This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after `git add`) then do the following command.\r\n\r\n    git reset --soft HEAD^1\r\n\r\nNow your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command\r\n\r\n    git reset HEAD\r\n\r\nNow committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.\r\n\r\n[More][1]\r\n\r\n  [1]: http://madhan-tech-updates.blogspot.in/2013/01/how-to-undo-your-local-git-commit.html\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1479214559, 
               "id": "14620228", 
               "up_vote_count": 406
            }, 
            {
               "answer_id": 16175525, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1436954672, 
               "creation_date": 1366738065, 
               "score": 318, 
               "body_markdown": "## How to fix the previous local commit  ##\r\n\r\nUse git-gui (or similar) to perform a `git commit --amend`. From the GUI you can add or remove individual files from the commit. You can also modify the commit message. \r\n\r\n## How to undo the previous local commit ##\r\n\r\nJust reset your branch to the previous location (for example, using `gitk` or `git rebase`). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use `git reset HEAD~1`.\r\n\r\n**Word of warning**: *Careless use of `git reset` is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.*\r\n\r\n## How to undo a public commit ##\r\n\r\nPerform a [reverse cherry pick][1] ([git-revert][2]) to undo the changes.\r\n\r\nIf you haven&#39;t yet pulled other changes onto your branch, you can simply do...\r\n\r\n    git revert --no-edit HEAD\r\n\r\nThen push your updated branch to the shared repository.\r\n\r\n  [1]: https://stackoverflow.com/a/1624724/86967\r\n  [2]: http://git-scm.com/docs/git-revert.html", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1495541913, 
               "id": "16175525", 
               "up_vote_count": 320
            }, 
            {
               "answer_id": 16527510, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1435138461, 
               "creation_date": 1368465145, 
               "score": 124, 
               "body_markdown": "Another way:\r\n\r\nCheckout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected &quot;Reset BRANCHNAME to this commit&quot;.\r\n\r\nThen navigate to your repository&#39;s local directory and run this command:\r\n\r\n    git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME\r\n\r\nThis will erase all commits after the current one in your local repository but only for that one branch.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138461, 
               "id": "16527510", 
               "up_vote_count": 126
            }, 
            {
               "answer_id": 16565962, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1435138458, 
               "creation_date": 1368623549, 
               "score": 120, 
               "body_markdown": "Type `git log` and find the last commit hash code and then enter:\r\n\r\n    git reset &lt;the previous co&gt;\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138458, 
               "id": "16565962", 
               "up_vote_count": 122
            }, 
            {
               "answer_id": 16609755, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1435138455, 
               "creation_date": 1368795733, 
               "score": 272, 
               "body_markdown": "If you want to permanently undo it and you have cloned some repository \r\n\r\nThe commit id can be seen by \r\n\r\n    git log \r\n\r\nThen you can do -\r\n   \r\n\r\n    git reset --hard &lt;commit_id&gt;\r\n\r\n    git push origin &lt;branch_name&gt; -f\r\n\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138455, 
               "id": "16609755", 
               "up_vote_count": 276
            }, 
            {
               "answer_id": 17362437, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1435138451, 
               "creation_date": 1372414709, 
               "score": 231, 
               "body_markdown": "On [SourceTree][1] (GUI for GitHub), you may right-click the commit and do a &#39;Reverse Commit&#39;. This should undo your changes.\r\n\r\nOn the terminal:\r\n\r\nYou may alternatively use:\r\n\r\n    git revert\r\n\r\nOr:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git reset --soft HEAD^ # Use --soft if you want to keep your changes.\r\n    git reset --hard HEAD^ # Use --hard if you don&#39;t care about keeping your changes.\r\n\r\n  [1]: https://www.atlassian.com/software/sourcetree/overview\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138451, 
               "id": "17362437", 
               "up_vote_count": 232
            }, 
            {
               "answer_id": 17716319, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1435138449, 
               "creation_date": 1374129676, 
               "score": 117, 
               "body_markdown": "In my case I accidentally committed some files I did not want to. So I did the following and it worked:\r\n\r\n    git reset --soft HEAD^\r\n    git rm --cached [files you do not need]\r\n    git add [files you need]\r\n    git commit -c ORIG_HEAD\r\n\r\nVerify the results with gitk or git log --stat", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138449, 
               "id": "17716319", 
               "up_vote_count": 117
            }, 
            {
               "answer_id": 18516122, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1497273708, 
               "creation_date": 1377793119, 
               "score": 100, 
               "body_markdown": "Use [SourceTree][1] (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it.\r\n\r\n  [1]: https://www.atlassian.com/software/sourcetree/overview\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1497273708, 
               "id": "18516122", 
               "up_vote_count": 102
            }, 
            {
               "answer_id": 19159566, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1513202688, 
               "creation_date": 1380804237, 
               "score": 137, 
               "body_markdown": "&quot;Reset the working tree to the last commit&quot;\r\n\r\n    git reset --hard HEAD^ \r\n\r\n&quot;Clean unknown files from the working tree&quot;\r\n\r\n    git clean    \r\nsee - [Git Quick Reference][1]\r\n\r\n\r\n  [1]: http://jonas.nitro.dk/git/quick-reference.html\r\n\r\n**NOTE:** This command will delete your previous commit, so use with caution! `git reset --hard` is safer \u2013", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513202688, 
               "id": "19159566", 
               "up_vote_count": 137
            }, 
            {
               "answer_id": 19320941, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1435138400, 
               "creation_date": 1381502476, 
               "score": 138, 
               "body_markdown": "First run: \r\n\r\n    git reflog\r\n\r\nIt will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.\r\n\r\nThen do:\r\n\r\n    git reset --hard ActionIdFromRefLog\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1435138400, 
               "id": "19320941", 
               "up_vote_count": 138
            }, 
            {
               "answer_id": 20960584, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1389047646, 
               "creation_date": 1389047646, 
               "score": 152, 
               "body_markdown": "Use reflog to find a correct state\r\n\r\n    git reflog\r\n\r\n![reflog before][1]\r\n_REFLOG BEFORE RESET_\r\n\r\nSelect the correct reflog (f3cb6e2 in my case) and type \r\n\r\n    git reset --hard f3cb6e2\r\n\r\nAfter that the repo HEAD will be reset to that HEADid\r\n![reset effect][2]\r\n_LOG AFTER RESET_\r\n\r\nFinally the reflog looks like the picture below\r\n\r\n![reflog after][3]\r\n_REFLOG FINAL_\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/c7e7D.png\r\n  [2]: http://i.stack.imgur.com/GdnDT.png\r\n  [3]: http://i.stack.imgur.com/Fhhub.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "20960584", 
               "up_vote_count": 153
            }, 
            {
               "answer_id": 21615125, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1391724511, 
               "creation_date": 1391724511, 
               "score": 77, 
               "body_markdown": "This **article** has an **excellent explanation** as to how to go **about various scenarios** (where a commit has been done as well as the push OR just a commit, before the push):\r\n\r\nhttp://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html\r\n\r\nFrom the article, the **easiest command** I saw to **revert a previous commit by its commit id**, was:\r\n\r\n    git revert dd61ab32", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "21615125", 
               "up_vote_count": 77
            }, 
            {
               "answer_id": 22163029, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1405973708, 
               "creation_date": 1393907718, 
               "score": 64, 
               "body_markdown": "### For a local commit\r\n\r\n    git reset --soft HEAD~1\r\n\r\nor if you do not remember exactly in which commit it is, you might use\r\n\r\n    git rm --cached &lt;file&gt;\r\n\r\n### For a pushed commit\r\n\r\nThe proper way of removing files from the repository history is using `git filter-branch`. That is,\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git filter-branch --index-filter &#39;git rm --cached &lt;file&gt;&#39; HEAD\r\n\r\nBut I recomnend you use this command with care. Read more at *[git-filter-branch(1) Manual Page][1]*.\r\n\r\n  [1]: https://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1405973708, 
               "id": "22163029", 
               "up_vote_count": 64
            }, 
            {
               "answer_id": 22199804, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1405973614, 
               "creation_date": 1394027735, 
               "score": 217, 
               "body_markdown": "A single command:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git reset --soft &#39;HEAD^&#39; \r\n\r\nIt works great to undo the last local commit!\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1405973614, 
               "id": "22199804", 
               "up_vote_count": 218
            }, 
            {
               "answer_id": 23242764, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490429641, 
               "creation_date": 1398252080, 
               "score": 183, 
               "body_markdown": "**How to undo the last Git commit?**\r\n\r\nTo restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.\r\n\r\n1. If you don&#39;t want to keep your changes that you made:\r\n\r\n        git reset --hard HEAD^\r\n\r\n2. If you want to keep your changes:\r\n\r\n        git reset --soft HEAD^\r\n\r\nNow check your git log. It will show that our last commit has been removed.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429641, 
               "id": "23242764", 
               "up_vote_count": 183
            }, 
            {
               "answer_id": 25553225, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1474010701, 
               "creation_date": 1409241784, 
               "score": 82, 
               "body_markdown": "To reset to the previous revision, permanently deleting all uncommitted changes: \r\n\r\n    git reset --hard HEAD~1", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1474010701, 
               "id": "25553225", 
               "up_vote_count": 86
            }, 
            {
               "answer_id": 25638420, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1411631905, 
               "creation_date": 1409728530, 
               "score": 277, 
               "body_markdown": "If you have committed junk but not pushed,\r\n\r\n    git reset --soft HEAD~1\r\n\r\n&gt; \r\n**HEAD~1** is a shorthand for the commit before head. Alternatively you can refer to the **SHA-1** of the hash if you want to reset to. *--soft* option will delete the commit but it will leave all your changed files &quot;Changes to be committed&quot;, as git status would put it.\r\n\r\n&gt;    If you want to get rid of any changes to tracked files in the working tree since the commit before head use &quot;**--hard**&quot; instead.\r\n\r\nOR\r\n\r\n&gt;If you already pushed and someone pulled which is usually my case, you can&#39;t use *git reset*. You can however do a *git revert*,\r\n\r\n\r\n    git revert HEAD\r\n\r\n&gt;This will create a new commit that reverses everything introduced by the accidental commit.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1411631905, 
               "id": "25638420", 
               "up_vote_count": 278
            }, 
            {
               "answer_id": 25811069, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1452556247, 
               "creation_date": 1410533461, 
               "score": 103, 
               "body_markdown": "There are two main scenarios\r\n\r\n**You haven&#39;t pushed the commit yet**\r\n\r\nIf the problem was extra files you commited (and you don&#39;t want those on repository), you can remove them using `git rm` and then commiting with `--amend`\r\n\r\n    git rm &lt;pathToFile&gt;\r\n\r\nYou can also remove entire directories with `-r`, or even combine with other [Bash][1] commands\r\n\r\n    git rm -r &lt;pathToDirectory&gt;\r\n    git rm $(find -name &#39;*.class&#39;)\r\n\r\nAfter removing the files, you can commit, with **--amend** option\r\n\r\n    git commit --amend -C HEAD # the -C option is to use the same commit message\r\n\r\nThis will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.\r\n\r\n**You already pushed the commit**\r\n\r\nYou can apply the same solution of the other scenario and then doing `git push` with the `-f` option, but it is **not recommended** since it overwrites the remote history with a divergent change (it can mess your repository).\r\n\r\nInstead, you have to do the commit without `--amend` (remember this about -amend`: That option rewrites the history on the last commit).\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1452556247, 
               "id": "25811069", 
               "up_vote_count": 103
            }, 
            {
               "answer_id": 27002094, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1416337868, 
               "creation_date": 1416337868, 
               "score": 51, 
               "body_markdown": "Usually, you want to **undo** a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to **redo** a commit.\r\n\r\nMost of the answers here focus on the command line. While the command line is the best way to use Git when you&#39;re comfortable with it, its probably a bit alien to those coming from other version control systems to Git. \r\n\r\nHere&#39;s how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.\r\n\r\n**NOTE:** I will assume here that you realised the commit was wrong before you pushed it. If you don&#39;t know what pushing is, you probably haven&#39;t pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history. \r\n\r\nThat said, here&#39;s how to fix your most recent fault commit using a GUI:\r\n\r\n 1. Navigate to your repository on the command line and start the gui with `git gui`\r\n 2. Choose &quot;Amend last commit&quot;. You will see your last commit message, the files you staged and the files you didn&#39;t.\r\n 3. Now change things to how you want them to look and click Commit. ", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "27002094", 
               "up_vote_count": 51
            }, 
            {
               "answer_id": 30118831, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1431968134, 
               "creation_date": 1431072263, 
               "score": 41, 
               "body_markdown": "Just undo the last commit: \r\n\r\n    git reset --soft HEAD~\r\n\r\nOr undo the time before last time commit: \r\n\r\n    git reset --soft HEAD~2\r\n\r\nOr undo any previous commit: \r\n\r\n    git reset --soft &lt;commitID&gt;\r\n\r\n \r\n\r\n(you can get the commitID using `git reflog`)\r\n\r\nWhen you undo a previous commit, remember to clean the workplace with\r\n\r\n    git clean\r\n    \r\nMore details can be found in the docs: [git-reset][0]\r\n\r\n\r\n  [0]: http://git-scm.com/docs/git-reset", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1431968134, 
               "id": "30118831", 
               "up_vote_count": 42
            }, 
            {
               "answer_id": 30428348, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490429689, 
               "creation_date": 1432501744, 
               "score": 30, 
               "body_markdown": "You need to do the easy and fast\r\n\r\n        git commit --amend\r\n\r\nif it&#39;s a private branch or\r\n\r\n        git commit -m &#39;Replace .class files with .java files&#39;\r\n\r\nif it&#39;s a shared or public branch.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429689, 
               "id": "30428348", 
               "up_vote_count": 30
            }, 
            {
               "answer_id": 31241087, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1436171420, 
               "creation_date": 1436171420, 
               "score": 25, 
               "body_markdown": "Use this command\r\n\r\n    git checkout -b old-state 0d1d7fc32", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "31241087", 
               "up_vote_count": 26
            }, 
            {
               "answer_id": 31944160, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1439302274, 
               "creation_date": 1439302274, 
               "score": 26, 
               "body_markdown": "In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:\r\n\r\nOn the same branch that you committed and pushed, if you type &quot;git status&quot; you wont&#39;t see anything new because you committed and pushed, now type:\r\n\r\n`    git reset --soft HEAD~1`\r\n\r\nThis will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:\r\n\r\n    git reset FILE\r\n\r\nWhere &quot;File&quot; is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "31944160", 
               "up_vote_count": 26
            }, 
            {
               "answer_id": 34093958, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1449249650, 
               "creation_date": 1449249650, 
               "score": 22, 
               "body_markdown": "**Remove a wrong commit that is already pushed to Github**\r\n\r\n    git push origin +(previous good commit id):(branch name)\r\nPlease specify the last good commit id you would like to reset back in Github.\r\n\r\nFor example. If latest commit id is wrong then specify the previous commit id in above git command with branch name. \r\n\r\nYou can get previous commit id using `git log`", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "34093958", 
               "up_vote_count": 22
            }, 
            {
               "answer_id": 34195835, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490429716, 
               "creation_date": 1449731835, 
               "score": 22, 
               "body_markdown": "You can always do a `git checkout` (SHA code) of the previous version and then commit again with the new code.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429716, 
               "id": "34195835", 
               "up_vote_count": 22
            }, 
            {
               "answer_id": 34547846, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490429813, 
               "creation_date": 1451572465, 
               "score": 37, 
               "body_markdown": "###A Typical Git Cycle\r\n\r\nIn speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,\r\n\r\n1. Cloning the first time from the remote server\r\n\r\n    `git clone $project`\r\n\r\n2. Pulling from remote (when I don&#39;t have a pending local commit to push)\r\n\r\n    `git pull`\r\n\r\n3. Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means `staged` area)\r\n\r\n    `git add $file1`\r\n\r\n4. Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn&#39;t want)\r\n\r\n    `git reset $file2`\r\n\r\n5. Committing file1 which is in $to_be_committed_list\r\n\r\n    `git commit -m &quot;commit message description&quot;`\r\n\r\n6. Syncing local commit with remote repository before pushing\r\n\r\n    `git pull --rebase`\r\n\r\n7. Resolving when conflict occurs [prerequisite configure mergetool][1]\r\n\r\n    `git mergetool #resolve merging here, also can manually merge`\r\n\r\n8. Adding conflict-resolved files, let&#39;s say `file1`:\r\n\r\n    `git add $file1`\r\n\r\n9. Continuing my previous rebase command\r\n\r\n    `git rebase --continue`\r\n\r\n10. Pushing ready and already synced last local commit\r\n\r\n    `git push origin head:refs/for/$branch # branch = master, dev, etc.`\r\n\r\n  [1]: https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429813, 
               "id": "34547846", 
               "up_vote_count": 37
            }, 
            {
               "answer_id": 34583071, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490429882, 
               "creation_date": 1451865582, 
               "score": 39, 
               "body_markdown": "To undo your local commit you use `git reset &lt;file&gt;`. Also [that tutorial][1] is very helpful to show you how it works.\r\n\r\nAlternatively, you can use `git revert &lt;commit&gt;`: [reverting][2] should be used when you want to add another commit that rolls back the changes (but keeps them in the project history).\r\n\r\n  [1]: https://www.atlassian.com/git/tutorials/undoing-changes/git-reset\r\n  [2]: https://www.atlassian.com/git/tutorials/undoing-changes/git-revert/\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429882, 
               "id": "34583071", 
               "up_vote_count": 39
            }, 
            {
               "answer_id": 34635179, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1453154313, 
               "creation_date": 1452089412, 
               "score": 89, 
               "body_markdown": "Simple, run this in your command line:\r\n\r\n    git reset --soft HEAD~ \r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1453154313, 
               "id": "34635179", 
               "up_vote_count": 89
            }, 
            {
               "answer_id": 35472255, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1490429959, 
               "creation_date": 1455766058, 
               "score": 70, 
               "body_markdown": "There are many ways to do it:\r\n\r\nGit command to undo the last commit/ previous commits:\r\n\r\n**Basic command to revert the commit in Git is:**\r\n\r\n    $ git reset --hard &lt;COMMIT -ID&gt;\r\n\r\nor\r\n\r\n    $ git reset --hard HEAD~&lt;n&gt;\r\n\r\n**COMMIT-ID**: ID for the commit\r\n\r\n**n:**  is number of last commits you want to revert\r\n\r\nYou can get the commit id as shown below:\r\n\r\n    $ **git log --oneline**\r\n\r\n    d81d3f1 function to subtract two numbers\r\n\r\n    be20eb8 function to add two numbers\r\n\r\n    bedgfgg function to mulitply two numbers\r\n\r\nwhere **d81d3f1** and **be20eb8** are commit id.\r\n\r\n**Now let&#39;s see some cases:**\r\n\r\n*Suppose you want to revert the last commit &#39;d81d3f1&#39;. Below are the ways:*\r\n\r\n    $ git reset --hard d81d3f1\r\n\r\nor\r\n\r\n    $ git reset --hard HEAD~1\r\n\r\n*Suppose you want to revert the commit &#39;be20eb8&#39;. Below are the way:*\r\n\r\n    $ git reset --hard be20eb8\r\n\r\nFor more detailed information you can refer and try out some other commands too for resetting head to a specified state:\r\n\r\n    $ git reset --help\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490429959, 
               "id": "35472255", 
               "up_vote_count": 71
            }, 
            {
               "answer_id": 35826537, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1513202720, 
               "creation_date": 1457265202, 
               "score": 120, 
               "body_markdown": "## Undo last commit: ##\r\n\r\n`git reset --soft HEAD^` or `git reset --soft HEAD~`\r\n\r\nThis will undo the last commit.\r\n\r\nHere `--soft` means reset into staging.\r\n\r\n`HEAD~` or `HEAD^` means to move to commit before HEAD.\r\n\r\n----------\r\n\r\n## Replace last commit to new commit: ##\r\n\r\n    git commit --amend -m &quot;message&quot;\r\n\r\nIt will replace the last commit with the new commit.\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513202720, 
               "id": "35826537", 
               "up_vote_count": 121
            }, 
            {
               "answer_id": 36040444, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1490430071, 
               "creation_date": 1458142910, 
               "score": 28, 
               "body_markdown": "I got the commit ID from `bitbucket` and then did:\r\n\r\n    git checkout commitID .\r\n\r\nExample:\r\n\r\n    git checkout 7991072 .\r\n\r\nAnd it reverted it back up to that working copy of that commit.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490430071, 
               "id": "36040444", 
               "up_vote_count": 30
            }, 
            {
               "answer_id": 36876212, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490430164, 
               "creation_date": 1461706553, 
               "score": 34, 
               "body_markdown": "**VISUAL STUDIO USERS (2015, etc.)**\r\n\r\nIf you cannot synchronise in Visual Studio as you are not allowed to push to a branch like &quot;development&quot; then as much as I tried, in Visual Studio NEITHER the **REVERT** NOR the **RESET** (hard or soft) would work.\r\n\r\nPer the answer with TONS OF VOTES:\r\n\r\nUse this at the command prompt of root of your project to nuke anything that will attempt to get pushed:\r\n\r\n    git reset --hard HEAD~1\r\n\r\nBackup or zip your files just in case you don&#39;t wish to lose any work, etc...\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490430164, 
               "id": "36876212", 
               "up_vote_count": 34
            }, 
            {
               "answer_id": 37510994, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1464531677, 
               "creation_date": 1464531677, 
               "score": 15, 
               "body_markdown": "Just use `git reset --hard &lt;last good SHA&gt;` to reset your changes and give new commit. You can also use `git checkout -- &lt;bad filename&gt;`.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "37510994", 
               "up_vote_count": 16
            }, 
            {
               "answer_id": 38091882, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1490430193, 
               "creation_date": 1467181706, 
               "score": 50, 
               "body_markdown": "You can use:\r\n\r\n    git reset HEAD@{1}\r\n\r\nThis command will delete your wrong commit without a Git log.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490430193, 
               "id": "38091882", 
               "up_vote_count": 52
            }, 
            {
               "answer_id": 38629666, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490430271, 
               "creation_date": 1469690662, 
               "score": 46, 
               "body_markdown": "## WHAT TO USE, `reset --soft` or `reset --hard`?\r\n\r\nI am just adding two cents for @Kyralessa&#39;s answer:\r\n\r\nIf you are unsure what to use go for `--soft` (I used this convention to remember it --**s**oft for safe).\r\n\r\n### Why ?\r\nIf you choose `--hard` by mistake you will **LOSE** your changes as it wasn&#39;t before.\r\nIf you choose `--soft` by mistake you can achieve the same results of `--hard` by applying additional commands\r\n\r\n    git reset HEAD file.html\r\n    git checkout -- file.html\r\n\r\n### Full example\r\n\r\n    echo &quot;some changes...&quot; &gt; file.html\r\n    git add file.html\r\n    git commit -m &quot;wrong commit&quot;\r\n\r\n    # I need to reset\r\n    git reset --hard HEAD~1 (cancel changes)\r\n    # OR\r\n    git reset --soft HEAD~1 # Back to staging\r\n    git reset HEAD file.html # back to working directory\r\n    git checkout -- file.html # cancel changes\r\n\r\nCredits goes to @Kyralessa.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490430271, 
               "id": "38629666", 
               "up_vote_count": 46
            }, 
            {
               "answer_id": 38656254, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490433739, 
               "creation_date": 1469787268, 
               "score": 43, 
               "body_markdown": "If you are working with **[SourceTree][1]**, this will help you.\r\n\r\n**Right click** on the commit then **select** &quot;*Reset (current branch)/master to this commit*&quot; and last **select**  *&quot;Soft&quot; reset*.\r\n\r\n [![Enter image description here][2]][2]\r\n\r\n  [1]: https://www.sourcetreeapp.com/\r\n  [2]: http://i.stack.imgur.com/BSMo2.png\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433739, 
               "id": "38656254", 
               "up_vote_count": 43
            }, 
            {
               "answer_id": 40445749, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1478404182, 
               "creation_date": 1478403522, 
               "score": 21, 
               "body_markdown": "In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:\r\n\r\n    git reset --hard HEAD~1\r\n    git reset --hard HEAD~2\r\n    ...\r\n    git reset --hard HEAD~n\r\n\r\nAnd, to get rid of anything after a specific commit:\r\n\r\n    git reset --hard &lt;commit sha&gt;\r\n\r\ne.g., \r\n\r\n    git reset --hard 0d12345\r\n\r\n&gt; PS:  \r\n&gt; 1- Be careful, because of &quot;hard&quot; option, it deletes the local changes\r\n&gt; in your repo as well and reverts to the previous mentioned commit. You\r\n&gt; should run this if you are sure you messed up in your last commit(s)\r\n&gt; and would like to go back in time. \r\n&gt; \r\n&gt; 2- Usually 7 letters of &quot;commit sha&quot; is enough, but in bigger\r\n&gt; projects, you may need up to 12 letters to guarantee be unique. You\r\n&gt; also can mention the whole 40 letters sha.\r\n&gt; \r\n&gt; 3- The above commands work in Github for Windows as well.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1478404182, 
               "id": "40445749", 
               "up_vote_count": 21
            }, 
            {
               "answer_id": 40619708, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1479244072, 
               "creation_date": 1479244072, 
               "score": 9, 
               "body_markdown": "[![enter image description here][1]][1]\r\n\r\nAssuming you&#39;re working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select `Revert`.  Easy as that.\r\n  [1]: https://i.stack.imgur.com/ueFVY.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "40619708", 
               "up_vote_count": 9
            }, 
            {
               "answer_id": 40672892, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1510781116, 
               "creation_date": 1479459459, 
               "score": 38, 
               "body_markdown": "Think we have ***code.txt*** file.\r\nWe make some changes on it and commit.\r\n**We can undo this commit in three ways**, but first you should know what is the staged file...\r\nAn staged file is a file that ready to commit and if you run `git status` this file will be shown with green color and if this is not staged for commit will be shown with red color:\r\n\r\n[![enter image description here][1]][1]\r\n\r\nIt means if you commit your change, your changes on this file is not saved.\r\nYou can add this file in your stage with `git add code.txt` and then commit your change:\r\n\r\n[![enter image description here][2]][2]\r\n\r\n**Undo last commit:**\r\n\r\n1. Now if we want just undo commit without any other changes, we can use\r\n\r\n    `git reset --soft HEAD^` \r\n\r\n    [![enter image description here][3]][3]\r\n\r\n2. If we want undo commit and its changes (***THIS IS DANGEROUS, because your change will lost***), we can use\r\n\r\n    `git reset --hard HEAD^`\r\n\r\n    [![enter image description here][4]][4]\r\n\r\n3. And if we want undo commit and remove changes from stage, we can use\r\n\r\n    `git reset --mixed HEAD^` or in a short form `git reset HEAD^`\r\n\r\n    [![enter image description here][5]][5]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/ymNKl.png\r\n  [2]: https://i.stack.imgur.com/36Yag.png\r\n  [3]: https://i.stack.imgur.com/Tx6x1.png\r\n  [4]: https://i.stack.imgur.com/8NDBS.png\r\n  [5]: https://i.stack.imgur.com/jg8g0.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1510781116, 
               "id": "40672892", 
               "up_vote_count": 38
            }, 
            {
               "answer_id": 41168796, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1490433800, 
               "creation_date": 1481818888, 
               "score": 7, 
               "body_markdown": "I have found [this][1] site which describes how to undo things that you have committed into the repository.\r\n\r\nSome commands:\r\n\r\n    git commit --amend        # Change last commit\r\n    git reset HEAD~ --soft    # Undo last commit\r\n\r\n  [1]: http://ohshitgit.com/\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433800, 
               "id": "41168796", 
               "up_vote_count": 11
            }, 
            {
               "answer_id": 41340201, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1490433829, 
               "creation_date": 1482820605, 
               "score": 17, 
               "body_markdown": "You just have to use a single command:\r\n\r\n    git reset --soft &#39;HEAD^&#39; \r\n\r\nIt works to undo the last local commit to your Git repository.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433829, 
               "id": "41340201", 
               "up_vote_count": 18
            }, 
            {
               "answer_id": 41350510, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490433842, 
               "creation_date": 1482864171, 
               "score": 23, 
               "body_markdown": "Use this command:\r\n\r\n    git checkout -b old-state number_commit\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433842, 
               "id": "41350510", 
               "up_vote_count": 23
            }, 
            {
               "answer_id": 41568578, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1490433858, 
               "creation_date": 1484050351, 
               "score": 64, 
               "body_markdown": "If you want remove files in the last commit, you can use this:  \r\n\r\n    git reset --hard HEAD~1\r\n\r\nAnd if need files in the last commit, you can use this:  \r\n\r\n    git reset --soft HEAD~1\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433858, 
               "id": "41568578", 
               "up_vote_count": 64
            }, 
            {
               "answer_id": 41905003, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1485562213, 
               "creation_date": 1485562213, 
               "score": 24, 
               "body_markdown": "You have several options to undo your last commit. \r\nHere are some of your options summarize into a single answer with code snippets\r\n\r\n**First of all you need to figure which are the &quot;wrong&quot; commits which you wish to discard.** We will use `git reflog` to find it.\r\n\r\n---\r\n\r\n###[`git reflog`](https://git-scm.com/docs/git-reflog)\r\nYou can always use the `reflog` as well.  \r\n`git reflog ` will display any change which updated the `HEAD` and checking out the desired reflog entry will set the `HEAD` back to this commit. \r\n\r\n**Every time the HEAD is modified there will be a new entry in the `reflog`**.  \r\nThe `reflog` is similar to unix history command and is kept locally on your machine.\r\n\r\n    git reflog\r\n    git checkout HEAD@{...}\r\n    # or\r\n    git checkout &lt;sha-1&gt;\r\n    \r\nUsing the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.\r\n\r\n[![enter image description here][1]][1]\r\n\r\n---\r\n\r\n###***[`git reset HEAD --hard &lt;commit_id&gt;`](https://git-scm.com/docs/git-reset)***\r\n**&quot;Move&quot;** your head back to the desired commit.  \r\nGit reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value `--hard/--soft/--mixed` you choose to pick. `--hard` will update both stage area and working directory with the given &lt;sha-1&gt; content and will &quot;detach&quot; any other commits beyond this point on your local branch. \r\n\r\nIf those commits are not part of any other branch they will become &quot;dangle&quot;.  \r\n&quot;dangle&quot; content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the `gc`.\r\n\r\n    # This will destroy any local modifications.\r\n    # Don&#39;t do it if you have uncommitted work you want to keep.\r\n    git reset --hard 0d1d7fc32\r\n\r\n    # Alternatively, if there&#39;s work to keep:\r\n    git stash\r\n    git reset --hard 0d1d7fc32\r\n    git stash pop\r\n    # This saves the modifications, then reapplies that patch after resetting.\r\n    # You could get merge conflicts, if you&#39;ve modified things which were\r\n    # changed since the commit you reset to.\r\n\r\n---\r\n\r\nThis schema illustrate which command does what.  \r\nAs you can see there `reset &amp;&amp; checkout` modify the `HEAD`.\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n[1]: http://i.stack.imgur.com/atW9w.png\r\n[2]: http://i.stack.imgur.com/NuThL.png\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "41905003", 
               "up_vote_count": 24
            }, 
            {
               "answer_id": 42512807, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1490433894, 
               "creation_date": 1488295946, 
               "score": 20, 
               "body_markdown": "Use:\r\n\r\n    git reset HEAD~1 --soft\r\n\r\nMake changes, add, and commit the changes.\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1490433894, 
               "id": "42512807", 
               "up_vote_count": 21
            }, 
            {
               "answer_id": 42844988, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1489699251, 
               "creation_date": 1489699251, 
               "score": 4, 
               "body_markdown": "    git reset --hard your_last_good_commit_hash_here\r\n\r\n    git push --force origin master", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "42844988", 
               "up_vote_count": 5
            }, 
            {
               "answer_id": 43128168, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1491993095, 
               "creation_date": 1490907419, 
               "score": 16, 
               "body_markdown": "Reference: [How to undo last commit in Git?][1]\r\n\r\nIf you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from [here][2]).\r\n\r\nOpen Git Extensions, right click on the commit you want to revert then select &quot;Revert commit&quot;. \r\n\r\n[![Git Extensions screen shot][3]][3]\r\n\r\n\r\nA popup will be opened (see the screenshot below)\r\n\r\n[![Revert commit popup][4]][4]\r\n\r\n\r\nSelect &quot;Automatically create a commit&quot; if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on &quot;Revert this commit&quot; button.\r\n\r\n\r\n  [1]: http://www.coding-issues.com/2017/03/how-to-undo-or-revert-last-commits-in-git.html\r\n  [2]: https://gitextensions.github.io/\r\n  [3]: https://i.stack.imgur.com/j2fK1.png\r\n  [4]: https://i.stack.imgur.com/Skufo.jpg", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1491993095, 
               "id": "43128168", 
               "up_vote_count": 17
            }, 
            {
               "answer_id": 43826836, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1501538652, 
               "creation_date": 1494118866, 
               "score": 25, 
               "body_markdown": "Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.\r\n\r\nFirst we need to correct our local repo by going back to the commit that we desire:\r\n\r\n    git reset --hard &lt;previous good commit id where you want local repo to go&gt;\r\n\r\nNow we forcefully push this good commit on the remote repo by using this command:\r\n\r\n    git push --force-with-lease\r\n\r\nThe &#39;with-lease&#39; version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull).", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1501538652, 
               "id": "43826836", 
               "up_vote_count": 25
            }, 
            {
               "answer_id": 44347830, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1496518336, 
               "creation_date": 1496518336, 
               "score": 7, 
               "body_markdown": "Find the last commit hash code by seeing the log by :\r\n\r\n    git log\r\n\r\nThen\r\n\r\n    git reset &lt;the previous co&gt;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "44347830", 
               "up_vote_count": 8
            }, 
            {
               "answer_id": 44649998, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1500209638, 
               "creation_date": 1497953121, 
               "score": 8, 
               "body_markdown": "In IntelliJ IDEA you can just open Git Repository Log by pressing &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;9&lt;/kbd&gt;, then right mouse button click at some tag from commits list and select: &quot;Reset Current Branch to Here...&quot;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1500209638, 
               "id": "44649998", 
               "up_vote_count": 8
            }, 
            {
               "answer_id": 44672195, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1509108394, 
               "creation_date": 1498037599, 
               "score": 172, 
               "body_markdown": "Just reset it doing the command below using `git`:\r\n\r\n    git reset --soft HEAD~1\r\n\r\n**Explain:** what `git reset` does, it&#39;s basically `reset` to any commit you&#39;d like to go back to, then if you combine it with `--soft` key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, `HEAD` is the head of the branch and if you combine with `~1` (in this case you also use `HEAD^`), it will go back only one commit which what you want...\r\n\r\nI create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:\r\n\r\n[![How to undo the last commits in Git?][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/7zrzb.jpg", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1509108394, 
               "id": "44672195", 
               "up_vote_count": 173
            }, 
            {
               "answer_id": 44790317, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1500319624, 
               "creation_date": 1498599267, 
               "score": 7, 
               "body_markdown": "For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers. \r\n\r\nSince the commit was not pushed, the remote was unchanged, so:\r\n\r\n 1. Delete the local repo.\r\n 2. Clone the remote repo.\r\n\r\nThis is sometimes necessary if your fancy git client goes bye-bye.&lt;br&gt;\r\nDon&#39;t forget to re-commit your *saved* changes since the last push.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1500319624, 
               "id": "44790317", 
               "up_vote_count": 8
            }, 
            {
               "answer_id": 45164987, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1500375917, 
               "creation_date": 1500375917, 
               "score": 6, 
               "body_markdown": "**HEAD:**\r\n\r\n   Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...\r\n\r\n**git commmit:**\r\n\r\nEach changes assigned under commit which is represented by unique tag.. Commits can&#39;t be deleted. so if you want your last commit you can simply dive into it using `git reset`\r\n\r\nyou can dive into last commit using 2 method,\r\n\r\n**Method 1:** ( if you dont know commit number but want to move onto very first) \r\n\r\n    git reset HEAD~1  #it will move your head to last commit\r\n\r\n**Method 2:** ( if you know commit you simply reset onto your known commit)\r\n\r\n`git reset 0xab3` # commit number \r\n\r\n\r\n**Note:**  if you want to know recent commit try this, `git log -p -1` \r\n\r\nhere is the graphical representation,\r\n\r\n[![enter image description here][1]][1]\r\n\r\n   \r\n\r\n  \r\n\r\n\r\n  [1]: https://i.stack.imgur.com/boiKO.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "45164987", 
               "up_vote_count": 7
            }, 
            {
               "answer_id": 45456148, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1501664314, 
               "creation_date": 1501664314, 
               "score": 13, 
               "body_markdown": "You can undo your git commits in two ways:-\r\nFirst is you can use git revert, if you want to keep your commit history.\r\n\r\n    git revert HEAD~3\r\n    git revert &lt;hashcode of commit&gt;\r\n\r\nSecond is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.\r\n\r\n    git reset &lt;hashcode of commit&gt;\r\n    git reset HEAD~3\r\n\r\nYou can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it&#39;s extremely necessary.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "45456148", 
               "up_vote_count": 13
            }, 
            {
               "answer_id": 46210590, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1517175299, 
               "creation_date": 1505363632, 
               "score": 25, 
               "body_markdown": "**Undo the Last Commit**\r\n\r\nThere are tons of situations where you really want to undo that last commit into your code. E.g. because you&#39;d like to restructure it extensively - or even discard it altogether!\r\n\r\nIn these cases, the &quot;reset&quot; command is your best friend:\r\n\r\n    $ git reset --soft HEAD~1\r\n\r\nThe above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we&#39;d like to return to the one before the current revision - effectively making our last commit undone.\r\n\r\nNote the `--soft` flag: this makes sure that the changes in undone revisions are preserved. After running the command, you&#39;ll find the changes as uncommitted local modifications in your working copy.\r\n\r\nIf you don&#39;t want to keep these changes, simply use the `--hard` flag. Be sure to only do this when you&#39;re sure you don&#39;t need these changes any more.\r\n\r\n    $ git reset --hard HEAD~1\r\n\r\n[![Enter image description here][1]][1]\r\n\r\n  [1]: https://i.stack.imgur.com/hqetQ.png\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1517175299, 
               "id": "46210590", 
               "up_vote_count": 26
            }, 
            {
               "answer_id": 48801644, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1518678495, 
               "creation_date": 1518678495, 
               "score": 3, 
               "body_markdown": "**Undo last commit:**\r\n\r\n    git reset --soft HEAD^ or git reset --soft HEAD~\r\n\r\n**This will undo the last commit.**\r\n\r\nHere `--soft` means reset into staging.\r\n\r\n`HEAD~ or HEAD^` means to move to commit before HEAD.\r\n\r\nReplace last commit to new commit:\r\n\r\n    git commit --amend -m &quot;message&quot;\r\n\r\nIt will replace the last commit with the new commit.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "48801644", 
               "up_vote_count": 3
            }, 
            {
               "answer_id": 49025156, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1519806898, 
               "creation_date": 1519806898, 
               "score": 0, 
               "body_markdown": "Here is site: [`Oh shit, git!`](http://ohshitgit.com/).  \r\n\r\nHere are many recipes how to undo things in git. Some of them:\r\n\r\n&gt;Oh shit, I need to change the message on my last commit!\r\n\r\n    git commit --amend\r\n    # follow prompts to change the commit message\r\n\r\n&gt;Oh shit, I accidentally committed something to master that should have been on a brand new branch!\r\n\r\n    # create a new branch from the current state of master\r\n    git branch some-new-branch-name\r\n    # remove the commit from the master branch\r\n    git reset HEAD~ --hard\r\n    git checkout some-new-branch-name\r\n    # your commit lives in this branch now :)", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "49025156", 
               "up_vote_count": 0
            }
         ], 
         "link": "https://stackoverflow.com/questions/927358/how-to-undo-the-most-recent-commits-in-git", 
         "answer_count": "67", 
         "path": "2.stack", 
         "down_vote_count": 28, 
         "up_vote_count": "16721", 
         "question_id": 927358
      }, 
      {
         "is_answered": true, 
         "protected_date": 1358718496, 
         "body_markdown": "I want to delete a branch both locally and on my remote project fork on [GitHub][1].\r\n\r\n### Failed Attempts to Delete Remote Branch\r\n\r\n    $ git branch -d remotes/origin/bugfix\r\n    error: branch &#39;remotes/origin/bugfix&#39; not found.\r\n\r\n    $ git branch -d origin/bugfix\r\n    error: branch &#39;origin/bugfix&#39; not found.\r\n\r\n    $ git branch -rd origin/bugfix\r\n    Deleted remote branch origin/bugfix (was 2a14ef7).\r\n\r\n    $ git push\r\n    Everything up-to-date\r\n\r\n    $ git pull\r\n    From github.com:gituser/gitproject\r\n    * [new branch] bugfix -&gt; origin/bugfix\r\n    Already up-to-date.\r\n\r\nWhat do I need to do differently to successfully delete the\r\n`remotes/origin/bugfix` branch both locally and on GitHub?\r\n\r\n  [1]: http://en.wikipedia.org/wiki/GitHub\r\n", 
         "view_count": "5293815", 
         "title": "How do I delete a Git branch both locally and remotely?", 
         "_childDocuments_": [
            {
               "answer_id": 2003515, 
               "tags": [], 
               "down_vote_count": 11, 
               "last_activity_date": 1514124225, 
               "creation_date": 1262654035, 
               "score": 15726, 
               "body_markdown": "# Executive Summary\r\n\r\n    $ git push -d &lt;remote_name&gt; &lt;branch_name&gt;\r\n    $ git branch -d &lt;branch_name&gt;\r\n\r\nNote that in most cases the remote name is `origin`.\r\n\r\n# Delete Local Branch\r\n\r\nTo delete the *local* branch use one of the following:\r\n\r\n    $ git branch -d branch_name\r\n    $ git branch -D branch_name\r\n\r\n**Note:** The `-d` option is an alias for `--delete`, which only deletes the branch if it has already been fully merged in its upstream branch. You could also use `-D`, which is an alias for `--delete --force`, which deletes the branch &quot;irrespective of its merged status.&quot; [Source: `man git-branch`] \r\n\r\n# Delete Remote Branch [Updated on 8-Sep-2017]\r\n\r\nAs of [Git v1.7.0][git-1.7.0], you can delete a ***remote*** branch using\r\n\r\n    $ git push &lt;remote_name&gt; --delete &lt;branch_name&gt;\r\n\r\nwhich might be easier to remember than\r\n\r\n    $ git push &lt;remote_name&gt; :&lt;branch_name&gt;\r\n\r\nwhich was added in [Git v1.5.0][git-1.5.0] &quot;to delete a remote branch or a tag.&quot;\r\n\r\nStarting on [Git v2.8.0][git-2.8.0] you can also use `git push` with the `-d` option as an alias for `--delete`.\r\n\r\nTherefore, the version of Git you have installed will dictate whether you need to use the easier or harder syntax.\r\n\r\n## Delete Remote Branch [Original Answer from 5-Jan-2010]\r\n\r\nFrom Chapter 3 of [*Pro Git*][#progit] by Scott Chacon:\r\n\r\n&gt; ### Deleting Remote Branches ###\r\n&gt; \r\n&gt; Suppose you\u2019re done with a remote branch \u2014 say, you and your collaborators are finished with a feature and have merged it into your remote\u2019s master branch (or whatever branch your stable codeline is in). You can delete a remote branch using the rather obtuse syntax `git push [remotename] :[branch]`. If you want to delete your serverfix branch from the server, you run the following:\r\n&gt; \r\n    $ git push origin :serverfix\r\n    To git@github.com:schacon/simplegit.git\r\n     - [deleted]         serverfix\r\n\r\n&gt; Boom. No more branch on your server. You may want to dog-ear this page, because you\u2019ll need that command, and you\u2019ll likely forget the syntax. A way to remember this command is by recalling the `git push [remotename] [localbranch]:[remotebranch]` syntax that we went over a bit earlier. If you leave off the `[localbranch]` portion, then you\u2019re basically saying, \u201cTake nothing on my side and make it be `[remotebranch]`.\u201d\r\n\r\nI issued `git push origin :bugfix` and it worked beautifully. Scott Chacon was right\u2014I will want to [dog ear][1] that page (or virtually dog ear by answering this on Stack&amp;nbsp;Overflow).\r\n\r\n[#progit]: http://git-scm.com/book/en/Git-Branching-Remote-Branches\r\n\r\n[git-2.8.0]:\r\nhttps://github.com/git/git/blob/master/Documentation/RelNotes/2.8.0.txt\r\n\r\n[git-1.7.0]: https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.7.0.txt\r\n\r\n[git-1.5.0]: https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.5.0.txt\r\n\r\n  [1]: http://en.wiktionary.org/wiki/dogear#Verb\r\n\r\nThen you should execute this on other machines\r\n\r\n    git fetch --all --prune\r\n\r\nto propagate changes.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": true, 
               "last_edit_date": 1514124225, 
               "id": "2003515", 
               "up_vote_count": 15737
            }, 
            {
               "answer_id": 7923161, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1422557823, 
               "creation_date": 1319754173, 
               "score": 649, 
               "body_markdown": "You can also use the following to delete the remote branch.\r\n\r\n    git push --delete origin serverfix\r\n\r\nWhich does the same thing as\r\n\r\n    git push origin :serverfix\r\n\r\nbut it may be easier to remember.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1422557823, 
               "id": "7923161", 
               "up_vote_count": 651
            }, 
            {
               "answer_id": 9848609, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1375533186, 
               "creation_date": 1332555708, 
               "score": 86, 
               "body_markdown": "In addition to the other answers, I often use the [git_remote_branch][1] tool. It&#39;s an extra install, but it gets you a convenient way to interact with remote branches. In this case, to delete:\r\n\r\n    grb delete branch\r\n\r\nI find that I also use the `publish` and `track` commands quite often.\r\n\r\n  [1]: https://github.com/webmat/git_remote_branch", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1375533186, 
               "id": "9848609", 
               "up_vote_count": 91
            }, 
            {
               "answer_id": 10999165, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1513600393, 
               "creation_date": 1339512703, 
               "score": 2685, 
               "body_markdown": "Matthew&#39;s answer is great for removing *remote* branches and I also appreciate the explanation, but to make a simple distinction between the two commands:\r\n\r\nTo remove a ***local branch*** from your machine:\r\n\r\n`git branch -d {the_local_branch}` (use `-D` instead to force deleting the branch without checking merged status)\r\n\r\nTo remove a ***remote branch*** from the server:\r\n\r\n`git push origin --delete {the_remote_branch}`\r\n\r\nReference: https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513600393, 
               "id": "10999165", 
               "up_vote_count": 2690
            }, 
            {
               "answer_id": 13270340, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1422557886, 
               "creation_date": 1352293334, 
               "score": 314, 
               "body_markdown": "Tip: When you delete branches using\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch -d &lt;branchname&gt;    # deletes local branch\r\n\r\nor\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git push origin :&lt;branchname&gt; # deletes remote branch\r\n\r\nonly the references are deleted. Even though the branch is actually removed on the remote the references to it still exists in the local repositories of your team members. This means that for other team members the deleted branches are still visible when they do a `git branch -a`.\r\n\r\nTo solve this your team members can prune the deleted branches with\r\n\r\n    git remote prune &lt;repository&gt;\r\n\r\nThis is typically `git remote prune origin`.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1422557886, 
               "id": "13270340", 
               "up_vote_count": 319
            }, 
            {
               "answer_id": 13437928, 
               "tags": [], 
               "down_vote_count": 7, 
               "last_activity_date": 1420852271, 
               "creation_date": 1353219094, 
               "score": 169, 
               "body_markdown": "Another approach is\r\n\r\n    git push --prune origin\r\n\r\n***WARNING:*** *This will delete all remote branches that do not exist locally.* Or more comprehensively,\r\n\r\n    git push --mirror\r\n\r\nwill effectively make the remote repository look like the local copy of the repository (local heads, remotes and tags are mirrored on remote).\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1420852271, 
               "id": "13437928", 
               "up_vote_count": 176
            }, 
            {
               "answer_id": 14345010, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1402503977, 
               "creation_date": 1358276713, 
               "score": 102, 
               "body_markdown": "If you want to complete both these steps with a single command, you can make an alias for it by adding the below to your `~/.gitconfig`:\r\n\r\n    [alias]\r\n    \trmbranch = &quot;!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f&quot;\r\n\r\nAlternatively, you can add this to your global config from the command line using\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git config --global alias.rmbranch \\\r\n    &#39;!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f&#39;\r\n\r\n**NOTE**: If using `-d` (lowercase d), the branch will only be deleted if it has been merged. To force the delete to happen, you will need to use `-D` (uppercase D).", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1402503977, 
               "id": "14345010", 
               "up_vote_count": 103
            }, 
            {
               "answer_id": 15364667, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1417242386, 
               "creation_date": 1363100268, 
               "score": 88, 
               "body_markdown": "You can also do this using `git remote prune origin`:\r\n\r\n    $ git remote prune origin\r\n    Pruning origin\r\n    URL: git@example.com/yourrepo.git\r\n     * [pruned] origin/some-branchs\r\n\r\nIt prunes and deletes remote-tracking branches from a `git branch -r` listing.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1417242386, 
               "id": "15364667", 
               "up_vote_count": 89
            }, 
            {
               "answer_id": 15775364, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1417242422, 
               "creation_date": 1364940684, 
               "score": 141, 
               "body_markdown": "I use the following in my [Bash][1] settings:\r\n\r\n    alias git-shoot=&quot;git push origin --delete&quot;\r\n\r\nThen you can call:\r\n\r\n    git-shoot branchname\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1417242422, 
               "id": "15775364", 
               "up_vote_count": 144
            }, 
            {
               "answer_id": 16276586, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1401158586, 
               "creation_date": 1367231975, 
               "score": 109, 
               "body_markdown": "Since January 2013, GitHub included a &lt;kbd&gt;Delete branch&lt;/kbd&gt; button next to each branch in your &quot;Branches&quot; page.\r\n\r\nRelevant blog post: [Create and delete branches][1]\r\n\r\n\r\n  [1]: https://github.com/blog/1377-create-and-delete-branches", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1401158586, 
               "id": "16276586", 
               "up_vote_count": 114
            }, 
            {
               "answer_id": 19572740, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1407528243, 
               "creation_date": 1382636183, 
               "score": 237, 
               "body_markdown": "    git branch -D &lt;name-of-branch&gt;\r\n    git branch -D -r origin/&lt;name-of-branch&gt;\r\n    git push origin :&lt;name-of-branch&gt;\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1407528243, 
               "id": "19572740", 
               "up_vote_count": 240
            }, 
            {
               "answer_id": 20081966, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1401474841, 
               "creation_date": 1384894951, 
               "score": 35, 
               "body_markdown": "Mashup of all the other answers. Requires Ruby 1.9.3+, tested **only** on OS X.\r\n\r\nCall this file `git-remove`, make it executable, and put it in your path. Then use, for example, `git remove temp`. \r\n\r\n&lt;!-- language: lang-ruby --&gt;\r\n\r\n    #!/usr/bin/env ruby\r\n    require &#39;io/console&#39;\r\n    \r\n    if __FILE__ == $0\r\n    \t  branch_name = ARGV[0] if (ARGV[0])\r\n    \t  print &quot;Press Y to force delete local and remote branch #{branch_name}...&quot;\r\n        response = STDIN.getch\r\n        if [&#39;Y&#39;, &#39;y&#39;, &#39;yes&#39;].include?(response)\r\n          puts &quot;\\nContinuing.&quot;\r\n          `git branch -D #{branch_name}`\r\n          `git branch -D -r origin/#{branch_name}`\r\n          `git push origin --delete #{branch_name}`\t\r\n        else\r\n          puts &quot;\\nQuitting.&quot;\r\n        end\r\n    end", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1401474841, 
               "id": "20081966", 
               "up_vote_count": 35
            }, 
            {
               "answer_id": 20233127, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1385521495, 
               "creation_date": 1385521495, 
               "score": 40, 
               "body_markdown": "Many of the other answers will lead to errors/warnings. This approach is relatively fool proof although you may still need `git branch -D branch_to_delete` if it&#39;s not fully merged into `some_other_branch`, for example.\r\n\r\n    git checkout some_other_branch\r\n    git push origin :branch_to_delete\r\n    git branch -d branch_to_delete\r\n    \r\nRemote pruning isn&#39;t needed if you deleted the remote branch. It&#39;s only used to get the most up to date remotes available on a repo you&#39;re tracking. I&#39;ve observed `git fetch` will add remotes, not remove them. Here&#39;s an example of when `git remote prune origin` will actually do something:\r\n\r\nUser A does the steps above. User B would run the following commands to see the most up to date remote branches\r\n\r\n    git fetch\r\n    git remote prune origin\r\n    git branch -r\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "20233127", 
               "up_vote_count": 41
            }, 
            {
               "answer_id": 23961231, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1457612426, 
               "creation_date": 1401474755, 
               "score": 1527, 
               "body_markdown": "# The Short Answers\r\n\r\nIf you want more detailed explanations of the following commands, then see the long answers in the next section.\r\n\r\nDeleting a remote branch:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git push origin --delete &lt;branch&gt;  # Git version 1.7.0 or newer\r\n    git push origin :&lt;branch&gt;          # Git versions older than 1.7.0\r\n\r\nDeleting a local branch:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch --delete &lt;branch&gt;\r\n    git branch -d &lt;branch&gt; # Shorter version\r\n    git branch -D &lt;branch&gt; # Force delete un-merged branches\r\n\r\nDeleting a local remote-tracking branch:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch --delete --remotes &lt;remote&gt;/&lt;branch&gt;\r\n    git branch -dr &lt;remote&gt;/&lt;branch&gt; # Shorter\r\n\r\n    git fetch &lt;remote&gt; --prune # Delete multiple obsolete tracking branches\r\n    git fetch &lt;remote&gt; -p      # Shorter\r\n\r\n# The Long Answer: there are 3 different branches to delete!\r\n\r\nWhen you&#39;re dealing with deleting branches both locally and remotely, keep in mind that **there are 3 different branches involved**:\r\n\r\n1. The local branch `X`.\r\n2. The remote origin branch `X`.\r\n2. The local remote-tracking branch `origin/X` that tracks the remote branch `X`.\r\n\r\n![Visualization of 3 branches][1]\r\n\r\nThe original poster used\r\n\r\n    git branch -rd origin/bugfix\r\n\r\nwhich only deleted his **local remote-tracking branch** `origin/bugfix`, and not the actual remote branch `bugfix` on `origin`.\r\n\r\n![Diagram 2][2]\r\n\r\n**To delete that actual remote branch**, you need\r\n\r\n    git push origin --delete bugfix\r\n\r\n![Diagram 3][3]\r\n\r\n# Additional Details\r\n\r\nThe following sections describe additional details to consider when deleting your remote and remote-tracking branches.\r\n\r\n## Pushing to delete remote branches also deletes remote-tracking branches\r\n\r\nNote that deleting the remote branch `X` from the command line using a `git push` **will also delete the local remote-tracking branch** `origin/X`, so it is not necessary to prune the obsolete remote-tracking branch with `git fetch --prune` or `git fetch -p`, though it wouldn&#39;t hurt if you did it anyway.\r\n\r\nYou can verify that the remote-tracking branch `origin/X` was also deleted by running the following:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    # View just remote-tracking branches\r\n    git branch --remotes\r\n    git branch -r\r\n\r\n    # View both strictly local as well as remote-tracking branches\r\n    git branch --all\r\n    git branch -a\r\n\r\n## Pruning the obsolete local remote-tracking branch origin/X\r\n\r\nIf you didn&#39;t delete your remote branch `X` from the command line (like above), then your local repo will still contain (a now obsolete) remote-tracking branch `origin/X`. This can happen if you deleted a remote branch directly through GitHub&#39;s web interface, for example.\r\n\r\nA typical way to remove these obsolete remote-tracking branches (since Git version 1.6.6) is to simply run `git fetch` with the `--prune` or shorter `-p`. **Note that this removes all obsolete local remote-tracking branches for any remote branches that no longer exist on the remote**:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git fetch origin --prune\r\n    git fetch origin -p # Shorter\r\n\r\nHere is the relevant quote from the [1.6.6 release notes][notes] (emphasis mine):\r\n\r\n&gt; **&quot;git fetch&quot; learned** `--all` and `--multiple `options, to run fetch from\r\n&gt; many repositories, and **`--prune` option to remove remote tracking\r\n&gt; branches that went stale.**  These make &quot;git remote update&quot; and &quot;git\r\n&gt; remote prune&quot; less necessary (there is no plan to remove &quot;remote\r\n&gt; update&quot; nor &quot;remote prune&quot;, though).\r\n\r\n### Alternative to above automatic pruning for obsolete remote-tracking branches\r\n\r\nAlternatively, instead of pruning your obsolete local remote-tracking branches through `git fetch -p`, *you can avoid making the extra network operation* by just manually removing the branch(es) with the `--remote` or `-r` flags:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch --delete --remotes origin/X\r\n    git branch -dr origin/X # Shorter\r\n\r\n## See Also\r\n\r\n* [git-branch(1) Manual Page][branch].\r\n* [git-fetch(1) Manual Page][fetch].\r\n* [Pro Git &amp;sect; 3.5 Git Branching - Remote Branches][pro].\r\n\r\n[matt]: https://stackoverflow.com/a/2003515/456814\r\n[notes]: https://github.com/git/git/blob/v2.0.0/Documentation/RelNotes/1.6.6.txt#L162-L166\r\n[branch]: https://jk.gs/git-branch.html\r\n[fetch]: https://jk.gs/git-fetch.html\r\n[pro]: https://git-scm.com/book/en/Git-Branching-Remote-Branches\r\n[push-prune]: http://stackoverflow.com/a/13437928/456814\r\n[push]: https://www.kernel.org/pub/software/scm/git/docs/git-push.html\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/NLAqw.png\r\n  [2]: https://i.stack.imgur.com/iCOnz.png\r\n  [3]: https://i.stack.imgur.com/6Z3GY.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1457612426, 
               "id": "23961231", 
               "up_vote_count": 1527
            }, 
            {
               "answer_id": 25011664, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1413804652, 
               "creation_date": 1406624568, 
               "score": 54, 
               "body_markdown": "This won&#39;t work if you have a tag with the same name as the branch on the remote:\r\n\r\n    $ git push origin :branch-or-tag-name\r\n    error: dst refspec branch-or-tag-name matches more than one.\r\n    error: failed to push some refs to &#39;git@github.com:SomeName/some-repo.git&#39;\r\n\r\nIn that case you need to specify that you want to delete the branch, not the tag:\r\n\r\n    git push origin :refs/heads/branch-or-tag-name\r\n\r\nSimilarly, to delete the tag instead of the branch you would use:\r\n\r\n    git push origin :refs/tags/branch-or-tag-name\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1413804652, 
               "id": "25011664", 
               "up_vote_count": 54
            }, 
            {
               "answer_id": 26237660, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1433815442, 
               "creation_date": 1412689929, 
               "score": 330, 
               "body_markdown": "If you want to delete a branch, first checkout to the branch other than the branch to be deleted.\r\n\r\n    git checkout other_than_branch_to_be_deleted\r\n\r\nDeleting the local branch:\r\n\r\n    git branch -D branch_to_be_deleted\r\n\r\nDeleting the remote branch:\r\n\r\n    git push origin --delete branch_to_be_deleted\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1433815442, 
               "id": "26237660", 
               "up_vote_count": 332
            }, 
            {
               "answer_id": 28527604, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1433815394, 
               "creation_date": 1424013632, 
               "score": 200, 
               "body_markdown": "This is simple: Just run the following command:\r\n\r\nTo delete a Git branch both locally and remotely, first delete the local branch using command:\r\n\r\n    git branch -d example\r\n\r\n(here `example` is the branch name)\r\n\r\nAnd after that delete remote branch using command:\r\n\r\n    git push origin :example", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1433815394, 
               "id": "28527604", 
               "up_vote_count": 202
            }, 
            {
               "answer_id": 29831148, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1466859121, 
               "creation_date": 1429812393, 
               "score": 72, 
               "body_markdown": "Simply say:\r\n\r\n    git branch -d &lt;branch-name&gt;\r\n    git push origin :&lt;branch-name&gt;\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1466859121, 
               "id": "29831148", 
               "up_vote_count": 72
            }, 
            {
               "answer_id": 30001477, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1432029926, 
               "creation_date": 1430564380, 
               "score": 62, 
               "body_markdown": "    git push origin --delete branchName\r\n\r\nis easier to remember than\r\n\r\n    git push origin branchName\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1432029926, 
               "id": "30001477", 
               "up_vote_count": 62
            }, 
            {
               "answer_id": 30410815, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1433673413, 
               "creation_date": 1432371370, 
               "score": 95, 
               "body_markdown": "**Delete locally:**\r\n\r\nTo delete a local branch, you can use:\r\n\r\n    git branch -d branch_name \r\n\r\nTo delete a branch forcibly, use `-D` instead of `-d`. \r\n   \r\n\r\n    git branch -D branch_name\r\n\r\n          \r\n\r\n     \r\n**Delete remotely:**\r\n\r\nThere are two options:\r\n\r\n    git push origin :branchname  \r\n\r\n    git push origin --delete branchname \r\n\r\n  \r\n \r\nI would suggest you use the 2nd way as it is more intuitive.\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1433673413, 
               "id": "30410815", 
               "up_vote_count": 95
            }, 
            {
               "answer_id": 33275647, 
               "tags": [], 
               "down_vote_count": 12, 
               "last_activity_date": 1481860730, 
               "creation_date": 1445499528, 
               "score": 68, 
               "body_markdown": "Now you can do it with the [GitHub Desktop](https://desktop.github.com/) app.\r\n\r\nAfter launching the app\r\n\r\n1. Click on the project containing the branch\r\n2. Switch to the branch you would like to delete [![switching branch][1]][1]\r\n3. From the &quot;Branch&quot; menu, select, &quot;Unpublish...&quot;, to have the branch deleted from the GitHub servers. [![unpublish branch][2]][2]\r\n4. From the &quot;Branch&quot; menu, select, &#39;Delete &quot;*branch_name*&quot;...&#39;, to have the branch deleted off of your local machine (aka the machine you are currently working on) [![delete local branch][3]][3]\r\n\r\n  [1]: https://i.stack.imgur.com/c0ged.png\r\n  [2]: https://i.stack.imgur.com/1u8oS.png\r\n  [3]: https://i.stack.imgur.com/TTuLO.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1481860730, 
               "id": "33275647", 
               "up_vote_count": 80
            }, 
            {
               "answer_id": 33436213, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1447876273, 
               "creation_date": 1446208784, 
               "score": 80, 
               "body_markdown": "[Deleting Branches][1]\r\n\r\n&gt; Let&#39;s assume our work on branch &quot;contact-form&quot; is done and we&#39;ve already integrated it into &quot;master&quot;. Since we don&#39;t need it anymore, we can delete it (locally):\r\n\r\n&gt;     $ git branch -d contact-form\r\n\r\n\r\nAnd for deleting the remote branch:\r\n\r\n    git push origin --delete contact-form\r\n\r\n  [1]: http://www.git-tower.com/learn/git/ebook/command-line/remote-repositories/deleting-branches", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1447876273, 
               "id": "33436213", 
               "up_vote_count": 82
            }, 
            {
               "answer_id": 34544089, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1455905146, 
               "creation_date": 1451553772, 
               "score": 76, 
               "body_markdown": "Delete remote branch\r\n\r\n`git push origin :&lt;branchname&gt;`\r\n\r\nDelete local branch\r\n\r\n`git branch -D &lt;branchname&gt;`\r\n\r\nDelete local branch steps:\r\n\r\n1. checkout to another branch\r\n2. delete local branch", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1455905146, 
               "id": "34544089", 
               "up_vote_count": 78
            }, 
            {
               "answer_id": 34581636, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1513203051, 
               "creation_date": 1451855323, 
               "score": 92, 
               "body_markdown": "To delete your branch locally and remotely \r\n\r\n - Checkout to master branch -  `git checkout master`\r\n\r\n - Delete your remote branch - `git push origin --delete &lt;branch-name&gt;`\r\n\r\n - Delete your local branch - `git branch --delete &lt;branch-name&gt;`\r\n\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513203051, 
               "id": "34581636", 
               "up_vote_count": 93
            }, 
            {
               "answer_id": 35213755, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1466859200, 
               "creation_date": 1454628880, 
               "score": 27, 
               "body_markdown": "An alternative option to the command line for deleting remote branches is the **GitHub branches page**.\r\n\r\nSee for example: [https://github.com/angular/angular.js/branches](https://github.com/angular/angular.js/branches)\r\n\r\nFound in the `Code` -&gt; `Branches` page of a GitHub repository.\r\n\r\nI generally prefer command line myself but this **GitHub page shows you lots more information** about the branches, such as **last updated date and user**, and **number of commits ahead and behind**. It is useful when dealing with a large number of branches.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1466859200, 
               "id": "35213755", 
               "up_vote_count": 30
            }, 
            {
               "answer_id": 35324551, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1466859337, 
               "creation_date": 1455133656, 
               "score": 41, 
               "body_markdown": "I got sick of googling for this answer, so I took a similar approach\r\nto [the answer that crizCraig posted][1] earlier.\r\n\r\nAdded the following to my Bash profile:\r\n\r\n    function gitdelete(){\r\n        git push origin --delete $1\r\n        git branch -D $1\r\n    }\r\n\r\nThen every time I&#39;m done with a branch (merged into `master`, for example) I run the following in my terminal:\r\n\r\n    gitdelete my-branch-name\r\n\r\n...which then deletes `my-branch-name` from `origin` as as well as locally.\r\n\r\n  [1]: https://stackoverflow.com/a/15775364/551436\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1495542898, 
               "id": "35324551", 
               "up_vote_count": 45
            }, 
            {
               "answer_id": 36775924, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1461257376, 
               "creation_date": 1461257376, 
               "score": 38, 
               "body_markdown": "    git push origin :bugfix  # Deletes remote branch\r\n    git branch -d bugfix     # Must delete local branch manually\r\n    \r\nIf you are sure you want to delete it, run \r\n   \r\n\r\n    git branch -D bugfix\r\nNow to clean up deleted remote branches run\r\n\r\n    git remote prune origin\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "36775924", 
               "up_vote_count": 38
            }, 
            {
               "answer_id": 36980415, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1462185431, 
               "creation_date": 1462185431, 
               "score": 26, 
               "body_markdown": "I also had similar issues, and this seems to work:\r\nThis deletes local branch.\r\n`git branch -d the_local_branch`\r\n\r\nThis removes remote branch\r\n`git push origin :the_remote_branch`\r\n\r\n[Source: Makandra Cards][1]\r\n\r\n\r\n  [1]: http://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "36980415", 
               "up_vote_count": 27
            }, 
            {
               "answer_id": 37356297, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1466859369, 
               "creation_date": 1463780577, 
               "score": 36, 
               "body_markdown": "Before executing\r\n\r\n    git branch --delete &lt;branch&gt;\r\n\r\nmake sure you determine first what the EXACT name of the remote branch is by executing:\r\n\r\n    git ls-remote\r\n\r\nThis will tell you what to enter EXACTLY for `&lt;branch&gt;` value. (`branch` is case sensitive!)\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1466859369, 
               "id": "37356297", 
               "up_vote_count": 38
            }, 
            {
               "answer_id": 38776671, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1470341722, 
               "creation_date": 1470341722, 
               "score": 21, 
               "body_markdown": "There are good answer, but, in case that you have a ton of branches, deleting them one by one locally and remotly, would be a tedious tasks. You can use this script to automate this tasks. \r\n\r\n    branch_not_delete=( &quot;master&quot; &quot;develop&quot; &quot;our-branch-1&quot; &quot;our-branch-2&quot;)\r\n    \r\n    \r\n    for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master`; do\r\n    \r\n    \t# delete prefix remotes/origin/ from branch name\r\n    \tbranch_name=&quot;$(awk &#39;{gsub(&quot;remotes/origin/&quot;, &quot;&quot;);print}&#39; &lt;&lt;&lt; $branch)&quot;\r\n    \t\r\n    \tif ! [[ &quot; ${branch_not_delete[*]} &quot; == *&quot; $branch_name &quot;* ]]; then\r\n    \t\t# delete branch remotly and locally\r\n        \tgit push origin :$branch_name\r\n    \tfi\r\n    done \r\n\r\n- List the branches that you don&#39;t want to delete\r\n- Iterate over remotes branch and if they aren&#39;t in our &quot;preserve list&quot;, we deleted. \r\n\r\n\r\nSource: [removing-git-branches-at-once](http://levipy.com/removing-git-branches-at-once/)\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "38776671", 
               "up_vote_count": 21
            }, 
            {
               "answer_id": 40645071, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1484469043, 
               "creation_date": 1479344636, 
               "score": 75, 
               "body_markdown": "**One liner** command delete *both local, and remote*:\r\n\r\n`D=branch-name; git branch -D $D; git push origin :$D`\r\n\r\nor add the alias below to your *~/.gitconfig*; usage: `git kill branch-name`\r\n\r\n    [alias]\r\n        kill = &quot;!f(){ git branch -D \\&quot;$1\\&quot;;  git push origin --delete \\&quot;$1\\&quot;; };f&quot;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1484469043, 
               "id": "40645071", 
               "up_vote_count": 75
            }, 
            {
               "answer_id": 42193447, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1487114295, 
               "creation_date": 1486934712, 
               "score": 17, 
               "body_markdown": "Using **GitBash** you can execute the following:\r\n\r\n    git branch --delete &lt;branch&gt;\r\n\r\nOR \r\n-\r\nFrom the GitHub desktop app, when you have the branch checked out, you can delete the **Local** branch via the *Branch* menu strip:\r\n\r\n[![enter image description here][1]][1]\r\n\r\nIf you **ARE NOT** using the GitHub desktop app, and are using an IDE like Visual Studio for your local source control, all you have to do is a couple quick steps: \r\n\r\n 1. Check out a branch other than the one you wish to delete.\r\n 2. Right-click the branch you wish to delete.\r\n 3. Select the **Delete** option from the context menu.\r\n\r\nThen, once logged in to your GitHub account online, go to the repository and click the ***All Branches*** tab.  From there, just click the little trash can icon on the right on the name of the brach you wish to delete.  \r\n\r\n[![enter image description here][2]][2]\r\n\r\n*Keep in mind - if the branch isn&#39;t published, there&#39;s no need to try to delete it from your online repository.\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/b6dQg.png\r\n  [2]: https://i.stack.imgur.com/hbXpP.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1487114295, 
               "id": "42193447", 
               "up_vote_count": 21
            }, 
            {
               "answer_id": 42398224, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1493845321, 
               "creation_date": 1487784038, 
               "score": 35, 
               "body_markdown": "I added the following aliases to my `.gitconfig` file.  This allows me to delete branches with or without specifying the branch name.  Branch name is defaulted to the current branch if no argument is passed in.\r\n\r\n\r\n    [alias]\r\n        branch-name = rev-parse --abbrev-ref HEAD     \r\n    \r\n        rm-remote-branch = !&quot;f() { branch=${1-$(git branch-name)}; git push origin :$branch; }; f&quot;\r\n        rm-local-branch = !&quot;f() { branch=${1-$(git branch-name)}; git checkout master; git branch -d $branch; }; f&quot;\r\n        rm-branch-fully = !&quot;f() { branch=${1-$(git branch-name)}; git rm-local-branch $branch; git rm-remote-branch $branch; }; f&quot;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1493845321, 
               "id": "42398224", 
               "up_vote_count": 35
            }, 
            {
               "answer_id": 44074506, 
               "tags": [], 
               "down_vote_count": 18, 
               "last_activity_date": 1495210034, 
               "creation_date": 1495210034, 
               "score": -13, 
               "body_markdown": "This commands works best for me:\r\n\r\n    git branch -D &lt;branch name&gt;\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "44074506", 
               "up_vote_count": 5
            }, 
            {
               "answer_id": 44714712, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1511087043, 
               "creation_date": 1498200168, 
               "score": 60, 
               "body_markdown": "**To delete Locally - (Normal),** \r\n\r\n    git branch -d my_branch\r\n\r\nIf your branch in rebasing/merging progress and that was not done properly means, you will get an error `Rebase/Merge in progress` so in that case, you won&#39;t be able to delete your branch.\r\n\r\nSo either your need to solve rebasing/merging otherwise you can do force Delete by using,\r\n\r\n    git branch -D my_branch\r\n\r\n\r\n**To delete in Remote:**\r\n  \r\n\r\n    git push --delete origin my_branch\r\n \r\n**can do the same using ,**\r\n\r\n    git push origin :my_branch   # easy to remember both will do the same.\r\n\r\n**Graphical Representation,**\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Y7NmS.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1511087043, 
               "id": "44714712", 
               "up_vote_count": 61
            }, 
            {
               "answer_id": 44781228, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1516018666, 
               "creation_date": 1498569195, 
               "score": 563, 
               "body_markdown": "&lt;h3&gt;Steps for deleting a branch:&lt;/h3&gt;\r\nfor deleting the **remote branch:**\r\n  \r\n    git push origin --delete &lt;your_branch&gt; \r\n\r\nfor deleting the **local branch:**\r\n\r\n    git branch -D &lt;branch_name&gt; \r\n\r\n**Explain:** OK, just explain what&#39;s going on here!\r\n\r\nSimply do `git push origin --delete` to delete your remote branch, add the name of the branch at the end and this will delete and push it to remote at the same time...\r\n\r\nAlso, `git branch -D`, which simply delete the local branch **Only**!...\r\n\r\n`-D` stands for `--delete --force` which will delete the branch even it&#39;s not merged(force delete), but you can also use `-d` which stands for `--delete` which throw an error respective of the branch merge status...\r\n\r\nI also create the image below to show the steps:\r\n\r\n\r\n[![delete a remote and local branch in git][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/AKWYx.jpg", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1516018666, 
               "id": "44781228", 
               "up_vote_count": 564
            }, 
            {
               "answer_id": 45793291, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1504880835, 
               "creation_date": 1503306650, 
               "score": 5, 
               "body_markdown": "I use the following in my Bash settings:\r\n\r\n    alias git-shoot=&quot;git push origin --delete&quot;\r\n\r\nThen you can call:\r\n\r\n    git-shoot branchname", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1504880835, 
               "id": "45793291", 
               "up_vote_count": 6
            }, 
            {
               "answer_id": 46412667, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1506367200, 
               "creation_date": 1506367200, 
               "score": 6, 
               "body_markdown": "I created the following function:\r\n\r\n    git-delete-branch() \r\n    { \r\n        if [[ -n $1 ]]; then\r\n            git checkout master &gt; /dev/null;\r\n            branch_name=&quot;$1&quot;;\r\n            echo &quot;Deleting local $branch_name branch...&quot;;\r\n            git branch -D &quot;$branch_name&quot;;\r\n            echo &quot;Deleting remote $branch_name branch...&quot;;\r\n            git push origin --delete &quot;$branch_name&quot;;\r\n            git remote prune origin;\r\n            echo &quot;Your current branches are:&quot;;\r\n            git branch -a;\r\n        else\r\n            echo &quot;Usage: git-delete-branch &lt;branch_name&gt;&quot;;\r\n        fi\r\n    }\r\n\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "46412667", 
               "up_vote_count": 6
            }, 
            {
               "answer_id": 46888156, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1508757797, 
               "creation_date": 1508757797, 
               "score": 11, 
               "body_markdown": "According to latest document using terminal we can delete following way.\r\n\r\n**delete in local:**\r\n\r\n    git branch -D usermanagement\r\n\r\n**delete in remote location:**\r\n\r\n    git push --delete origin usermanagement\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "46888156", 
               "up_vote_count": 11
            }, 
            {
               "answer_id": 47696235, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1513590638, 
               "creation_date": 1512653383, 
               "score": 6, 
               "body_markdown": "&gt; Its very simple\r\n\r\n\r\n**To delete remote branch**\r\n\r\n    git push -d origin &lt;branch-name&gt;\r\nOR\r\n\r\n    git push origin :&lt;branch-name&gt;\r\n\r\n**To delete local branch**\r\n\r\n    git branch -D &lt;branch-name&gt;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513590638, 
               "id": "47696235", 
               "up_vote_count": 8
            }
         ], 
         "tags": "[u'git', u'git-branch', u'git-remote']", 
         "down_vote_count": 20, 
         "last_activity_date": 1516018666, 
         "answers": [
            {
               "answer_id": 2003515, 
               "tags": [], 
               "down_vote_count": 11, 
               "last_activity_date": 1514124225, 
               "creation_date": 1262654035, 
               "score": 15726, 
               "body_markdown": "# Executive Summary\r\n\r\n    $ git push -d &lt;remote_name&gt; &lt;branch_name&gt;\r\n    $ git branch -d &lt;branch_name&gt;\r\n\r\nNote that in most cases the remote name is `origin`.\r\n\r\n# Delete Local Branch\r\n\r\nTo delete the *local* branch use one of the following:\r\n\r\n    $ git branch -d branch_name\r\n    $ git branch -D branch_name\r\n\r\n**Note:** The `-d` option is an alias for `--delete`, which only deletes the branch if it has already been fully merged in its upstream branch. You could also use `-D`, which is an alias for `--delete --force`, which deletes the branch &quot;irrespective of its merged status.&quot; [Source: `man git-branch`] \r\n\r\n# Delete Remote Branch [Updated on 8-Sep-2017]\r\n\r\nAs of [Git v1.7.0][git-1.7.0], you can delete a ***remote*** branch using\r\n\r\n    $ git push &lt;remote_name&gt; --delete &lt;branch_name&gt;\r\n\r\nwhich might be easier to remember than\r\n\r\n    $ git push &lt;remote_name&gt; :&lt;branch_name&gt;\r\n\r\nwhich was added in [Git v1.5.0][git-1.5.0] &quot;to delete a remote branch or a tag.&quot;\r\n\r\nStarting on [Git v2.8.0][git-2.8.0] you can also use `git push` with the `-d` option as an alias for `--delete`.\r\n\r\nTherefore, the version of Git you have installed will dictate whether you need to use the easier or harder syntax.\r\n\r\n## Delete Remote Branch [Original Answer from 5-Jan-2010]\r\n\r\nFrom Chapter 3 of [*Pro Git*][#progit] by Scott Chacon:\r\n\r\n&gt; ### Deleting Remote Branches ###\r\n&gt; \r\n&gt; Suppose you\u2019re done with a remote branch \u2014 say, you and your collaborators are finished with a feature and have merged it into your remote\u2019s master branch (or whatever branch your stable codeline is in). You can delete a remote branch using the rather obtuse syntax `git push [remotename] :[branch]`. If you want to delete your serverfix branch from the server, you run the following:\r\n&gt; \r\n    $ git push origin :serverfix\r\n    To git@github.com:schacon/simplegit.git\r\n     - [deleted]         serverfix\r\n\r\n&gt; Boom. No more branch on your server. You may want to dog-ear this page, because you\u2019ll need that command, and you\u2019ll likely forget the syntax. A way to remember this command is by recalling the `git push [remotename] [localbranch]:[remotebranch]` syntax that we went over a bit earlier. If you leave off the `[localbranch]` portion, then you\u2019re basically saying, \u201cTake nothing on my side and make it be `[remotebranch]`.\u201d\r\n\r\nI issued `git push origin :bugfix` and it worked beautifully. Scott Chacon was right\u2014I will want to [dog ear][1] that page (or virtually dog ear by answering this on Stack&amp;nbsp;Overflow).\r\n\r\n[#progit]: http://git-scm.com/book/en/Git-Branching-Remote-Branches\r\n\r\n[git-2.8.0]:\r\nhttps://github.com/git/git/blob/master/Documentation/RelNotes/2.8.0.txt\r\n\r\n[git-1.7.0]: https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.7.0.txt\r\n\r\n[git-1.5.0]: https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.5.0.txt\r\n\r\n  [1]: http://en.wiktionary.org/wiki/dogear#Verb\r\n\r\nThen you should execute this on other machines\r\n\r\n    git fetch --all --prune\r\n\r\nto propagate changes.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": true, 
               "last_edit_date": 1514124225, 
               "id": "2003515", 
               "up_vote_count": 15737
            }, 
            {
               "answer_id": 7923161, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1422557823, 
               "creation_date": 1319754173, 
               "score": 649, 
               "body_markdown": "You can also use the following to delete the remote branch.\r\n\r\n    git push --delete origin serverfix\r\n\r\nWhich does the same thing as\r\n\r\n    git push origin :serverfix\r\n\r\nbut it may be easier to remember.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1422557823, 
               "id": "7923161", 
               "up_vote_count": 651
            }, 
            {
               "answer_id": 9848609, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1375533186, 
               "creation_date": 1332555708, 
               "score": 86, 
               "body_markdown": "In addition to the other answers, I often use the [git_remote_branch][1] tool. It&#39;s an extra install, but it gets you a convenient way to interact with remote branches. In this case, to delete:\r\n\r\n    grb delete branch\r\n\r\nI find that I also use the `publish` and `track` commands quite often.\r\n\r\n  [1]: https://github.com/webmat/git_remote_branch", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1375533186, 
               "id": "9848609", 
               "up_vote_count": 91
            }, 
            {
               "answer_id": 10999165, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1513600393, 
               "creation_date": 1339512703, 
               "score": 2685, 
               "body_markdown": "Matthew&#39;s answer is great for removing *remote* branches and I also appreciate the explanation, but to make a simple distinction between the two commands:\r\n\r\nTo remove a ***local branch*** from your machine:\r\n\r\n`git branch -d {the_local_branch}` (use `-D` instead to force deleting the branch without checking merged status)\r\n\r\nTo remove a ***remote branch*** from the server:\r\n\r\n`git push origin --delete {the_remote_branch}`\r\n\r\nReference: https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513600393, 
               "id": "10999165", 
               "up_vote_count": 2690
            }, 
            {
               "answer_id": 13270340, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1422557886, 
               "creation_date": 1352293334, 
               "score": 314, 
               "body_markdown": "Tip: When you delete branches using\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch -d &lt;branchname&gt;    # deletes local branch\r\n\r\nor\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git push origin :&lt;branchname&gt; # deletes remote branch\r\n\r\nonly the references are deleted. Even though the branch is actually removed on the remote the references to it still exists in the local repositories of your team members. This means that for other team members the deleted branches are still visible when they do a `git branch -a`.\r\n\r\nTo solve this your team members can prune the deleted branches with\r\n\r\n    git remote prune &lt;repository&gt;\r\n\r\nThis is typically `git remote prune origin`.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1422557886, 
               "id": "13270340", 
               "up_vote_count": 319
            }, 
            {
               "answer_id": 13437928, 
               "tags": [], 
               "down_vote_count": 7, 
               "last_activity_date": 1420852271, 
               "creation_date": 1353219094, 
               "score": 169, 
               "body_markdown": "Another approach is\r\n\r\n    git push --prune origin\r\n\r\n***WARNING:*** *This will delete all remote branches that do not exist locally.* Or more comprehensively,\r\n\r\n    git push --mirror\r\n\r\nwill effectively make the remote repository look like the local copy of the repository (local heads, remotes and tags are mirrored on remote).\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1420852271, 
               "id": "13437928", 
               "up_vote_count": 176
            }, 
            {
               "answer_id": 14345010, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1402503977, 
               "creation_date": 1358276713, 
               "score": 102, 
               "body_markdown": "If you want to complete both these steps with a single command, you can make an alias for it by adding the below to your `~/.gitconfig`:\r\n\r\n    [alias]\r\n    \trmbranch = &quot;!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f&quot;\r\n\r\nAlternatively, you can add this to your global config from the command line using\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git config --global alias.rmbranch \\\r\n    &#39;!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f&#39;\r\n\r\n**NOTE**: If using `-d` (lowercase d), the branch will only be deleted if it has been merged. To force the delete to happen, you will need to use `-D` (uppercase D).", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1402503977, 
               "id": "14345010", 
               "up_vote_count": 103
            }, 
            {
               "answer_id": 15364667, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1417242386, 
               "creation_date": 1363100268, 
               "score": 88, 
               "body_markdown": "You can also do this using `git remote prune origin`:\r\n\r\n    $ git remote prune origin\r\n    Pruning origin\r\n    URL: git@example.com/yourrepo.git\r\n     * [pruned] origin/some-branchs\r\n\r\nIt prunes and deletes remote-tracking branches from a `git branch -r` listing.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1417242386, 
               "id": "15364667", 
               "up_vote_count": 89
            }, 
            {
               "answer_id": 15775364, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1417242422, 
               "creation_date": 1364940684, 
               "score": 141, 
               "body_markdown": "I use the following in my [Bash][1] settings:\r\n\r\n    alias git-shoot=&quot;git push origin --delete&quot;\r\n\r\nThen you can call:\r\n\r\n    git-shoot branchname\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1417242422, 
               "id": "15775364", 
               "up_vote_count": 144
            }, 
            {
               "answer_id": 16276586, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1401158586, 
               "creation_date": 1367231975, 
               "score": 109, 
               "body_markdown": "Since January 2013, GitHub included a &lt;kbd&gt;Delete branch&lt;/kbd&gt; button next to each branch in your &quot;Branches&quot; page.\r\n\r\nRelevant blog post: [Create and delete branches][1]\r\n\r\n\r\n  [1]: https://github.com/blog/1377-create-and-delete-branches", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1401158586, 
               "id": "16276586", 
               "up_vote_count": 114
            }, 
            {
               "answer_id": 19572740, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1407528243, 
               "creation_date": 1382636183, 
               "score": 237, 
               "body_markdown": "    git branch -D &lt;name-of-branch&gt;\r\n    git branch -D -r origin/&lt;name-of-branch&gt;\r\n    git push origin :&lt;name-of-branch&gt;\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1407528243, 
               "id": "19572740", 
               "up_vote_count": 240
            }, 
            {
               "answer_id": 20081966, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1401474841, 
               "creation_date": 1384894951, 
               "score": 35, 
               "body_markdown": "Mashup of all the other answers. Requires Ruby 1.9.3+, tested **only** on OS X.\r\n\r\nCall this file `git-remove`, make it executable, and put it in your path. Then use, for example, `git remove temp`. \r\n\r\n&lt;!-- language: lang-ruby --&gt;\r\n\r\n    #!/usr/bin/env ruby\r\n    require &#39;io/console&#39;\r\n    \r\n    if __FILE__ == $0\r\n    \t  branch_name = ARGV[0] if (ARGV[0])\r\n    \t  print &quot;Press Y to force delete local and remote branch #{branch_name}...&quot;\r\n        response = STDIN.getch\r\n        if [&#39;Y&#39;, &#39;y&#39;, &#39;yes&#39;].include?(response)\r\n          puts &quot;\\nContinuing.&quot;\r\n          `git branch -D #{branch_name}`\r\n          `git branch -D -r origin/#{branch_name}`\r\n          `git push origin --delete #{branch_name}`\t\r\n        else\r\n          puts &quot;\\nQuitting.&quot;\r\n        end\r\n    end", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1401474841, 
               "id": "20081966", 
               "up_vote_count": 35
            }, 
            {
               "answer_id": 20233127, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1385521495, 
               "creation_date": 1385521495, 
               "score": 40, 
               "body_markdown": "Many of the other answers will lead to errors/warnings. This approach is relatively fool proof although you may still need `git branch -D branch_to_delete` if it&#39;s not fully merged into `some_other_branch`, for example.\r\n\r\n    git checkout some_other_branch\r\n    git push origin :branch_to_delete\r\n    git branch -d branch_to_delete\r\n    \r\nRemote pruning isn&#39;t needed if you deleted the remote branch. It&#39;s only used to get the most up to date remotes available on a repo you&#39;re tracking. I&#39;ve observed `git fetch` will add remotes, not remove them. Here&#39;s an example of when `git remote prune origin` will actually do something:\r\n\r\nUser A does the steps above. User B would run the following commands to see the most up to date remote branches\r\n\r\n    git fetch\r\n    git remote prune origin\r\n    git branch -r\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "20233127", 
               "up_vote_count": 41
            }, 
            {
               "answer_id": 23961231, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1457612426, 
               "creation_date": 1401474755, 
               "score": 1527, 
               "body_markdown": "# The Short Answers\r\n\r\nIf you want more detailed explanations of the following commands, then see the long answers in the next section.\r\n\r\nDeleting a remote branch:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git push origin --delete &lt;branch&gt;  # Git version 1.7.0 or newer\r\n    git push origin :&lt;branch&gt;          # Git versions older than 1.7.0\r\n\r\nDeleting a local branch:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch --delete &lt;branch&gt;\r\n    git branch -d &lt;branch&gt; # Shorter version\r\n    git branch -D &lt;branch&gt; # Force delete un-merged branches\r\n\r\nDeleting a local remote-tracking branch:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch --delete --remotes &lt;remote&gt;/&lt;branch&gt;\r\n    git branch -dr &lt;remote&gt;/&lt;branch&gt; # Shorter\r\n\r\n    git fetch &lt;remote&gt; --prune # Delete multiple obsolete tracking branches\r\n    git fetch &lt;remote&gt; -p      # Shorter\r\n\r\n# The Long Answer: there are 3 different branches to delete!\r\n\r\nWhen you&#39;re dealing with deleting branches both locally and remotely, keep in mind that **there are 3 different branches involved**:\r\n\r\n1. The local branch `X`.\r\n2. The remote origin branch `X`.\r\n2. The local remote-tracking branch `origin/X` that tracks the remote branch `X`.\r\n\r\n![Visualization of 3 branches][1]\r\n\r\nThe original poster used\r\n\r\n    git branch -rd origin/bugfix\r\n\r\nwhich only deleted his **local remote-tracking branch** `origin/bugfix`, and not the actual remote branch `bugfix` on `origin`.\r\n\r\n![Diagram 2][2]\r\n\r\n**To delete that actual remote branch**, you need\r\n\r\n    git push origin --delete bugfix\r\n\r\n![Diagram 3][3]\r\n\r\n# Additional Details\r\n\r\nThe following sections describe additional details to consider when deleting your remote and remote-tracking branches.\r\n\r\n## Pushing to delete remote branches also deletes remote-tracking branches\r\n\r\nNote that deleting the remote branch `X` from the command line using a `git push` **will also delete the local remote-tracking branch** `origin/X`, so it is not necessary to prune the obsolete remote-tracking branch with `git fetch --prune` or `git fetch -p`, though it wouldn&#39;t hurt if you did it anyway.\r\n\r\nYou can verify that the remote-tracking branch `origin/X` was also deleted by running the following:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    # View just remote-tracking branches\r\n    git branch --remotes\r\n    git branch -r\r\n\r\n    # View both strictly local as well as remote-tracking branches\r\n    git branch --all\r\n    git branch -a\r\n\r\n## Pruning the obsolete local remote-tracking branch origin/X\r\n\r\nIf you didn&#39;t delete your remote branch `X` from the command line (like above), then your local repo will still contain (a now obsolete) remote-tracking branch `origin/X`. This can happen if you deleted a remote branch directly through GitHub&#39;s web interface, for example.\r\n\r\nA typical way to remove these obsolete remote-tracking branches (since Git version 1.6.6) is to simply run `git fetch` with the `--prune` or shorter `-p`. **Note that this removes all obsolete local remote-tracking branches for any remote branches that no longer exist on the remote**:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git fetch origin --prune\r\n    git fetch origin -p # Shorter\r\n\r\nHere is the relevant quote from the [1.6.6 release notes][notes] (emphasis mine):\r\n\r\n&gt; **&quot;git fetch&quot; learned** `--all` and `--multiple `options, to run fetch from\r\n&gt; many repositories, and **`--prune` option to remove remote tracking\r\n&gt; branches that went stale.**  These make &quot;git remote update&quot; and &quot;git\r\n&gt; remote prune&quot; less necessary (there is no plan to remove &quot;remote\r\n&gt; update&quot; nor &quot;remote prune&quot;, though).\r\n\r\n### Alternative to above automatic pruning for obsolete remote-tracking branches\r\n\r\nAlternatively, instead of pruning your obsolete local remote-tracking branches through `git fetch -p`, *you can avoid making the extra network operation* by just manually removing the branch(es) with the `--remote` or `-r` flags:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    git branch --delete --remotes origin/X\r\n    git branch -dr origin/X # Shorter\r\n\r\n## See Also\r\n\r\n* [git-branch(1) Manual Page][branch].\r\n* [git-fetch(1) Manual Page][fetch].\r\n* [Pro Git &amp;sect; 3.5 Git Branching - Remote Branches][pro].\r\n\r\n[matt]: https://stackoverflow.com/a/2003515/456814\r\n[notes]: https://github.com/git/git/blob/v2.0.0/Documentation/RelNotes/1.6.6.txt#L162-L166\r\n[branch]: https://jk.gs/git-branch.html\r\n[fetch]: https://jk.gs/git-fetch.html\r\n[pro]: https://git-scm.com/book/en/Git-Branching-Remote-Branches\r\n[push-prune]: http://stackoverflow.com/a/13437928/456814\r\n[push]: https://www.kernel.org/pub/software/scm/git/docs/git-push.html\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/NLAqw.png\r\n  [2]: https://i.stack.imgur.com/iCOnz.png\r\n  [3]: https://i.stack.imgur.com/6Z3GY.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1457612426, 
               "id": "23961231", 
               "up_vote_count": 1527
            }, 
            {
               "answer_id": 25011664, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1413804652, 
               "creation_date": 1406624568, 
               "score": 54, 
               "body_markdown": "This won&#39;t work if you have a tag with the same name as the branch on the remote:\r\n\r\n    $ git push origin :branch-or-tag-name\r\n    error: dst refspec branch-or-tag-name matches more than one.\r\n    error: failed to push some refs to &#39;git@github.com:SomeName/some-repo.git&#39;\r\n\r\nIn that case you need to specify that you want to delete the branch, not the tag:\r\n\r\n    git push origin :refs/heads/branch-or-tag-name\r\n\r\nSimilarly, to delete the tag instead of the branch you would use:\r\n\r\n    git push origin :refs/tags/branch-or-tag-name\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1413804652, 
               "id": "25011664", 
               "up_vote_count": 54
            }, 
            {
               "answer_id": 26237660, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1433815442, 
               "creation_date": 1412689929, 
               "score": 330, 
               "body_markdown": "If you want to delete a branch, first checkout to the branch other than the branch to be deleted.\r\n\r\n    git checkout other_than_branch_to_be_deleted\r\n\r\nDeleting the local branch:\r\n\r\n    git branch -D branch_to_be_deleted\r\n\r\nDeleting the remote branch:\r\n\r\n    git push origin --delete branch_to_be_deleted\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1433815442, 
               "id": "26237660", 
               "up_vote_count": 332
            }, 
            {
               "answer_id": 28527604, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1433815394, 
               "creation_date": 1424013632, 
               "score": 200, 
               "body_markdown": "This is simple: Just run the following command:\r\n\r\nTo delete a Git branch both locally and remotely, first delete the local branch using command:\r\n\r\n    git branch -d example\r\n\r\n(here `example` is the branch name)\r\n\r\nAnd after that delete remote branch using command:\r\n\r\n    git push origin :example", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1433815394, 
               "id": "28527604", 
               "up_vote_count": 202
            }, 
            {
               "answer_id": 29831148, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1466859121, 
               "creation_date": 1429812393, 
               "score": 72, 
               "body_markdown": "Simply say:\r\n\r\n    git branch -d &lt;branch-name&gt;\r\n    git push origin :&lt;branch-name&gt;\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1466859121, 
               "id": "29831148", 
               "up_vote_count": 72
            }, 
            {
               "answer_id": 30001477, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1432029926, 
               "creation_date": 1430564380, 
               "score": 62, 
               "body_markdown": "    git push origin --delete branchName\r\n\r\nis easier to remember than\r\n\r\n    git push origin branchName\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1432029926, 
               "id": "30001477", 
               "up_vote_count": 62
            }, 
            {
               "answer_id": 30410815, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1433673413, 
               "creation_date": 1432371370, 
               "score": 95, 
               "body_markdown": "**Delete locally:**\r\n\r\nTo delete a local branch, you can use:\r\n\r\n    git branch -d branch_name \r\n\r\nTo delete a branch forcibly, use `-D` instead of `-d`. \r\n   \r\n\r\n    git branch -D branch_name\r\n\r\n          \r\n\r\n     \r\n**Delete remotely:**\r\n\r\nThere are two options:\r\n\r\n    git push origin :branchname  \r\n\r\n    git push origin --delete branchname \r\n\r\n  \r\n \r\nI would suggest you use the 2nd way as it is more intuitive.\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1433673413, 
               "id": "30410815", 
               "up_vote_count": 95
            }, 
            {
               "answer_id": 33275647, 
               "tags": [], 
               "down_vote_count": 12, 
               "last_activity_date": 1481860730, 
               "creation_date": 1445499528, 
               "score": 68, 
               "body_markdown": "Now you can do it with the [GitHub Desktop](https://desktop.github.com/) app.\r\n\r\nAfter launching the app\r\n\r\n1. Click on the project containing the branch\r\n2. Switch to the branch you would like to delete [![switching branch][1]][1]\r\n3. From the &quot;Branch&quot; menu, select, &quot;Unpublish...&quot;, to have the branch deleted from the GitHub servers. [![unpublish branch][2]][2]\r\n4. From the &quot;Branch&quot; menu, select, &#39;Delete &quot;*branch_name*&quot;...&#39;, to have the branch deleted off of your local machine (aka the machine you are currently working on) [![delete local branch][3]][3]\r\n\r\n  [1]: https://i.stack.imgur.com/c0ged.png\r\n  [2]: https://i.stack.imgur.com/1u8oS.png\r\n  [3]: https://i.stack.imgur.com/TTuLO.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1481860730, 
               "id": "33275647", 
               "up_vote_count": 80
            }, 
            {
               "answer_id": 33436213, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1447876273, 
               "creation_date": 1446208784, 
               "score": 80, 
               "body_markdown": "[Deleting Branches][1]\r\n\r\n&gt; Let&#39;s assume our work on branch &quot;contact-form&quot; is done and we&#39;ve already integrated it into &quot;master&quot;. Since we don&#39;t need it anymore, we can delete it (locally):\r\n\r\n&gt;     $ git branch -d contact-form\r\n\r\n\r\nAnd for deleting the remote branch:\r\n\r\n    git push origin --delete contact-form\r\n\r\n  [1]: http://www.git-tower.com/learn/git/ebook/command-line/remote-repositories/deleting-branches", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1447876273, 
               "id": "33436213", 
               "up_vote_count": 82
            }, 
            {
               "answer_id": 34544089, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1455905146, 
               "creation_date": 1451553772, 
               "score": 76, 
               "body_markdown": "Delete remote branch\r\n\r\n`git push origin :&lt;branchname&gt;`\r\n\r\nDelete local branch\r\n\r\n`git branch -D &lt;branchname&gt;`\r\n\r\nDelete local branch steps:\r\n\r\n1. checkout to another branch\r\n2. delete local branch", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1455905146, 
               "id": "34544089", 
               "up_vote_count": 78
            }, 
            {
               "answer_id": 34581636, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1513203051, 
               "creation_date": 1451855323, 
               "score": 92, 
               "body_markdown": "To delete your branch locally and remotely \r\n\r\n - Checkout to master branch -  `git checkout master`\r\n\r\n - Delete your remote branch - `git push origin --delete &lt;branch-name&gt;`\r\n\r\n - Delete your local branch - `git branch --delete &lt;branch-name&gt;`\r\n\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513203051, 
               "id": "34581636", 
               "up_vote_count": 93
            }, 
            {
               "answer_id": 35213755, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1466859200, 
               "creation_date": 1454628880, 
               "score": 27, 
               "body_markdown": "An alternative option to the command line for deleting remote branches is the **GitHub branches page**.\r\n\r\nSee for example: [https://github.com/angular/angular.js/branches](https://github.com/angular/angular.js/branches)\r\n\r\nFound in the `Code` -&gt; `Branches` page of a GitHub repository.\r\n\r\nI generally prefer command line myself but this **GitHub page shows you lots more information** about the branches, such as **last updated date and user**, and **number of commits ahead and behind**. It is useful when dealing with a large number of branches.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1466859200, 
               "id": "35213755", 
               "up_vote_count": 30
            }, 
            {
               "answer_id": 35324551, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1466859337, 
               "creation_date": 1455133656, 
               "score": 41, 
               "body_markdown": "I got sick of googling for this answer, so I took a similar approach\r\nto [the answer that crizCraig posted][1] earlier.\r\n\r\nAdded the following to my Bash profile:\r\n\r\n    function gitdelete(){\r\n        git push origin --delete $1\r\n        git branch -D $1\r\n    }\r\n\r\nThen every time I&#39;m done with a branch (merged into `master`, for example) I run the following in my terminal:\r\n\r\n    gitdelete my-branch-name\r\n\r\n...which then deletes `my-branch-name` from `origin` as as well as locally.\r\n\r\n  [1]: https://stackoverflow.com/a/15775364/551436\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1495542898, 
               "id": "35324551", 
               "up_vote_count": 45
            }, 
            {
               "answer_id": 36775924, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1461257376, 
               "creation_date": 1461257376, 
               "score": 38, 
               "body_markdown": "    git push origin :bugfix  # Deletes remote branch\r\n    git branch -d bugfix     # Must delete local branch manually\r\n    \r\nIf you are sure you want to delete it, run \r\n   \r\n\r\n    git branch -D bugfix\r\nNow to clean up deleted remote branches run\r\n\r\n    git remote prune origin\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "36775924", 
               "up_vote_count": 38
            }, 
            {
               "answer_id": 36980415, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1462185431, 
               "creation_date": 1462185431, 
               "score": 26, 
               "body_markdown": "I also had similar issues, and this seems to work:\r\nThis deletes local branch.\r\n`git branch -d the_local_branch`\r\n\r\nThis removes remote branch\r\n`git push origin :the_remote_branch`\r\n\r\n[Source: Makandra Cards][1]\r\n\r\n\r\n  [1]: http://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "36980415", 
               "up_vote_count": 27
            }, 
            {
               "answer_id": 37356297, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1466859369, 
               "creation_date": 1463780577, 
               "score": 36, 
               "body_markdown": "Before executing\r\n\r\n    git branch --delete &lt;branch&gt;\r\n\r\nmake sure you determine first what the EXACT name of the remote branch is by executing:\r\n\r\n    git ls-remote\r\n\r\nThis will tell you what to enter EXACTLY for `&lt;branch&gt;` value. (`branch` is case sensitive!)\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1466859369, 
               "id": "37356297", 
               "up_vote_count": 38
            }, 
            {
               "answer_id": 38776671, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1470341722, 
               "creation_date": 1470341722, 
               "score": 21, 
               "body_markdown": "There are good answer, but, in case that you have a ton of branches, deleting them one by one locally and remotly, would be a tedious tasks. You can use this script to automate this tasks. \r\n\r\n    branch_not_delete=( &quot;master&quot; &quot;develop&quot; &quot;our-branch-1&quot; &quot;our-branch-2&quot;)\r\n    \r\n    \r\n    for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master`; do\r\n    \r\n    \t# delete prefix remotes/origin/ from branch name\r\n    \tbranch_name=&quot;$(awk &#39;{gsub(&quot;remotes/origin/&quot;, &quot;&quot;);print}&#39; &lt;&lt;&lt; $branch)&quot;\r\n    \t\r\n    \tif ! [[ &quot; ${branch_not_delete[*]} &quot; == *&quot; $branch_name &quot;* ]]; then\r\n    \t\t# delete branch remotly and locally\r\n        \tgit push origin :$branch_name\r\n    \tfi\r\n    done \r\n\r\n- List the branches that you don&#39;t want to delete\r\n- Iterate over remotes branch and if they aren&#39;t in our &quot;preserve list&quot;, we deleted. \r\n\r\n\r\nSource: [removing-git-branches-at-once](http://levipy.com/removing-git-branches-at-once/)\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "38776671", 
               "up_vote_count": 21
            }, 
            {
               "answer_id": 40645071, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1484469043, 
               "creation_date": 1479344636, 
               "score": 75, 
               "body_markdown": "**One liner** command delete *both local, and remote*:\r\n\r\n`D=branch-name; git branch -D $D; git push origin :$D`\r\n\r\nor add the alias below to your *~/.gitconfig*; usage: `git kill branch-name`\r\n\r\n    [alias]\r\n        kill = &quot;!f(){ git branch -D \\&quot;$1\\&quot;;  git push origin --delete \\&quot;$1\\&quot;; };f&quot;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1484469043, 
               "id": "40645071", 
               "up_vote_count": 75
            }, 
            {
               "answer_id": 42193447, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1487114295, 
               "creation_date": 1486934712, 
               "score": 17, 
               "body_markdown": "Using **GitBash** you can execute the following:\r\n\r\n    git branch --delete &lt;branch&gt;\r\n\r\nOR \r\n-\r\nFrom the GitHub desktop app, when you have the branch checked out, you can delete the **Local** branch via the *Branch* menu strip:\r\n\r\n[![enter image description here][1]][1]\r\n\r\nIf you **ARE NOT** using the GitHub desktop app, and are using an IDE like Visual Studio for your local source control, all you have to do is a couple quick steps: \r\n\r\n 1. Check out a branch other than the one you wish to delete.\r\n 2. Right-click the branch you wish to delete.\r\n 3. Select the **Delete** option from the context menu.\r\n\r\nThen, once logged in to your GitHub account online, go to the repository and click the ***All Branches*** tab.  From there, just click the little trash can icon on the right on the name of the brach you wish to delete.  \r\n\r\n[![enter image description here][2]][2]\r\n\r\n*Keep in mind - if the branch isn&#39;t published, there&#39;s no need to try to delete it from your online repository.\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/b6dQg.png\r\n  [2]: https://i.stack.imgur.com/hbXpP.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1487114295, 
               "id": "42193447", 
               "up_vote_count": 21
            }, 
            {
               "answer_id": 42398224, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1493845321, 
               "creation_date": 1487784038, 
               "score": 35, 
               "body_markdown": "I added the following aliases to my `.gitconfig` file.  This allows me to delete branches with or without specifying the branch name.  Branch name is defaulted to the current branch if no argument is passed in.\r\n\r\n\r\n    [alias]\r\n        branch-name = rev-parse --abbrev-ref HEAD     \r\n    \r\n        rm-remote-branch = !&quot;f() { branch=${1-$(git branch-name)}; git push origin :$branch; }; f&quot;\r\n        rm-local-branch = !&quot;f() { branch=${1-$(git branch-name)}; git checkout master; git branch -d $branch; }; f&quot;\r\n        rm-branch-fully = !&quot;f() { branch=${1-$(git branch-name)}; git rm-local-branch $branch; git rm-remote-branch $branch; }; f&quot;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1493845321, 
               "id": "42398224", 
               "up_vote_count": 35
            }, 
            {
               "answer_id": 44074506, 
               "tags": [], 
               "down_vote_count": 18, 
               "last_activity_date": 1495210034, 
               "creation_date": 1495210034, 
               "score": -13, 
               "body_markdown": "This commands works best for me:\r\n\r\n    git branch -D &lt;branch name&gt;\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "44074506", 
               "up_vote_count": 5
            }, 
            {
               "answer_id": 44714712, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1511087043, 
               "creation_date": 1498200168, 
               "score": 60, 
               "body_markdown": "**To delete Locally - (Normal),** \r\n\r\n    git branch -d my_branch\r\n\r\nIf your branch in rebasing/merging progress and that was not done properly means, you will get an error `Rebase/Merge in progress` so in that case, you won&#39;t be able to delete your branch.\r\n\r\nSo either your need to solve rebasing/merging otherwise you can do force Delete by using,\r\n\r\n    git branch -D my_branch\r\n\r\n\r\n**To delete in Remote:**\r\n  \r\n\r\n    git push --delete origin my_branch\r\n \r\n**can do the same using ,**\r\n\r\n    git push origin :my_branch   # easy to remember both will do the same.\r\n\r\n**Graphical Representation,**\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Y7NmS.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1511087043, 
               "id": "44714712", 
               "up_vote_count": 61
            }, 
            {
               "answer_id": 44781228, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1516018666, 
               "creation_date": 1498569195, 
               "score": 563, 
               "body_markdown": "&lt;h3&gt;Steps for deleting a branch:&lt;/h3&gt;\r\nfor deleting the **remote branch:**\r\n  \r\n    git push origin --delete &lt;your_branch&gt; \r\n\r\nfor deleting the **local branch:**\r\n\r\n    git branch -D &lt;branch_name&gt; \r\n\r\n**Explain:** OK, just explain what&#39;s going on here!\r\n\r\nSimply do `git push origin --delete` to delete your remote branch, add the name of the branch at the end and this will delete and push it to remote at the same time...\r\n\r\nAlso, `git branch -D`, which simply delete the local branch **Only**!...\r\n\r\n`-D` stands for `--delete --force` which will delete the branch even it&#39;s not merged(force delete), but you can also use `-d` which stands for `--delete` which throw an error respective of the branch merge status...\r\n\r\nI also create the image below to show the steps:\r\n\r\n\r\n[![delete a remote and local branch in git][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/AKWYx.jpg", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1516018666, 
               "id": "44781228", 
               "up_vote_count": 564
            }, 
            {
               "answer_id": 45793291, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1504880835, 
               "creation_date": 1503306650, 
               "score": 5, 
               "body_markdown": "I use the following in my Bash settings:\r\n\r\n    alias git-shoot=&quot;git push origin --delete&quot;\r\n\r\nThen you can call:\r\n\r\n    git-shoot branchname", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1504880835, 
               "id": "45793291", 
               "up_vote_count": 6
            }, 
            {
               "answer_id": 46412667, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1506367200, 
               "creation_date": 1506367200, 
               "score": 6, 
               "body_markdown": "I created the following function:\r\n\r\n    git-delete-branch() \r\n    { \r\n        if [[ -n $1 ]]; then\r\n            git checkout master &gt; /dev/null;\r\n            branch_name=&quot;$1&quot;;\r\n            echo &quot;Deleting local $branch_name branch...&quot;;\r\n            git branch -D &quot;$branch_name&quot;;\r\n            echo &quot;Deleting remote $branch_name branch...&quot;;\r\n            git push origin --delete &quot;$branch_name&quot;;\r\n            git remote prune origin;\r\n            echo &quot;Your current branches are:&quot;;\r\n            git branch -a;\r\n        else\r\n            echo &quot;Usage: git-delete-branch &lt;branch_name&gt;&quot;;\r\n        fi\r\n    }\r\n\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "46412667", 
               "up_vote_count": 6
            }, 
            {
               "answer_id": 46888156, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1508757797, 
               "creation_date": 1508757797, 
               "score": 11, 
               "body_markdown": "According to latest document using terminal we can delete following way.\r\n\r\n**delete in local:**\r\n\r\n    git branch -D usermanagement\r\n\r\n**delete in remote location:**\r\n\r\n    git push --delete origin usermanagement\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "46888156", 
               "up_vote_count": 11
            }, 
            {
               "answer_id": 47696235, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1513590638, 
               "creation_date": 1512653383, 
               "score": 6, 
               "body_markdown": "&gt; Its very simple\r\n\r\n\r\n**To delete remote branch**\r\n\r\n    git push -d origin &lt;branch-name&gt;\r\nOR\r\n\r\n    git push origin :&lt;branch-name&gt;\r\n\r\n**To delete local branch**\r\n\r\n    git branch -D &lt;branch-name&gt;", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513590638, 
               "id": "47696235", 
               "up_vote_count": 8
            }
         ], 
         "creation_date": "1262653935", 
         "code_snippet": "[u\"<code>$ git branch -d remotes/origin/bugfix\\nerror: branch 'remotes/origin/bugfix' not found.\\n\\n$ git branch -d origin/bugfix\\nerror: branch 'origin/bugfix' not found.\\n\\n$ git branch -rd origin/bugfix\\nDeleted remote branch origin/bugfix (was 2a14ef7).\\n\\n$ git push\\nEverything up-to-date\\n\\n$ git pull\\nFrom github.com:gituser/gitproject\\n* [new branch] bugfix -&gt; origin/bugfix\\nAlready up-to-date.\\n</code>\", u'<code>remotes/origin/bugfix</code>', u'<code>deleted remote-tracking branch</code>', u'<code>$ git push -d &lt;remote_name&gt; &lt;branch_name&gt;\\n$ git branch -d &lt;branch_name&gt;\\n</code>', u'<code>origin</code>', u'<code>$ git branch -d branch_name\\n$ git branch -D branch_name\\n</code>', u'<code>-d</code>', u'<code>--delete</code>', u'<code>-D</code>', u'<code>--delete --force</code>', u'<code>man git-branch</code>', u'<code>$ git push &lt;remote_name&gt; --delete &lt;branch_name&gt;\\n</code>', u'<code>$ git push &lt;remote_name&gt; :&lt;branch_name&gt;\\n</code>', u'<code>git push</code>', u'<code>-d</code>', u'<code>--delete</code>', u'<code>git push [remotename] :[branch]</code>', u'<code>$ git push origin :serverfix\\nTo git@github.com:schacon/simplegit.git\\n - [deleted]         serverfix\\n</code>', u'<code>git push [remotename] [localbranch]:[remotebranch]</code>', u'<code>[localbranch]</code>', u'<code>[remotebranch]</code>', u'<code>git push origin :bugfix</code>', u'<code>git fetch --all --prune\\n</code>', u'<code>git push origin local_branch:remote_branch</code>', u'<code>git push origin :remote_branch</code>', u'<code>:</code>', u'<code>git fetch --all --prune</code>', u'<code>git branch -d</code>', u'<code>git push origin --delete</code>', u'<code>git branch -a</code>', u'<code>git fetch --all --prune</code>', u'<code>git branch -a</code>', u'<code>git branch -r</code>', u'<code>git remote show origin</code>', u'<code>git branch -D Branch_Name</code>', u'<code>git branch -d {the_local_branch}</code>', u'<code>-D</code>', u'<code>git push origin --delete {the_remote_branch}</code>', u'<code>-D</code>', u'<code>-d</code>', u\"<code>'git branch -d your_branch</code>\", u\"<code>error: The branch 'your_branch' is not fully merged. If you are sure you want to delete it, run 'git branch -D your_branch'.</code>\", u'<code>git remote prune &lt;name&gt;</code>', u'<code>git remote prune origin</code>', u'<code>git push origin --delete &lt;branch&gt;  # Git version 1.7.0 or newer\\ngit push origin :&lt;branch&gt;          # Git versions older than 1.7.0\\n</code>', u'<code>git branch --delete &lt;branch&gt;\\ngit branch -d &lt;branch&gt; # Shorter version\\ngit branch -D &lt;branch&gt; # Force delete un-merged branches\\n</code>', u'<code>git branch --delete --remotes &lt;remote&gt;/&lt;branch&gt;\\ngit branch -dr &lt;remote&gt;/&lt;branch&gt; # Shorter\\n\\ngit fetch &lt;remote&gt; --prune # Delete multiple obsolete tracking branches\\ngit fetch &lt;remote&gt; -p      # Shorter\\n</code>', u'<code>X</code>', u'<code>X</code>', u'<code>origin/X</code>', u'<code>X</code>', u'<code>git branch -rd origin/bugfix\\n</code>', u'<code>origin/bugfix</code>', u'<code>bugfix</code>', u'<code>origin</code>', u'<code>git push origin --delete bugfix\\n</code>', u'<code>X</code>', u'<code>git push</code>', u'<code>origin/X</code>', u'<code>git fetch --prune</code>', u'<code>git fetch -p</code>', u'<code>origin/X</code>', u'<code># View just remote-tracking branches\\ngit branch --remotes\\ngit branch -r\\n\\n# View both strictly local as well as remote-tracking branches\\ngit branch --all\\ngit branch -a\\n</code>', u'<code>X</code>', u'<code>origin/X</code>', u'<code>git fetch</code>', u'<code>--prune</code>', u'<code>-p</code>', u'<code>git fetch origin --prune\\ngit fetch origin -p # Shorter\\n</code>', u'<code>--all</code>', u'<code>--multiple</code>', u'<code>--prune</code>', u'<code>git fetch -p</code>', u'<code>--remote</code>', u'<code>-r</code>', u'<code>git branch --delete --remotes origin/X\\ngit branch -dr origin/X # Shorter\\n</code>', u'<code>X</code>', u'<code>origin/X</code>', u'<code>X</code>', u'<code>git push --delete origin serverfix\\n</code>', u'<code>git push origin :serverfix\\n</code>', u'<code>git branch -d &lt;local_branch&gt;</code>', u'<code>git branch -D &lt;local_branch&gt;</code>', u'<code>git push origin --delete &lt;your_branch&gt; \\n</code>', u'<code>git branch -D &lt;branch_name&gt; \\n</code>', u'<code>git push origin --delete</code>', u'<code>git branch -D</code>', u'<code>-D</code>', u'<code>--delete --force</code>', u'<code>-d</code>', u'<code>--delete</code>', u'<code>git branch -a</code>', u'<code>git checkout other_than_branch_to_be_deleted\\n</code>', u'<code>git branch -D branch_to_be_deleted\\n</code>', u'<code>git push origin --delete branch_to_be_deleted\\n</code>', u'<code>git branch -d &lt;branchname&gt;    # deletes local branch\\n</code>', u'<code>git push origin :&lt;branchname&gt; # deletes remote branch\\n</code>', u'<code>git branch -a</code>', u'<code>git remote prune &lt;repository&gt;\\n</code>', u'<code>git remote prune origin</code>', u'<code>git push</code>', u'<code>git remote prune</code>', u'<code>git fetch --prune</code>', u'<code>git fetch -p</code>', u'<code>git branch -D &lt;name-of-branch&gt;\\ngit branch -D -r origin/&lt;name-of-branch&gt;\\ngit push origin :&lt;name-of-branch&gt;\\n</code>', u'<code>-D</code>', u'<code>-d</code>', u'<code>git branch -d example\\n</code>', u'<code>example</code>', u'<code>git push origin :example\\n</code>', u'<code>git push --prune origin\\n</code>', u'<code>git push --mirror\\n</code>', u'<code>git push --prune origin</code>', u'<code>alias git-shoot=\"git push origin --delete\"\\n</code>', u'<code>git-shoot branchname\\n</code>', u'<code>git push origin --delete $1</code>', u'<code>git-shoot</code>', u'<code>git shoot branchname</code>', u'<code>~/.gitconfig</code>', u'<code>[alias]\\n    rmbranch = \"!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f\"\\n</code>', u\"<code>git config --global alias.rmbranch \\\\\\n'!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f'\\n</code>\", u'<code>-d</code>', u'<code>-D</code>', u'<code>&amp;&amp;</code>', u'<code>;</code>', u'<code>git branch -d branch_name \\n</code>', u'<code>-D</code>', u'<code>-d</code>', u'<code>git branch -D branch_name\\n</code>', u'<code>git push origin :branchname  \\n\\ngit push origin --delete branchname \\n</code>', u'<code>git checkout master</code>', u'<code>git push origin --delete &lt;branch-name&gt;</code>', u'<code>git branch --delete &lt;branch-name&gt;</code>', u'<code>git remote prune origin</code>', u'<code>$ git remote prune origin\\nPruning origin\\nURL: git@example.com/yourrepo.git\\n * [pruned] origin/some-branchs\\n</code>', u'<code>git branch -r</code>', u'<code>grb delete branch\\n</code>', u'<code>publish</code>', u'<code>track</code>', u'<code>$ git branch -d contact-form\\n</code>', u'<code>git push origin --delete contact-form\\n</code>', u'<code>git push origin :&lt;branchname&gt;</code>', u'<code>git branch -D &lt;branchname&gt;</code>', u'<code>git push origin :&lt;branchname&gt;</code>', u'<code>D=branch-name; git branch -D $D; git push origin :$D</code>', u'<code>git kill branch-name</code>', u'<code>[alias]\\n    kill = \"!f(){ git branch -D \\\\\"$1\\\\\";  git push origin --delete \\\\\"$1\\\\\"; };f\"\\n</code>', u'<code>git branch -D</code>', u'<code>-d</code>', u'<code>git branch -d &lt;branch-name&gt;\\ngit push origin :&lt;branch-name&gt;\\n</code>', u'<code>git push origin --delete branchName\\n</code>', u'<code>git push origin :branchName\\n</code>', u'<code>git branch -d my_branch\\n</code>', u'<code>Rebase/Merge in progress</code>', u'<code>git branch -D my_branch\\n</code>', u'<code>git push --delete origin my_branch\\n</code>', u'<code>git push origin :my_branch   # easy to remember both will do the same.\\n</code>', u\"<code>$ git push origin :branch-or-tag-name\\nerror: dst refspec branch-or-tag-name matches more than one.\\nerror: failed to push some refs to 'git@github.com:SomeName/some-repo.git'\\n</code>\", u'<code>git push origin :refs/heads/branch-or-tag-name\\n</code>', u'<code>git push origin :refs/tags/branch-or-tag-name\\n</code>', u'<code>function gitdelete(){\\n    git push origin --delete $1\\n    git branch -D $1\\n}\\n</code>', u'<code>master</code>', u'<code>gitdelete my-branch-name\\n</code>', u'<code>my-branch-name</code>', u'<code>origin</code>', u'<code>--delete \"$@\"</code>', u'<code>-D \"$@\"</code>', u'<code>$1</code>', u'<code>git branch -d</code>', u'<code>&amp;&amp;</code>', u'<code>git branch -D branch_to_delete</code>', u'<code>some_other_branch</code>', u'<code>git checkout some_other_branch\\ngit push origin :branch_to_delete\\ngit branch -d branch_to_delete\\n</code>', u'<code>git fetch</code>', u'<code>git remote prune origin</code>', u'<code>git fetch\\ngit remote prune origin\\ngit branch -r\\n</code>', u'<code>git push origin :bugfix  # Deletes remote branch\\ngit branch -d bugfix     # Must delete local branch manually\\n</code>', u'<code>git branch -D bugfix\\n</code>', u'<code>git remote prune origin\\n</code>', u'<code>git branch --delete &lt;branch&gt;\\n</code>', u'<code>git ls-remote\\n</code>', u'<code>&lt;branch&gt;</code>', u'<code>branch</code>', u'<code>git-remove</code>', u'<code>git remove temp</code>', u'<code>#!/usr/bin/env ruby\\nrequire \\'io/console\\'\\n\\nif __FILE__ == $0\\n      branch_name = ARGV[0] if (ARGV[0])\\n      print \"Press Y to force delete local and remote branch #{branch_name}...\"\\n    response = STDIN.getch\\n    if [\\'Y\\', \\'y\\', \\'yes\\'].include?(response)\\n      puts \"\\\\nContinuing.\"\\n      `git branch -D #{branch_name}`\\n      `git branch -D -r origin/#{branch_name}`\\n      `git push origin --delete #{branch_name}` \\n    else\\n      puts \"\\\\nQuitting.\"\\n    end\\nend\\n</code>']", 
         "score": 12706, 
         "answer_count": "40", 
         "accepted_answer_id": 2003515, 
         "path": "2.stack", 
         "link": "https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely", 
         "question_id": 2003505, 
         "last_edit_date": "1514124699", 
         "id": "21914226-1", 
         "up_vote_count": "12726"
      }
   ], 
   "private": "False", 
   "version_cnt": "0", 
   "owner": "21stdigital", 
   "pm_name": "Alcatraz", 
   "collaborators_cnt": "1", 
   "created_time": "2014-07-16 19:33:01 UTC", 
   "fork_cnt": "1", 
   "id": "21914226", 
   "size": "172", 
   "license": "None", 
   "repo_keywords": "None", 
   "repo_dependency_cnt": "0", 
   "last_push": "2014-07-20 22:11:52  UTC", 
   "last_update": "2017-05-10 09:26:03  UTC", 
   "pm_dependency_cnt": "0", 
   "star_cnt": "13", 
   "github_id": "21914226", 
   "repo_url": "https://github.com/21stdigital/Xcode-Templates", 
   "readMe": "# 21st digital Xcode Templates\nStripped down, structured, nib-less project & file templates with CocoaPods and Uncrustify support.\n", 
   "path": "1.git", 
   "watcher_cnt": "13", 
   "repo_description": "Stripped down, structured, nib-less project & file templates", 
   "pm_keywords": "None", 
   "name": "Xcode-Templates", 
   "language": "Objective-C", 
   "pm_description": "None", 
   "homepage_url": "None", 
   "homepage_content": "None"
}]
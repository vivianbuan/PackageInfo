[{
   "repo_status": "None", 
   "_childDocuments_": [
      {
         "is_answered": true, 
         "protected_date": 1362879044, 
         "body_markdown": "What are the differences between `git pull` and `git fetch`?", 
         "view_count": "2135095", 
         "title": "What is the difference between &#39;git pull&#39; and &#39;git fetch&#39;?", 
         "_childDocuments_": [
            {
               "answer_id": 292359, 
               "tags": [], 
               "down_vote_count": 10, 
               "last_activity_date": 1480485894, 
               "creation_date": 1226742760, 
               "score": 7911, 
               "body_markdown": "In the simplest terms, `git pull` does a `git fetch` followed by a `git merge`.\r\n\r\nYou can do a `git fetch` at any time to update your remote-tracking branches under `refs/remotes/&lt;remote&gt;/`.\r\n\r\nThis operation never changes any of your own local branches under `refs/heads`, and is safe to do without changing your working copy. I have even heard of people running `git fetch` periodically in a cron job in the background (although I wouldn&#39;t recommend doing this).\r\n\r\nA `git pull` is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.\r\n\r\nGit documentation: [**git pull**][1]\r\n\r\n  [1]: http://git-scm.com/docs/git-pull\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": true, 
               "last_edit_date": 1480485894, 
               "id": "292359", 
               "up_vote_count": 7921
            }, 
            {
               "answer_id": 292360, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1226742770, 
               "creation_date": 1226742770, 
               "score": 142, 
               "body_markdown": "&lt;pre&gt;\r\ngit-pull - Fetch from and merge with another repository or a local branch\r\nSYNOPSIS\r\n\r\ngit pull &lt;options&gt; &lt;repository&gt; &lt;refspec&gt;\u2026\r\nDESCRIPTION\r\n\r\nRuns git-fetch with the given parameters, and calls git-merge to merge the \r\nretrieved head(s) into the current branch. With --rebase, calls git-rebase \r\ninstead of git-merge.\r\n\r\nNote that you can use . (current directory) as the &amp;lt;repository&gt; to pull \r\nfrom the local repository \u2014 this is useful when merging local branches \r\ninto the current branch.\r\n\r\nAlso note that options meant for git-pull itself and underlying git-merge \r\nmust be given before the options meant for git-fetch.\r\n&lt;/pre&gt;\r\n\r\nYou would pull if you want the histories merged, you&#39;d fetch if you just &#39;want the codez&#39; as some person has been tagging some articles around here.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "292360", 
               "up_vote_count": 146
            }, 
            {
               "answer_id": 2791156, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1375385889, 
               "creation_date": 1273260217, 
               "score": 402, 
               "body_markdown": "One use case of `git fetch` is that the following will tell you any changes in the remote branch since your last pull... so you can check before doing an actual pull, which could change files in your current branch and working copy.\r\n\r\n    git fetch\r\n    git diff ...origin\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1375385889, 
               "id": "2791156", 
               "up_vote_count": 405
            }, 
            {
               "answer_id": 5376768, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1426458004, 
               "creation_date": 1300705640, 
               "score": 133, 
               "body_markdown": "You can fetch from a remote repository, see the differences and then pull or merge.\r\n\r\nThis is an example for a remote repository called `origin` and a branch called `master` tracking the remote branch `origin/master`:\r\n\r\n    git checkout master                                                  \r\n    git fetch                                        \r\n    git diff origin/master\r\n    git rebase origin master\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1426458004, 
               "id": "5376768", 
               "up_vote_count": 136
            }, 
            {
               "answer_id": 6011169, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1427959641, 
               "creation_date": 1305492784, 
               "score": 124, 
               "body_markdown": "The short and easy answer is that `git pull` is simply `git fetch` followed by `git merge`.\r\n\r\nIt is very important to note that `git pull` will **automatically merge whether you like it or not**. This could, of course, result in merge conflicts. Let&#39;s say your remote is `origin` and your branch is `master`. If you `git diff origin/master` before pulling, you should have some idea of potential merge conflicts and could prepare your local branch accordingly. \r\n\r\nIn addition to pulling and pushing, [some workflows][1] involve `git rebase`, such as this one, which I paraphrase from the linked article:\r\n\r\n    git pull origin master\r\n    git checkout foo-branch\r\n    git rebase master\r\n    git push origin foo-branch\r\n\r\nIf you find yourself in such a situation, you may be tempted to `git pull --rebase`. Unless you really, really know what you are doing, I would advise against that. This warning is from the `man` page for `git-pull`, version `2.3.5`:\r\n\r\n&gt; This is a potentially dangerous mode of operation. It rewrites\r\n&gt; history, which does not bode well when you published that history\r\n&gt; already. Do not use this option unless you have read git-rebase(1)\r\n&gt; carefully.\r\n\r\n  [1]: http://mettadore.com/2011/09/07/the-ever-deployable-github-workflow/\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1427959641, 
               "id": "6011169", 
               "up_vote_count": 126
            }, 
            {
               "answer_id": 7104747, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1429382834, 
               "creation_date": 1313657602, 
               "score": 1734, 
               "body_markdown": " - When you use `pull`, Git tries to automatically do your work for you. **It is context sensitive**, so Git will merge any pulled commits into the branch you are currently working in.  `pull` **automatically merges the commits without letting you review them first**. If you don\u2019t closely manage your branches, you may run into frequent conflicts.\r\n\r\n - When you `fetch`, Git gathers any commits from the target branch that do not exist in your current branch and **stores them in your local repository**. However, **it does not merge them with your current branch**. This is particularly useful if you need to keep your repository up to date, but are working on something that might break if you update your files. \r\nTo integrate the commits into your master branch, you use `merge`.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1429382834, 
               "id": "7104747", 
               "up_vote_count": 1737
            }, 
            {
               "answer_id": 10556826, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1451710369, 
               "creation_date": 1336761447, 
               "score": 322, 
               "body_markdown": "It cost me a little bit to understand what was the difference, but this is a simple explanation. `master` in your localhost is a branch.\r\n\r\nWhen you clone a repository you fetch the entire repository to you local host. This means that at that time you have an origin/master pointer to `HEAD` and master pointing to the same `HEAD`.\r\n\r\nwhen you start working and do commits you advance the master pointer to `HEAD` + your commits. But the origin/master pointer is still pointing to what it was when you cloned.\r\n\r\nSo the difference will be:\r\n\r\n- If you do a `git fetch` it will just fetch all the changes in the remote repository ([GitHub][1]) and move the origin/master pointer to `HEAD`. Meanwhile your local branch master will keep pointing to where it has.\r\n- If you do a `git pull`, it will do basically fetch (as explained previously) and merge any new changes to your master branch and move the pointer to `HEAD`.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/GitHub\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1451710369, 
               "id": "10556826", 
               "up_vote_count": 324
            }, 
            {
               "answer_id": 11527075, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1496259676, 
               "creation_date": 1342543391, 
               "score": 85, 
               "body_markdown": "I have struggled with this as well.  In fact I got here with a google search of exactly the same question.  Reading all these answers finally painted a picture in my head and I decided to try to get this down looking at the state of the 2 repositories and 1 sandbox and actions performed over time while watching the version of them.  So here is what I came up with.  Please correct me if I messed up anywhere.\r\n\r\nThe three repos with a fetch:\r\n\r\n    ---------------------     -----------------------     -----------------------\r\n    - Remote Repo       -     - Remote Repo         -     - Remote Repo         -\r\n    -                   -     - gets pushed         -     -                     -\r\n    - @ R01             -     - @ R02               -     - @ R02               -\r\n    ---------------------     -----------------------     -----------------------\r\n    \r\n    ---------------------     -----------------------     -----------------------\r\n    - Local Repo        -     - Local Repo          -     - Local Repo          -\r\n    - pull              -     -                     -     - fetch               -\r\n    - @ R01             -     - @ R01               -     - @ R02               -\r\n    ---------------------     -----------------------     -----------------------\r\n    \r\n    ---------------------     -----------------------     -----------------------\r\n    - Local Sandbox     -     - Local Sandbox       -     - Local Sandbox       -\r\n    - Checkout          -     - new work done       -     -                     -\r\n    - @ R01             -     - @ R01+              -     - @R01+               -\r\n    ---------------------     -----------------------     -----------------------\r\n\r\nThe three repos with a pull\r\n\r\n    ---------------------     -----------------------     -----------------------\r\n    - Remote Repo       -     - Remote Repo         -     - Remote Repo         -\r\n    -                   -     - gets pushed         -     -                     -\r\n    - @ R01             -     - @ R02               -     - @ R02               -\r\n    ---------------------     -----------------------     -----------------------\r\n    \r\n    ---------------------     -----------------------     -----------------------\r\n    - Local Repo        -     - Local Repo          -     - Local Repo          -\r\n    - pull              -     -                     -     - pull                -\r\n    - @ R01             -     - @ R01               -     - @ R02               -\r\n    ---------------------     -----------------------     -----------------------\r\n    \r\n    ---------------------     -----------------------     -----------------------\r\n    - Local Sandbox     -     - Local Sandbox       -     - Local Sandbox       -\r\n    - Checkout          -     - new work done       -     - merged with R02     -\r\n    - @ R01             -     - @ R01+              -     - @R02+               -\r\n    ---------------------     -----------------------     -----------------------\r\n\r\nThis helped me understand why a fetch is pretty important.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1496259676, 
               "id": "11527075", 
               "up_vote_count": 87
            }, 
            {
               "answer_id": 13573856, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1362861108, 
               "creation_date": 1353967081, 
               "score": 65, 
               "body_markdown": "`git fetch` will retrieve remote branches so that you can `git diff` or `git merge` them with the current branch. `git pull` will run fetch on the remote brach tracked by the current branch and then merge the result. You can use `git fetch` to see if there are any updates to the remote branch without necessary merging them with your local branch.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1362861108, 
               "id": "13573856", 
               "up_vote_count": 66
            }, 
            {
               "answer_id": 15003413, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1374068156, 
               "creation_date": 1361453103, 
               "score": 71, 
               "body_markdown": "We simply say:\r\n\r\n    git pull == git fetch + git merge\r\n\r\nIf you run `git pull`, you do not need to merge the data to local. If you run `git fetch`, it means you must run `git merge` for getting the latest code to your local machine. Otherwise, the local machine code would not be changed without merge. \r\n\r\nSo in the Git Gui, when you do fetch, you have to merge the data. Fetch itself won&#39;t make the code changes at your local. You can check that when you update the code by fetching\r\nonce fetch and see; the code it won&#39;t change. Then you merge... You will see the changed code.\r\n\r\n \r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1374068156, 
               "id": "15003413", 
               "up_vote_count": 72
            }, 
            {
               "answer_id": 15733096, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1513203429, 
               "creation_date": 1364755427, 
               "score": 928, 
               "body_markdown": "It is important to contrast the design philosophy of git with the philosophy of a more traditional source control tool like SVN.\r\n\r\nSubversion was designed and built with a client/server model. There is a single repository that is the server, and several clients can fetch code from the server, work on it, then commit it back to the server. The assumption is that the client can always contact the server when it needs to perform an operation.\r\n\r\nGit was designed to support a more distributed model with no need for a central repository (though you can certainly use one if you like). Also git was designed so that the client and the &quot;server&quot; don&#39;t need to be online at the same time. Git was designed so that people on an unreliable link could exchange code via email, even. It is possible to work completely disconnected and burn a CD to exchange code via git.\r\n\r\nIn order to support this model git maintains a local repository with your code and also an additional local repository that mirrors the state of the remote repository. By keeping a copy of the remote repository locally, git can figure out the changes needed even when the remote repository is not reachable.  Later when you need to send the changes to someone else, git can transfer them as a set of changes from a point in time known to the remote repository.\r\n\r\n- **`git fetch`** is the command that says &quot;bring my local copy of the remote repository up to date.&quot; \r\n\r\n- **`git pull`** says &quot;bring the changes in the remote repository where I keep my own code.&quot;\r\n\r\nNormally **`git pull`** does this by doing a **`git fetch`** to bring the local copy of the remote repository up to date, and then merging the changes into your own code repository and possibly your working copy.\r\n\r\nThe take away is to keep in mind that there are often at least **three copies** of a project on your workstation. One copy is your own repository with your own commit history. The second copy is your working copy where you are editing and building. The third copy is your local &quot;cached&quot; copy of a remote repository.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1513203429, 
               "id": "15733096", 
               "up_vote_count": 930
            }, 
            {
               "answer_id": 15990759, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1427206504, 
               "creation_date": 1365874294, 
               "score": 153, 
               "body_markdown": "**Briefly**\r\n\r\n`git fetch` is similar to `pull` but doesn&#39;t merge. i.e. it fetches remote updates (`refs` and `objects`) but your local stays the same (i.e. `origin/master` gets updated but `master` stays the same) .\r\n\r\n`git pull` pulls down from a remote and instantly merges.\r\n\r\n**More**\r\n\r\n`git clone` clones a repo.\r\n\r\n`git rebase` saves stuff from your current branch that isn&#39;t in the upstream branch to a temporary area. Your branch is now the same as before you started your changes. So, `git pull -rebase` will pull down the remote changes, rewind your local branch, replay your changes over the top of your current branch one by one until you&#39;re up-to-date.\r\n\r\nAlso, `git branch -a` will show you exactly what\u2019s going on with all your branches - local and remote.\r\n\r\nThis blog post was useful:\r\n\r\n[The difference between git pull, git fetch and git clone (and git rebase) - Mike Pearce][1]\r\n\r\nand covers `git pull`, `git fetch`, `git clone` and `git rebase`.\r\n\r\n\r\n====\r\n\r\nUPDATE\r\n\r\nI thought I&#39;d update this to show how you&#39;d actually use this in practice. \r\n\r\n1. Update your local repo from the remote (but don&#39;t merge):\r\n\r\n    git fetch \r\n\r\n2. After downloading the updates, let&#39;s see the differences:\r\n\r\n    git diff master origin/master \r\n\r\n3. If you&#39;re happy with those updates, then merge:\r\n\r\n    git pull\r\n\r\nNotes:\r\n\r\nOn step 2: For more on diffs between local and remotes, see: https://stackoverflow.com/questions/1800783/compare-local-git-branch-with-remote-branch\r\n\r\nOn step 3: It&#39;s probably more accurate (e.g. on a fast changing repo) to do a `git rebase origin` here. See @Justin Ohms comment in another answer.\r\n\r\nSee also: http://longair.net/blog/2009/04/16/git-fetch-and-merge/ \r\n\r\n  [1]: http://blog.mikepearce.net/2010/05/18/the-difference-between-git-pull-git-fetch-and-git-clone-and-git-rebase/", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1495540513, 
               "id": "15990759", 
               "up_vote_count": 155
            }, 
            {
               "answer_id": 16920037, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1370447226, 
               "creation_date": 1370354896, 
               "score": 42, 
               "body_markdown": "The only difference between `git pull` and `git fetch` is that :\r\n\r\n`git pull` pulls from a remote branch and merges it.\r\n\r\n`git fetch ` only fetches from the remote branch but it does not merge\r\n\r\ni.e. git pull = git fetch + git merge ...", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1370447226, 
               "id": "16920037", 
               "up_vote_count": 44
            }, 
            {
               "answer_id": 18903881, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1464742789, 
               "creation_date": 1379620906, 
               "score": 67, 
               "body_markdown": "`git fetch` pulls down the code from the remote server to your tracking branches in your local repository.  If your remote is named `origin` (the default) then these branches will be within `origin/`, for example `origin/master`, `origin/mybranch-123`, etc.  These are not your current branches, they are *local* copies of those branches from the server.\r\n\r\n`git pull` does a `git fetch` but then **also** merges the code from the tracking branch into your current local version of that branch.  If you&#39;re not ready for that changes yet, just `git fetch` first.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1464742789, 
               "id": "18903881", 
               "up_vote_count": 69
            }, 
            {
               "answer_id": 18906104, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1379630471, 
               "creation_date": 1379630471, 
               "score": 28, 
               "body_markdown": "git pull == ( git fetch + git merge) \r\n\r\ngit fetch does not changes to local branches.\r\n\r\nIf you already have a local repository with a remote set up for the desired project, you can grab all branches and tags for the existing remote using git fetch &lt;REMOTENAME&gt;. ... Fetch does not make any changes to local branches, so you will need to merge a remote branch with a paired local branch to incorporate newly fetch changes. [from github][1]\r\n\r\n\r\n  [1]: https://help.github.com/articles/fetching-a-remote", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "18906104", 
               "up_vote_count": 29
            }, 
            {
               "answer_id": 20271460, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1385658225, 
               "creation_date": 1385658225, 
               "score": 37, 
               "body_markdown": "Git allows chronologically older commits to be applied after newer commits.\r\nBecause of this, the act of transferring commits between repositories is split into two steps:\r\n\r\n 1. Copying new commits from remote branch to copy of this remote branch inside local repo.  \r\n\r\n   (repo to repo operation) `master@remote &gt;&gt; remote/origin/master@local`\r\n\r\n 2. Integrating new commits to local branch\r\n\r\n   (inside-repo operation) `remote/origin/master@local &gt;&gt; master@local`\r\n\r\nThere are two ways of doing step 2. You can:\r\n\r\n 1. Fork local branch after last common ancestor and add new commits parallel to commits which are unique to local repository, finalized by merging commit, closing the fork. \r\n 2. Insert new commits after last common ancestor and reapply commits unique to local repository.\r\n\r\nIn `git` terminology, step 1 is `git fetch`, step 2 is `git merge` or `git rebase`\r\n\r\n`git pull` is `git fetch` and `git merge`", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "20271460", 
               "up_vote_count": 38
            }, 
            {
               "answer_id": 21892643, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1406271695, 
               "creation_date": 1392844734, 
               "score": 98, 
               "body_markdown": "I like to have some visual representation of the situation to grasp these things. Maybe other developers would like to see it too, so here&#39;s my addition. I&#39;m not totally sure that it all is correct, so please comment if you find any mistakes.\r\n\r\n                                             LOCAL SYSTEM\r\n                      . =====================================================    \r\n    ================= . =================  ===================  =============\r\n    REMOTE REPOSITORY . REMOTE REPOSITORY  LOCAL REPOSITORY     WORKING COPY\r\n    (ORIGIN)          . (CACHED)           \r\n    for example,      . mirror of the      \r\n    a github repo.    . remote repo\r\n    Can also be       .\r\n    multiple repo&#39;s   .\r\n                      .\r\n                      .\r\n    FETCH  *------------------&gt;*\r\n    Your local cache of the remote is updated with the origin (or multiple\r\n    external sources, that is git&#39;s distributed nature)\r\n                      .\r\n    PULL   *--------------------------------------------------------&gt;*\r\n    changes are merged directly into your local copy. when conflicts occur, \r\n    you are asked for decisions.\r\n                      .\r\n    COMMIT            .                             *&lt;---------------*\r\n    When coming from, for example, subversion, you might think that a commit\r\n    will update the origin. In git, a commit is only done to your local repo.\r\n                      .\r\n    PUSH   *&lt;---------------------------------------*\r\n    Synchronizes your changes back into the origin.\r\n\r\nSome major advantages for having a fetched mirror of the remote are:\r\n\r\n * **Performance** (scroll through all commits and messages without trying to squeeze it through the network)\r\n * **Feedback** about the state of your local repo (for example, I use Atlassian&#39;s SourceTree, which will give me a bulb indicating if I&#39;m commits ahead or behind compared to the origin. This information can be updated with a GIT FETCH).", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1406271695, 
               "id": "21892643", 
               "up_vote_count": 98
            }, 
            {
               "answer_id": 24991188, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1406538249, 
               "creation_date": 1406536135, 
               "score": 23, 
               "body_markdown": "From [Pro Git &amp;sect; 2.5 Git Basics - Working with Remotes: Fetching and Pulling from Your Remotes](http://git-scm.com/book/en/Git-Basics-Working-with-Remotes#Fetching-and-Pulling-from-Your-Remotes):\r\n\r\n&gt; It\u2019s important to note that the `fetch` command pulls the data to your local repository \u2014 it doesn\u2019t\r\n&gt; automatically merge it with any of your work or modify what you\u2019re\r\n&gt; currently working on. You have to merge it manually into your work\r\n&gt; when you\u2019re ready.\r\n&gt; \r\n&gt; If you have a branch set up to track a remote branch, you can use the\r\n&gt; `git pull` command to automatically fetch and then merge a remote\r\n&gt; branch into your current branch. This may be an easier or more\r\n&gt; comfortable workflow for you; and by default, the `git clone` command\r\n&gt; automatically sets up your local master branch to track the remote\r\n&gt; master branch on the server you cloned from (assuming the remote has a\r\n&gt; master branch). Running `git pull` generally fetches data from the\r\n&gt; server you originally cloned from and automatically tries to merge it\r\n&gt; into the code you\u2019re currently working on.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1406538249, 
               "id": "24991188", 
               "up_vote_count": 24
            }, 
            {
               "answer_id": 25255924, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1407816007, 
               "creation_date": 1407816007, 
               "score": 29, 
               "body_markdown": "Git obtains the branch of the latest version from the remote to the local using two commands: \r\n\r\n 1. git fetch: Git is going to get the latest version from remote to local,  but it do not automatically merge.\r\n&#160;&#160;&#160;&#160;\r\n`git fetch origin master`\r\n`git log -p master..origin/master`\r\n`git merge origin/master`\r\n\r\n\r\n&#160;&#160;&#160;&#160; The commands above mean that download latest version of the main branch from origin from the remote to origin master branch. And then compares the local master branch and origin master branch. Finally, merge. \r\n\r\n 2. git pull: Git is going to get the latest version from the remote and merge into the local.\r\n\r\n&#160;&#160;&#160;\r\n    `git pull origin master`\r\n\r\n&#160;&#160;&#160;&#160; The command above is the equivalent to `git fetch` and `git merge`. In practice, `git fetch` maybe more secure because before the merge we can see the changes and decide whether to merge.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "25255924", 
               "up_vote_count": 29
            }, 
            {
               "answer_id": 28365125, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1481277721, 
               "creation_date": 1423223293, 
               "score": 98, 
               "body_markdown": "![enter image description here][1]\r\n\r\nThis interactive graphical representation is very helpful in understanging git: http://ndpsoftware.com/git-cheatsheet.html \r\n\r\n`git fetch` just &quot;downloads&quot; the changes from the remote to your local repository. `git pull` downloads the changes and merges them into your current branch. &quot;In its default mode, `git pull` is shorthand for `git fetch` followed by `git merge FETCH_HEAD`.&quot;\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/aiQDJ.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1481277721, 
               "id": "28365125", 
               "up_vote_count": 99
            }, 
            {
               "answer_id": 28527676, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1424014038, 
               "creation_date": 1424014038, 
               "score": 20, 
               "body_markdown": "**Git Pull:**\r\n\r\nFrom what I understand, git pull will pull down from a remote whatever you ask (so, whatever trunk you\u2019re asking for) and instantly merge it into the branch you\u2019re in when you make the request. Pull is a high-level request that runs \u2018fetch\u2019 then a \u2018merge\u2019 by default, or a rebase with \u2018\u2013rebase\u2019. You could do without it, it\u2019s just a convenience.\r\n\r\n    %&gt; git checkout localBranch\r\n    %&gt; git pull origin master\r\n    %&gt; git branch\r\n    master\r\n    * localBranch\r\n\r\nThe above will merge the remote \u201cmaster\u201d branch into the local \u201clocalBranch\u201d.\r\n\r\n\r\n----------\r\n\r\n\r\n**Git fetch:**\r\n\r\nFetch is similar to pull, except it won\u2019t do any merging.\r\n\r\n    %&gt; git checkout localBranch\r\n    %&gt; git fetch origin remoteBranch\r\n    %&gt; git branch\r\n    master\r\n    * localBranch\r\n    remoteBranch\r\n\r\nSo, the fetch will have pulled down the remoteBranch and put it into a local branch called \u201cremoteBranch\u201d. creates a local copy of a remote branch which you shouldn\u2019t manipulate directly; instead create a proper local branch and work on that. \u2018git checkout\u2019 has a confusing feature though. If you \u2018checkout\u2019 a local copy of a remote branch, it creates a local copy and sets up a merge to it by default.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "28527676", 
               "up_vote_count": 21
            }, 
            {
               "answer_id": 30324983, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1436610166, 
               "creation_date": 1432036640, 
               "score": 30, 
               "body_markdown": "&gt; What is the difference between `git pull` and `git fetch`?\r\n\r\nTo understand this, you first need to understand that your local git maintains not only your local repository, but it also maintains a local copy of the remote repository.\r\n\r\n`git fetch` brings your local copy of the remote repository up to date. For example, if your remote repository is GitHub - you may want to fetch any changes made in the remote repository to your local copy of it the remote repository. This will allow you to perform operations such as compare or merge.\r\n\r\n`git pull` on the other hand will bring down the changes in the remote repository to where you keep your own code. Typically, `git pull` will do a `git fetch` first to bring the local copy of the remote repository up to date, and then it will merge the changes into your own code repository and possibly your working copy. ", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1436610166, 
               "id": "30324983", 
               "up_vote_count": 31
            }, 
            {
               "answer_id": 30733500, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1442222620, 
               "creation_date": 1433856639, 
               "score": 527, 
               "body_markdown": "Here is [Oliver Steele&#39;s image of how all it all fits together][1]:\r\n\r\n![enter image description here][2]\r\n\r\nIf there is sufficient interest, I suppose I could update the image to add `git clone` and `git merge`... \r\n\r\n  [1]: https://stackoverflow.com/questions/3329943/git-branch-fork-fetch-merge-rebase-and-clone-what-are-the-differences/\r\n  [2]: http://i.stack.imgur.com/XwVzT.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1495540513, 
               "id": "30733500", 
               "up_vote_count": 530
            }, 
            {
               "answer_id": 31364215, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1436673292, 
               "creation_date": 1436673292, 
               "score": 24, 
               "body_markdown": "    git pull = git fetch + git merge ", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "31364215", 
               "up_vote_count": 26
            }, 
            {
               "answer_id": 31364749, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1436679597, 
               "creation_date": 1436679597, 
               "score": 20, 
               "body_markdown": "**git pull** \r\n\r\nIt performs two functions using a single command.\r\n\r\nIt fetches all the changes that were made to the remote branch and then merges those changes into your local branch. You can also modify the behaviour of pull by passing --rebase. The difference between merge and rebase can be read [here][1]\r\n\r\n**git fetch**\r\n\r\nGit fetch does only half the work of git pull. It just brings the remote changes into your local repo but does not apply them onto your branches.You have to explicitly apply those changes. This can be done as follows:\r\n\r\n    git fetch\r\n    git rebase origin/master\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/16666089/whats-the-difference-between-git-merge-and-git-rebase", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1495542389, 
               "id": "31364749", 
               "up_vote_count": 20
            }, 
            {
               "answer_id": 31708577, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1438195128, 
               "creation_date": 1438195128, 
               "score": 25, 
               "body_markdown": "Trying to be clear and simple.\r\n\r\n\r\nThe **git pull** command is actually a `shortcut` for **git fetch** followed by the **git merge** or the **git rebase** command depending on your configuration. You can configure your Git repository so that **git pull** is a fetch followed by a rebase.\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "31708577", 
               "up_vote_count": 26
            }, 
            {
               "answer_id": 32041658, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1439775457, 
               "creation_date": 1439775457, 
               "score": 19, 
               "body_markdown": "From [git cheat sheet](http://www.git-tower.com/blog/git-cheat-sheet/):  \r\n\r\n    git fetch &lt;remote&gt; // Download all changes from &lt;remote&gt;, but don&#39;t integrate into HEAD\r\n    git pull &lt;remote&gt; &lt;branch&gt; // Download changes and directly merge/integrate into HEAD", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "32041658", 
               "up_vote_count": 19
            }, 
            {
               "answer_id": 32426129, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1441559407, 
               "creation_date": 1441559407, 
               "score": 19, 
               "body_markdown": "**fetch vs pull**\r\n\r\nfetch will download any changes from the remote branch, updating your repository data, but leaving your local branch unchanged.\r\n\r\npull will perform a fetch and additionally merge the changes into your local branch.\r\n\r\n***What&#39;s the difference?*** pull updates you local branch with changes from the pulled branch. A fetch does not advance your local branch.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "32426129", 
               "up_vote_count": 20
            }, 
            {
               "answer_id": 32553304, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1503003106, 
               "creation_date": 1442170098, 
               "score": 26, 
               "body_markdown": "Actually Git maintains a copy of your own code and \r\nthe remote repository.\r\n\r\n The command `git fetch` makes your local copy up to date by getting data from remote repository. The reason we need this is because somebody else might have made some changes to the code and you want to keep yourself updated.  \r\n\r\nThe command `git pull` brings the changes in the remote repository to where you keep your own code. Normally, `git pull` does this by doing a \u2018git fetch\u2019 first to bring the local copy of the remote repository up to date, and then it merges the changes into your own code repository and possibly your working copy.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1503003106, 
               "id": "32553304", 
               "up_vote_count": 27
            }, 
            {
               "answer_id": 32779410, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1443174408, 
               "creation_date": 1443174408, 
               "score": 19, 
               "body_markdown": "One must keep in mind the nature of git. You have remotes and your local branches ( not necessarily the same ) . In comparison to other source control systems this can be a bit perplexing. \r\n\r\nUsually when you checkout a remote a local copy is created that tracks the remote. \r\n\r\ngit fetch will work with the remote branch and update your information. \r\n\r\nIt is actually the case if other SWEs are working one the same branch, and rarely the case in small one dev - one branch - one project scenarios.\r\n\r\nYour work on the local branch is still intact. In order to bring the changes to your local branch you have to merge/rebase the changes from the remote branch.\r\n\r\ngit pull does exactly these two steps ( i.e. --rebase to rebase instead of merge )\r\n\r\nIf your local history and the remote history have conflicts the you will be forced to do the merge during a git push to publish your changes.\r\n\r\nThus it really depends on the nature of your work environment and experience what to use.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "32779410", 
               "up_vote_count": 19
            }, 
            {
               "answer_id": 34438903, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1470675377, 
               "creation_date": 1450884663, 
               "score": 101, 
               "body_markdown": "###Bonus:###\r\nIn speaking of pull &amp; fetch in the above answers, I would like to share an interesting trick,\r\n\r\n#**`git pull --rebase`**#\r\n\r\nThis above command is the most useful command in my git life which saved a lots of time.\r\n\r\nBefore pushing your new commits to server, try this command and it will automatically sync latest server changes (with a fetch + merge) and will place your commit at the top in git log. No need to worry about manual pull/merge.\r\n\r\nFind details at: http://gitolite.com/git-pull--rebase", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1470675377, 
               "id": "34438903", 
               "up_vote_count": 102
            }, 
            {
               "answer_id": 34998582, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1453742930, 
               "creation_date": 1453742930, 
               "score": 157, 
               "body_markdown": "Sometimes a visual representation helps.\r\n\r\n\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/zUInQ.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "34998582", 
               "up_vote_count": 159
            }, 
            {
               "answer_id": 36369604, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1459575254, 
               "creation_date": 1459575254, 
               "score": 14, 
               "body_markdown": "From what I understood, \r\n\r\n**Git pull** - Pulls down from a specified remote (Specified by the user) and will instantly merge it into a branch we are presently on. It is basically a mix of Fetch and Merge commands.\r\n\r\n**Git Fetch** - It is same as *Pull*, but it won&#39;t do any merging. So you can carefully monitor the files before merging it. \r\n\r\nThis url must be of help for further understanding : [The difference between git pull, git fetch and git clone (and git rebase).][1]\r\n\r\n\r\n  [1]: http://blog.mikepearce.net/2010/05/18/the-difference-between-git-pull-git-fetch-and-git-clone-and-git-rebase/", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "36369604", 
               "up_vote_count": 15
            }, 
            {
               "answer_id": 38361930, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1497636910, 
               "creation_date": 1468444989, 
               "score": 57, 
               "body_markdown": "**Git Fetch**\r\n\r\nYou download changes to your local branch from origin through fetch. Fetch asks the remote repo for all commits that others have made but you don&#39;t have on your local repo. Fetch downloads these commits and adds them to the local repository.\r\n\r\n\r\n**Git Merge**\r\n\r\nYou can apply changes downloaded through fetch using the merge command. Merge will take the commits retrieved from fetch and try to add them to your local branch. The merge will keep the commit history of your local changes so that when you share your branch with push, Git will know how others can merge your changes.\r\n\r\n\r\n**Git Pull**\r\n\r\nFetch and merge run together often enough that a command that combines the two, pull, was created. Pull does a fetch and then a merge to add the downloaded commits into your local branch.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1497636910, 
               "id": "38361930", 
               "up_vote_count": 58
            }, 
            {
               "answer_id": 40783672, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1479990690, 
               "creation_date": 1479982655, 
               "score": 2, 
               "body_markdown": "Git fetch syncs the catalog of the remote repository to your local. It will not merge the file/code changes from remote to your local branch.\r\n\r\nGit pull downloads the changes related to your current local branch and then merge it.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1479990690, 
               "id": "40783672", 
               "up_vote_count": 3
            }, 
            {
               "answer_id": 40881298, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1480485364, 
               "creation_date": 1480485364, 
               "score": 11, 
               "body_markdown": "In a simplest manner we can define as:\r\n--------------------------------------\r\n\r\n&gt; **Fetch**\r\n\r\n$ git fetch origin\r\n\r\nGit Fetch only downloads new data from a remote repository \u2013 but it doesn\u2019t integrate any of this new data into your working files. Fetch is great for getting a fresh view on all the things that happened in a remote repository.\r\n\r\nDue to its harmless nature, you can be assured that fetch will never manipulate, destroy, or screw up anything. This means you can never fetch often enough.\r\n\r\n&gt; **Pull**\r\n\r\n$ git pull origin master\r\n\r\nGit Pull, in contrast, is used with a different goal in mind: to update your current HEAD branch with the latest changes from the remote server. This means that pull not only downloads new data but also directly integrates it into your current working copy files.\r\n\r\n*This has a couple of consequences:*\r\n\r\n - Since \u201cgit pull\u201d tries to merge remote changes with your local ones, a so-called \u201cmerge conflict\u201d can occur. \r\n   \r\n - Like for many other actions, it\u2019s highly recommended to start a \u201cgit pull\u201d only with a clean working copy.\r\n\r\n - This means that you should not have any uncommitted local changes before you pull. Use Git\u2019s Stash feature to save your local changes temporarily.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "40881298", 
               "up_vote_count": 11
            }, 
            {
               "answer_id": 42092094, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1486476906, 
               "creation_date": 1486476906, 
               "score": 48, 
               "body_markdown": "The Difference between **GIT Fetch** and **GIT Pull** can be explained with the following scenario:\r\n*(Keeping in mind that pictures speak louder than words!, I have provided pictorial representation)*\r\n\r\nLet\u2019s take a example that You are working on a project with your team members. So their will be one main Branch of the project  and all the contributors must fork it to their own local repository and then work on this local branch to modify/Add modules then push back to the main branch.\r\n\r\nSo, \r\n**Initial State** of the two Branches when you forked the main project on your local repository will be like this- (A.B,C are Modules already completed of the project)\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\nNow, you have started working on the new module (suppose \u2018D\u2019)  and when you have completed the D module you want to push it to the main branch, But meanwhile what happens is that one of your teammates has developed new Module \u2018E\u2019,\u2019F\u2019 and modified \u2018C\u2019.\r\nSo now what has happened is that your local repository is lacking behind the original progress of the project and thus pushing of your changes to main branch can lead to conflict and may cause your Module \u2018D\u2019 to malfunction.\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\nTo avoid such issues and to work parallel with the original progress of the project their are Two ways:\r\n\r\n**1. Git Fetch-** This will Download all the changes that have been made to the origin/main branch project which are not present in your local branch. And will wait for the Git Merge command to apply the changes that have been fetched to your Repository or branch.\r\n\r\n[![enter image description here][3]][3]\r\n\r\n\r\nSo now You can carefully monitor the files before merging it to your repository. And you can also modify \u2018D\u2019 if required because of Modified \u2018C\u2019.\r\n\r\n[![enter image description here][4]][4]\r\n\r\n\r\n**2. Git Pull-** This will update your local branch with the origin/main branch i.e. actually what it does is combination of Git Fetch and Git merge one after another.\r\n*But this may Cause Conflicts to occur, so it\u2019s recommended to use Git Pull with a clean copy.*\r\n\r\n[![enter image description here][5]][5]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/SPky3.png\r\n  [2]: https://i.stack.imgur.com/SpIlX.png\r\n  [3]: https://i.stack.imgur.com/8qhgH.png\r\n  [4]: https://i.stack.imgur.com/JYA7S.png\r\n  [5]: https://i.stack.imgur.com/O1vk0.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "42092094", 
               "up_vote_count": 49
            }, 
            {
               "answer_id": 44672602, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1514447423, 
               "creation_date": 1498038501, 
               "score": 46, 
               "body_markdown": "**OK**, here are some information about `git pull` and `git fetch`, so you can understand the actual differences... in simple words, **fetch** gets the latest data, but not the code changes and not going to mess with your current code, but pull get the code changes and merge it your local branch, read on to get more details about each:\r\n\r\n&lt;h2&gt;git fetch&lt;/h2&gt;\r\n\r\nIt will download all refs and object and any new branches to local Repository...\r\n\r\n&gt; Fetch branches and/or tags (collectively, &quot;refs&quot;) from one or more\r\n&gt; other repositories, along with the objects necessary to complete their\r\n&gt; histories. Remote-tracking branches are updated (see the description\r\n&gt; of &lt;refspec&gt; below for ways to control this behavior).\r\n&gt; \r\n&gt; By default, any tag that points into the histories being fetched is\r\n&gt; also fetched; the effect is to fetch tags that point at branches that\r\n&gt; you are interested in. This default behavior can be changed by using\r\n&gt; the --tags or --no-tags options or by configuring\r\n&gt; remote.&lt;name&gt;.tagOpt. By using a refspec that fetches tags explicitly,\r\n&gt; you can fetch tags that do not point into branches you are interested\r\n&gt; in as well.\r\n&gt; \r\n&gt; git fetch can fetch from either a single named repository or URL, or\r\n&gt; from several repositories at once if &lt;group&gt; is given and there is a\r\n&gt; remotes.&lt;group&gt; entry in the configuration file. (See git-config[1]).\r\n&gt; \r\n&gt; When no remote is specified, by default the origin remote will be\r\n&gt; used, unless there\u2019s an upstream branch configured for the current\r\n&gt; branch.\r\n&gt; \r\n&gt; The names of refs that are fetched, together with the object names\r\n&gt; they point at, are written to .git/FETCH_HEAD. This information may be\r\n&gt; used by scripts or other git commands, such as git-pull.\r\n\r\n&lt;hr&gt;\r\n\r\n&lt;h2&gt;git pull&lt;/h2&gt;\r\n\r\nIt will apply the changes from remote to the current branch in local...\r\n\r\n&gt; Incorporates changes from a remote repository into the current branch.\r\n&gt; In its default mode, git pull is shorthand for git fetch followed by\r\n&gt; git merge FETCH_HEAD.\r\n&gt; \r\n&gt; More precisely, git pull runs git fetch with the given parameters and\r\n&gt; calls git merge to merge the retrieved branch heads into the current\r\n&gt; branch. With --rebase, it runs git rebase instead of git merge.\r\n&gt; \r\n&gt; &lt;repository&gt; should be the name of a remote repository as passed to\r\n&gt; git-fetch[1]. &lt;refspec&gt; can name an arbitrary remote ref (for example,\r\n&gt; the name of a tag) or even a collection of refs with corresponding\r\n&gt; remote-tracking branches (e.g., refs/heads/*:refs/remotes/origin/*),\r\n&gt; but usually it is the name of a branch in the remote repository.\r\n&gt; \r\n&gt; Default values for &lt;repository&gt; and &lt;branch&gt; are read from the\r\n&gt; &quot;remote&quot; and &quot;merge&quot; configuration for the current branch as set by\r\n&gt; git-branch --track.\r\n\r\n&lt;hr&gt;\r\n\r\nI also create the **visual** below to show you how `git fetch` and `git pull` working together...\r\n\r\n[![git pull and git fetch][1]][1]\r\n\r\n  [1]: https://i.stack.imgur.com/nWYnQ.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1514447423, 
               "id": "44672602", 
               "up_vote_count": 46
            }, 
            {
               "answer_id": 45049899, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1499840621, 
               "creation_date": 1499840621, 
               "score": 16, 
               "body_markdown": "A simple Graphical Representation for Beginners,\r\n\r\n[![enter image description here][1]][1]\r\n\r\nhere,\r\n\r\n    git pull  \r\nwill fetch code from repository and rebase with your local... in git pull there is possibility of new commits getting created.\r\n\r\nbut in , \r\n \r\n\r\ngit fetch \r\n\r\nwill fetch code from repository and we need to rebase it manually by using `git rebase`\r\n\r\neg: i am going to fetch from server master and rebase it in my local master.\r\n\r\n1) git pull ( rebase will done automatically):\r\n\r\n    git pull origin master\r\nhere **origin** is your remote repo **master** is your branch\r\n\r\n2) git fetch (need to rebase manually):\r\n\r\n    git fetch origin master\r\nit will fetch server changes from origin. and it will be in your local until you rebase it on your own. we need to fix conflicts manually by checking codes.\r\n\r\n    git rebase origin/master\r\nthis will rebase code into local. before that ensure you&#39;re in right branch.\r\n\r\n  [1]: https://i.stack.imgur.com/fEvk2.jpg", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "45049899", 
               "up_vote_count": 16
            }, 
            {
               "answer_id": 47222496, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1516184138, 
               "creation_date": 1510315889, 
               "score": 1, 
               "body_markdown": "git pull and git fetch have different uses, even if in general usage they do fairly similar tasks. It is important to understand which to use and when.\r\n\r\ngit fetch downloads the latest changes from the remote, but does not affect your working copy, or branches on your local repository. The downloaded branch is stored in &lt;remote&gt;/&lt;branch&gt;, e.g. origin/master.\r\n\r\ngit pull is effectively git fetch followed by git merge &lt;remote&gt;/&lt;branch&gt;. Any changes in the remote repository are merged into your local branch. This is useful if you just want your local repository to reflect the changes that have happened in the remote, but is generally counterproductive when you are developing in your local branches and collaborating with others on the remote.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1516184138, 
               "id": "47222496", 
               "up_vote_count": 2
            }, 
            {
               "answer_id": 47453209, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1511432860, 
               "creation_date": 1511432860, 
               "score": -1, 
               "body_markdown": "Take a look at the picture below, it is a sourcetree example or fetched but not pulled changes. \r\n\r\n1) After the fetch, these digits show how many changesets are not merged to the current working copy. In an ST&#39;s log view your selected changeset will _NOT_ be the last by date (red arrow) in selected branch. The workspace will not be affected after the fetch, cause it is just a synchronization of made changesets with a remote repo.\r\n\r\n2) If press Pull, current work copy will be updated with all these changesets and in a log view your selected changeset WILL be the last in working branch. Also, merging conflicts could appear.\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/NmvvA.png", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "47453209", 
               "up_vote_count": 0
            }, 
            {
               "answer_id": 47785867, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1513141726, 
               "creation_date": 1513141726, 
               "score": -1, 
               "body_markdown": "-  `git pull`: \r\n - Incorporates changes from a remote repository into the current branch. \r\n - In its default mode, `git pull` is shorthand for `git fetch` followed by `git merge FETCH_HEAD`.\r\n- `git fetch` \r\n - Download objects and refs from another repository.\r\n\r\nWhile doing pull request in eclipse, we can see git fetch and Update results as follows:  \r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/lZQmn.jpg", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "47785867", 
               "up_vote_count": 0
            }, 
            {
               "answer_id": 47947099, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1513974983, 
               "creation_date": 1513974983, 
               "score": 2, 
               "body_markdown": "**Git Fetch**\r\n\r\nHelps you to get known about the latest updates from a `git repository`. Let&#39;s say you working in a team using `GitFlow`, where team working on multiple `branches` ( features ). With `git fetch --all` `command` you can get known about all new `branches` within `repository`.\r\n\r\nMostly `git fetch` is used with `git reset`. For example you want to revert all your local changes to the current repository state.\r\n\r\n    git fetch --all // get known about latest updates\r\n    git reset --hard origin/[branch] // revert to current branch state\r\n\r\n\r\n**Git pull**\r\n\r\nThis command update your `branch` with current `repository` `branch` state. Let&#39;s continue with `GitFlow`. Multiple feature `branches` was `merged` to `develop` branch and when you want to develop new features for the project you must go to the develop `branch` and do a `git pull` to get the current state of `develop` `branch`\r\n\r\n&gt; Documentation for GitFlow https://gist.github.com/peterdeweese/4251497", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "47947099", 
               "up_vote_count": 2
            }, 
            {
               "answer_id": 48078345, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1514985935, 
               "creation_date": 1514985935, 
               "score": 0, 
               "body_markdown": "`git pull` is used to download git repository changes, \r\nwhere as `git fetch` is use to fetch branch changes, e.g. if someone created new branch you can update that branch on your local git repository by using `git fetch`.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "48078345", 
               "up_vote_count": 2
            }, 
            {
               "answer_id": 48565337, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1517495999, 
               "creation_date": 1517495999, 
               "score": 1, 
               "body_markdown": "In short and simple terms:\r\n\r\n`git fetch`: Look if there is new stuff.\r\n\r\n`git pull`: Take the new stuff and put it on top of your stuff. ", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "48565337", 
               "up_vote_count": 3
            }, 
            {
               "answer_id": 48691562, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1518111418, 
               "creation_date": 1518111418, 
               "score": -1, 
               "body_markdown": "**git fetch** fetches the new changes from repository and stores log into pipe between local and remote repo.\n\nWhile **git pull** first fetches all the changes and then Merge them to upstream/master(remotes master).\n\nBut it is preferred to use **git fetch** and **git merge upstream/master** instead of **git pull** as there might be conflicts if you directly pull changes without checking for them.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "48691562", 
               "up_vote_count": 0
            }
         ], 
         "tags": "[u'git', u'git-pull', u'git-fetch']", 
         "down_vote_count": 23, 
         "last_activity_date": 1518111418, 
         "answers": "", 
         "creation_date": "1226742669", 
         "code_snippet": "[u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git fetch; git reset --hard origin/master</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git merge</code>', u'<code>git fetch</code>', u'<code>refs/remotes/&lt;remote&gt;/</code>', u'<code>refs/heads</code>', u'<code>git fetch</code>', u'<code>git pull</code>', u'<code>git pull</code>', u'<code>git remote</code>', u'<code>git pull</code>', u'<code>/home/alice/</code>', u'<code>git fetch /home/bob</code>', u'<code>git merge</code>', u'<code>pull</code>', u'<code>fetch</code>', u'<code>merge</code>', u'<code>merge</code>', u'<code>pull</code>', u'<code>pull</code>', u'<code>pull</code>', u'<code>fetch</code>', u'<code>merge</code>', u'<code>git fetch</code>', u'<code>.git/</code>', u'<code>.git/</code>', u'<code>master</code>', u'<code>remotes/origin/master</code>', u'<code>git branch -avv</code>', u'<code>git remote update</code>', u'<code>git fetch</code>', u'<code>.git/refs/remotes/origin/</code>', u'<code>.git</code>', u'<code>git fetch</code>', u'<code>git pull</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>remoteName/</code>', u'<code>git clone</code>', u'<code>git merge</code>', u'<code>git clone</code>', u'<code>git merge</code>', u'<code>git merge</code>', u'<code>merge</code>', u'<code>pull</code>', u'<code>pull</code>', u'<code>git fetch</code>', u'<code>git fetch\\ngit diff ...origin\\n</code>', u'<code>git diff ..origin</code>', u'<code>git diff ...origin</code>', u'<code>git diff $(git-merge-base HEAD origin) origin</code>', u'<code>git diff [--options] &lt;commit&gt;...&lt;commit&gt; [--] [&lt;path&gt;\\u2026]</code>', u'<code>git diff origin</code>', u'<code>git diff ...origin</code>', u'<code>origin</code>', u'<code>origin</code>', u'<code>git diff origin</code>', u'<code>origin</code>', u'<code>master</code>', u'<code>HEAD</code>', u'<code>HEAD</code>', u'<code>HEAD</code>', u'<code>git fetch</code>', u'<code>HEAD</code>', u'<code>git pull</code>', u'<code>HEAD</code>', u'<code>git fetch</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>pull</code>', u'<code>refs</code>', u'<code>objects</code>', u'<code>origin/master</code>', u'<code>master</code>', u'<code>git pull</code>', u'<code>git clone</code>', u'<code>git rebase</code>', u'<code>git pull -rebase</code>', u'<code>git branch -a</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git clone</code>', u'<code>git rebase</code>', u'<code>git rebase origin</code>', u'<code>git clone</code>', u'<code>git fetch</code>', u'<code>merge</code>', u'<code>origin</code>', u'<code>master</code>', u'<code>origin/master</code>', u'<code>git checkout master                                                  \\ngit fetch                                        \\ngit diff origin/master\\ngit rebase origin master\\n</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git merge</code>', u'<code>git pull</code>', u'<code>origin</code>', u'<code>master</code>', u'<code>git diff origin/master</code>', u'<code>git rebase</code>', u'<code>git pull origin master\\ngit checkout foo-branch\\ngit rebase master\\ngit push origin foo-branch\\n</code>', u'<code>git pull --rebase</code>', u'<code>man</code>', u'<code>git-pull</code>', u'<code>2.3.5</code>', u'<code>git pull --rebase</code>', u'<code>rebase</code>', u'<code>rebase</code>', u'<code>merge</code>', u'<code>git pull --rebase</code>', u'<code>git pull</code>', u'<code>git pull --rebase</code>', u\"<code>                                         LOCAL SYSTEM\\n                  . =====================================================    \\n================= . =================  ===================  =============\\nREMOTE REPOSITORY . REMOTE REPOSITORY  LOCAL REPOSITORY     WORKING COPY\\n(ORIGIN)          . (CACHED)           \\nfor example,      . mirror of the      \\na github repo.    . remote repo\\nCan also be       .\\nmultiple repo's   .\\n                  .\\n                  .\\nFETCH  *------------------&gt;*\\nYour local cache of the remote is updated with the origin (or multiple\\nexternal sources, that is git's distributed nature)\\n                  .\\nPULL   *--------------------------------------------------------&gt;*\\nchanges are merged directly into your local copy. when conflicts occur, \\nyou are asked for decisions.\\n                  .\\nCOMMIT            .                             *&lt;---------------*\\nWhen coming from, for example, subversion, you might think that a commit\\nwill update the origin. In git, a commit is only done to your local repo.\\n                  .\\nPUSH   *&lt;---------------------------------------*\\nSynchronizes your changes back into the origin.\\n</code>\", u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git pull</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git merge FETCH_HEAD</code>', u'<code>---------------------     -----------------------     -----------------------\\n- Remote Repo       -     - Remote Repo         -     - Remote Repo         -\\n-                   -     - gets pushed         -     -                     -\\n- @ R01             -     - @ R02               -     - @ R02               -\\n---------------------     -----------------------     -----------------------\\n\\n---------------------     -----------------------     -----------------------\\n- Local Repo        -     - Local Repo          -     - Local Repo          -\\n- pull              -     -                     -     - fetch               -\\n- @ R01             -     - @ R01               -     - @ R02               -\\n---------------------     -----------------------     -----------------------\\n\\n---------------------     -----------------------     -----------------------\\n- Local Sandbox     -     - Local Sandbox       -     - Local Sandbox       -\\n- Checkout          -     - new work done       -     -                     -\\n- @ R01             -     - @ R01+              -     - @R01+               -\\n---------------------     -----------------------     -----------------------\\n</code>', u'<code>---------------------     -----------------------     -----------------------\\n- Remote Repo       -     - Remote Repo         -     - Remote Repo         -\\n-                   -     - gets pushed         -     -                     -\\n- @ R01             -     - @ R02               -     - @ R02               -\\n---------------------     -----------------------     -----------------------\\n\\n---------------------     -----------------------     -----------------------\\n- Local Repo        -     - Local Repo          -     - Local Repo          -\\n- pull              -     -                     -     - pull                -\\n- @ R01             -     - @ R01               -     - @ R02               -\\n---------------------     -----------------------     -----------------------\\n\\n---------------------     -----------------------     -----------------------\\n- Local Sandbox     -     - Local Sandbox       -     - Local Sandbox       -\\n- Checkout          -     - new work done       -     - merged with R02     -\\n- @ R01             -     - @ R01+              -     - @R02+               -\\n---------------------     -----------------------     -----------------------\\n</code>', u'<code>git pull == git fetch + git merge\\n</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git merge</code>', u'<code>git pull == git fetch + git merge</code>', u'<code>git pull --rebase = git fetch + git rebase</code>', u'<code>git fetch</code>', u'<code>origin</code>', u'<code>origin/</code>', u'<code>origin/master</code>', u'<code>origin/mybranch-123</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git fetch</code>', u'<code>git fetch</code>', u'<code>git diff</code>', u'<code>git merge</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git fetch</code>', u'<code>git pull</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>rm -rf</code>', u'<code>master@remote &gt;&gt; remote/origin/master@local</code>', u'<code>remote/origin/master@local &gt;&gt; master@local</code>', u'<code>git</code>', u'<code>git fetch</code>', u'<code>git merge</code>', u'<code>git rebase</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git merge</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git fetch</code>', u'<code>git pull</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git fetch origin master</code>', u'<code>git log -p master..origin/master</code>', u'<code>git merge origin/master</code>', u'<code>git pull origin master</code>', u'<code>git fetch</code>', u'<code>git merge</code>', u'<code>git fetch</code>', u'<code>git fetch</code>', u'<code>git pull</code>', u'<code>git pull</code>', u'<code>git fetch</code>', u'<code>git fetch</code>', u'<code>git pull</code>', u'<code>git pull</code>', u'<code>shortcut</code>', u'<code>git pull = git fetch + git merge \\n</code>', u'<code>fetch</code>', u'<code>git pull</code>', u'<code>git clone</code>', u'<code>git pull</code>']", 
         "score": 9436, 
         "answer_count": "46", 
         "accepted_answer_id": 292359, 
         "path": "2.stack", 
         "link": "https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch", 
         "question_id": 292357, 
         "last_edit_date": "1486974674", 
         "id": "16817955-0", 
         "up_vote_count": "9459"
      }, 
      {
         "is_answered": true, 
         "protected_date": 1435276338, 
         "body_markdown": "I&#39;ve been messing around with [JSON][1] for some time, just pushing it out as text and it hasn&#39;t hurt anybody (that I know of), but I&#39;d like to start doing things properly.\r\n\r\nI have seen *so* many purported &quot;standards&quot; for the JSON content type:\r\n\r\n    application/json\r\n    application/x-javascript\r\n    text/javascript\r\n    text/x-javascript\r\n    text/x-json\r\n\r\nBut which is correct, or best? I gather that there are security and browser support issues varying between them.\r\n\r\nI know there&#39;s a similar question, *[What MIME type if JSON is being returned by a REST API?][2]*, but I&#39;d like a slightly more targeted answer.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JSON\r\n  [2]: https://stackoverflow.com/questions/404470/what-mime-type-if-json-is-being-returned-by-a-rest-api\r\n", 
         "view_count": "2045352", 
         "title": "What is the correct JSON content type?", 
         "_childDocuments_": [
            {
               "answer_id": 477819, 
               "tags": [], 
               "down_vote_count": 12, 
               "last_activity_date": 1519431178, 
               "creation_date": 1232897249, 
               "score": 8839, 
               "body_markdown": "For JSON text:\r\n\r\n&gt; The MIME media type for JSON text is **`application/json`**. The default encoding is UTF-8. (Source: [RFC 4627][1]).\r\n\r\nFor [JSONP][2] with callback:\r\n\r\n&gt; **`application/javascript`**\r\n\r\nHere are some blog posts that were mentioned in the comments that are relevant.\r\n \r\n - [Why you shouldn&#39;t use `text/html` for JSON][3]\r\n - [Internet&amp;nbsp;Explorer sometimes has issues with `application/json`][4]\r\n - [A rather complete list of Mimetypes and what to use them for][5]\r\n\r\n  [1]: http://www.ietf.org/rfc/rfc4627.txt\r\n  [2]: http://en.wikipedia.org/wiki/JSONP\r\n  [3]: http://jibbering.com/blog/?p=514\r\n  [4]: http://www.entwicklungsgedanken.de/2008/06/06/problems-with-internet-explorer-and-applicationjson/\r\n  [5]: https://github.com/h5bp/server-configs-nginx/blob/master/mime.types\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": true, 
               "last_edit_date": 1519431178, 
               "id": "477819", 
               "up_vote_count": 8851
            }, 
            {
               "answer_id": 477821, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1401158298, 
               "creation_date": 1232897498, 
               "score": 350, 
               "body_markdown": "If you&#39;re calling ASP.NET Web Services from the client-side you have to use `application/json` for it to work. I believe this is the same for the [jQuery][1] and [Ext][2] frameworks. \r\n\r\n  [1]: http://en.wikipedia.org/wiki/JQuery\r\n  [2]: http://en.wikipedia.org/wiki/Ext_%28JavaScript_library%29\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1401158298, 
               "id": "477821", 
               "up_vote_count": 351
            }, 
            {
               "answer_id": 1532020, 
               "tags": [], 
               "down_vote_count": 7, 
               "last_activity_date": 1430779034, 
               "creation_date": 1254926136, 
               "score": 564, 
               "body_markdown": "Of course, the correct MIME media type for JSON is `application/json`, but it&#39;s necessary to realize what type of data is expected in your application.\r\n\r\nFor example, I use [Ext GWT][1] and the server response must go as **text/html** but contains JSON data.\r\n\r\n*Client side, Ext GWT form listener*\r\n\r\n    uploadForm.getForm().addListener(new FormListenerAdapter()\r\n    {\r\n        @Override\r\n        public void onActionFailed(Form form, int httpStatus, String responseText) \r\n        {\r\n            MessageBox.alert(&quot;Error&quot;);\r\n        }\r\n\r\n        @Override\r\n        public void onActionComplete(Form form, int httpStatus, String responseText) \r\n        {\r\n            MessageBox.alert(&quot;Success&quot;);\r\n        }\r\n    });\r\n\r\nIn case of using **application/json** response type, the browser suggests me to save the file.\r\n\r\n*Server side source code snippet using [Spring MVC][2]*\r\n\r\n    return new AbstractUrlBasedView() \r\n    {\r\n        @SuppressWarnings(&quot;unchecked&quot;)\r\n        @Override\r\n        protected void renderMergedOutputModel(Map model, HttpServletRequest request,\r\n                                               HttpServletResponse response) throws Exception \r\n        {\r\n            response.setContentType(&quot;text/html&quot;);\r\n            response.getWriter().write(json);\r\n        }\r\n    };\r\n\r\n  [1]: http://www.sencha.com/products/extgwt/\r\n  [2]: http://en.wikipedia.org/wiki/Spring_Framework#Model-view-controller_framework\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1430779034, 
               "id": "1532020", 
               "up_vote_count": 571
            }, 
            {
               "answer_id": 2590013, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1484686434, 
               "creation_date": 1270614775, 
               "score": 1411, 
               "body_markdown": "[IANA](http://www.iana.org) has registered the official MIME Type for JSON as **`application/json`**.\r\n\r\n\r\n\r\nWhen asked about why not `text/json`, Crockford seems to have said JSON is not really JavaScript nor text and also IANA was more likely to hand out `application/*` than `text/*`.\r\n\r\nMore resources:\r\n\r\n - [Media Types][1]\r\n - [Request for Comments 4627][2]\r\n - [bluesmoon: JSON has a type][3]\r\n\r\n\r\n  [1]: http://www.iana.org/assignments/media-types/application/\r\n  [2]: http://www.ietf.org/rfc/rfc4627.txt\r\n  [3]: http://bluesmoon.livejournal.com/227190.html", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1484686434, 
               "id": "2590013", 
               "up_vote_count": 1413
            }, 
            {
               "answer_id": 4199917, 
               "tags": [], 
               "down_vote_count": 5, 
               "last_activity_date": 1404147386, 
               "creation_date": 1289948305, 
               "score": 363, 
               "body_markdown": "If you are using Ubuntu or Debian and you serve .json files through Apache, you might want to serve the files with the correct content type. I am doing this primarily because I want to use the Firefox extension [JSONView][1]\r\n\r\nThe Apache module [mod_mime](http://httpd.apache.org/docs/current/mod/mod_mime.html) will help to do this easily. However, with Ubuntu you need to edit the file */etc/mime.types* and add the line\r\n\r\n    application/json json\r\n\r\nThen restart Apache:\r\n\r\n    sudo service apache2 restart\r\n\r\n\r\n  [1]: https://addons.mozilla.org/en-US/firefox/addon/10869/\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1404147386, 
               "id": "4199917", 
               "up_vote_count": 368
            }, 
            {
               "answer_id": 7328339, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1375458782, 
               "creation_date": 1315363260, 
               "score": 223, 
               "body_markdown": "Not everything works for content type `application/json`.\r\n\r\nIf you are using [Ext&amp;nbsp;JS][1] form submit to upload file, be aware that the server response is parsed by the browser to create the document for the `&lt;iframe&gt;`.\r\n\r\nIf the server is using JSON to send the return object, then the `Content-Type` header must be set to `text/html` in order to tell the browser to insert the text unchanged into the document body.\r\n\r\nSee [the Ext JS 3.4.0 API documentation][2].\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Ext_JS\r\n  [2]: http://dev.sencha.com/deploy/ext-3.4.0/docs/\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1375458782, 
               "id": "7328339", 
               "up_vote_count": 225
            }, 
            {
               "answer_id": 8322081, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1374767553, 
               "creation_date": 1322635341, 
               "score": 248, 
               "body_markdown": "Only when using `application/json` as the [MIME][1] type I have the following (as of November 2011 with the most recent versions of Chrome, Firefox with [Firebug][2]):\r\n\r\n - No more warnings from Chrome when the JSON is loaded from the server.\r\n - Firebug will add a tab to the response showing you the JSON data\r\n   formatted. If the MIME type is different, it will just show up as\r\n   &#39;Response content&#39;.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/MIME\r\n  [2]: http://en.wikipedia.org/wiki/Firebug_%28software%29\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1374767553, 
               "id": "8322081", 
               "up_vote_count": 250
            }, 
            {
               "answer_id": 10117198, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1401158365, 
               "creation_date": 1334203237, 
               "score": 280, 
               "body_markdown": "The right content type for JSON is `application/json` UNLESS you&#39;re using [JSONP][1], also known as JSON with Padding, which is actually JavaScript and so the right content type would be `application/javascript`.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JSONP\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1401158365, 
               "id": "10117198", 
               "up_vote_count": 281
            }, 
            {
               "answer_id": 10205560, 
               "tags": [], 
               "down_vote_count": 7, 
               "last_activity_date": 1510216319, 
               "creation_date": 1334737343, 
               "score": 267, 
               "body_markdown": "There is no doubt that `application/json` is the best [MIME][1] type for a JSON response.\r\n\r\nBut I had some experience where I had to use `application/x-javascript` because of some compression issues. My hosting environment is shared hosting with [GoDaddy][2]. They do not allow me to change server configurations. I had added the following code to my `web.config` file for compressing responses.\r\n\r\n    &lt;httpCompression&gt;\r\n        &lt;scheme name=&quot;gzip&quot; dll=&quot;%Windir%\\system32\\inetsrv\\gzip.dll&quot;/&gt;\r\n        &lt;dynamicTypes&gt;\r\n            &lt;add mimeType=&quot;text/*&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;message/*&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;application/javascript&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;*/*&quot; enabled=&quot;false&quot;/&gt;\r\n        &lt;/dynamicTypes&gt;\r\n        &lt;staticTypes&gt;\r\n            &lt;add mimeType=&quot;text/*&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;message/*&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;application/javascript&quot; enabled=&quot;true&quot;/&gt;\r\n            &lt;add mimeType=&quot;*/*&quot; enabled=&quot;false&quot;/&gt;\r\n        &lt;/staticTypes&gt;\r\n    &lt;/httpCompression&gt;\r\n    &lt;urlCompression doStaticCompression=&quot;true&quot; doDynamicCompression=&quot;true&quot;/&gt;\r\n\r\nBy using this, the .aspx pages was compressed with g-zip but JSON responses were not. I added\r\n\r\n    &lt;add mimeType=&quot;application/json&quot; enabled=&quot;true&quot;/&gt;\r\n\r\nin the static and dynamic types sections. **But this does not compress JSON responses at all.**\r\n\r\nAfter that I removed this newly added type and added\r\n\r\n    &lt;add mimeType=&quot;application/x-javascript&quot; enabled=&quot;true&quot;/&gt;\r\n\r\nin both the static and dynamic types sections, and changed the response type in\r\n\r\n.ashx (asynchronous handler) to\r\n\r\n    application/x-javascript\r\n\r\nAnd now I found that my JSON responses were compressed with g-zip. So I personally recommend to use\r\n\r\n    application/x-javascript\r\n\r\nonly if you want to compress your JSON responses on a **shared hosting environment**. Because in shared hosting, they do not allow you to change [IIS][3] configurations.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/MIME\r\n  [2]: http://en.wikipedia.org/wiki/Go_Daddy\r\n  [3]: http://en.wikipedia.org/wiki/Internet_Information_Services\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1510216319, 
               "id": "10205560", 
               "up_vote_count": 274
            }, 
            {
               "answer_id": 10354432, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1361633875, 
               "creation_date": 1335544049, 
               "score": 194, 
               "body_markdown": "If you&#39;re in a client-side environment, investigating about the cross-browser support is mandatory for a well supported web application.\r\n\r\nThe right HTTP Content-Type would be `application/json`, as others already highlighted too, but some clients do not handle it very well, that&#39;s why jQuery recommends the default `text/html`.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1361633875, 
               "id": "10354432", 
               "up_vote_count": 194
            }, 
            {
               "answer_id": 10591822, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1418316497, 
               "creation_date": 1337033988, 
               "score": 210, 
               "body_markdown": "JSON is a [domain-specific language][1] (DSL) and a data format independent of JavaScript, and as such has its own [MIME][2] type, `application/json`. Respect for MIME types is of course client driven, so `text/plain` may do for transfer of bytes, but then you would be pushing up interpretation to the vendor application domain unnecessarily - `application/json`. Would you transfer XML via `text/plain`?\r\n\r\nBut honestly, your choice of MIME type is advice to the client as to how to interpret the data- `text/plain` or `text/HTML` (when it&#39;s not HTML) is like type erasure- it&#39;s as uninformative as making all your objects of type Object in a typed language.\r\n\r\nNo browser runtime I know of will take a JSON document and automatically make it available to the runtime as a JavaScript accessible object without intervention, but if you are working with a crippled client, that&#39;s an entirely different matter. But that&#39;s not the whole story- [RESTful][3] JSON services often don&#39;t have JavaScript runtimes, but it doesn&#39;t stop them using JSON as a viable data interchange format. If clients are that crippled... then I would consider perhaps HTML injection via an [Ajax][4] templating service instead.\r\n\r\nApplication/JSON!\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Domain-specific_language\r\n  [2]: http://en.wikipedia.org/wiki/MIME\r\n  [3]: http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services\r\n  [4]: http://en.wikipedia.org/wiki/Ajax_%28programming%29\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1418316497, 
               "id": "10591822", 
               "up_vote_count": 211
            }, 
            {
               "answer_id": 11112320, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1401158138, 
               "creation_date": 1340161853, 
               "score": 753, 
               "body_markdown": "**For JSON:**\r\n\r\n&lt;!-- language-all: none --&gt;\r\n\r\n    Content-Type: application/json\r\n\r\n**For [JSON-P][1]:**\r\n\r\n    Content-Type: application/javascript\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JSONP", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1401158138, 
               "id": "11112320", 
               "up_vote_count": 754
            }, 
            {
               "answer_id": 14098284, 
               "tags": [], 
               "down_vote_count": 8, 
               "last_activity_date": 1416654691, 
               "creation_date": 1356935356, 
               "score": 151, 
               "body_markdown": "The correct answer is:\r\n\r\n    Content-Type: application/json\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1416654691, 
               "id": "14098284", 
               "up_vote_count": 159
            }, 
            {
               "answer_id": 14412490, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1407222485, 
               "creation_date": 1358583742, 
               "score": 133, 
               "body_markdown": "In [JSP][1], you can use this in page directive:\r\n\r\n    &lt;%@ page language=&quot;java&quot; contentType=&quot;application/json; charset=UTF-8&quot;\r\n        pageEncoding=&quot;UTF-8&quot;%&gt;\r\n\r\nThe correct [MIME][2] media type for JSON is `application/json`.  JSP will use it for sending a response to the client.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/JavaServer_Pages\r\n  [2]: http://en.wikipedia.org/wiki/MIME\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1407222485, 
               "id": "14412490", 
               "up_vote_count": 134
            }, 
            {
               "answer_id": 15088495, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1393351197, 
               "creation_date": 1361879727, 
               "score": 102, 
               "body_markdown": "\u201c`application/json`\u201d is the correct JSON content type.\r\n\r\n    def ajaxFindSystems = {\r\n      def result = Systems.list()\r\n      render(contentType:&#39;application/json&#39;) {\r\n        results {\r\n          result.each{sys-&gt;\r\n            system(id:sys.id, name:sys.name)\r\n          }\r\n        }\r\n        resultset (rows:result.size())\r\n      }\r\n    }", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1393351197, 
               "id": "15088495", 
               "up_vote_count": 104
            }, 
            {
               "answer_id": 15676686, 
               "tags": [], 
               "down_vote_count": 6, 
               "last_activity_date": 1406898583, 
               "creation_date": 1364457264, 
               "score": 418, 
               "body_markdown": "**JSON:**\r\n---------\r\nResponse is dynamically generated data, according to the query parameters passed in the URL.\r\n\r\n**Example:**\r\n\r\n    { &quot;Name&quot;: &quot;Foo&quot;, &quot;Id&quot;: 1234, &quot;Rank&quot;: 7 }\r\n\r\n**Content-Type:** `application/json`\r\n\r\n\r\n----------\r\n\r\n**JSON-P:**\r\n-----------\r\nJSON with padding.\r\nResponse is JSON data, with a function call wrapped around it.\r\n\r\n**Example:**\r\n\r\n    functionCall({&quot;Name&quot;: &quot;Foo&quot;, &quot;Id&quot;: 1234, &quot;Rank&quot;: 7});\r\n    \r\n**Content-Type:** `application/javascript`\r\n\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1406898583, 
               "id": "15676686", 
               "up_vote_count": 424
            }, 
            {
               "answer_id": 15762612, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1439841926, 
               "creation_date": 1364901056, 
               "score": 149, 
               "body_markdown": "As many others have mentioned, `application/json` is the correct answer.\r\n\r\nBut what haven&#39;t been explained yet is what the other options you proposed mean.\r\n\r\n - `application/x-javascript`: Experimental MIME type for JavaScript before `application/javascript` was made standard.\r\n\r\n\r\n - `text/javascript`: Now obsolete. You should use `application/javascript` when using javascript.\r\n\r\n - `text/x-javascript`: Experimental MIME type for the above situation.\r\n\r\n - `text/x-json`: Experimental MIME type for JSON before `application/json` got officially registered.\r\n\r\nAll in all, whenever you have any doubts about content types, you should check [this link][1] \r\n\r\n\r\n  [1]: http://www.iana.org/assignments/media-types/media-types.xhtml", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1439841926, 
               "id": "15762612", 
               "up_vote_count": 149
            }, 
            {
               "answer_id": 16363110, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1393351187, 
               "creation_date": 1367596828, 
               "score": 78, 
               "body_markdown": "The right MIME type is **`application/json`**\r\n\r\n**BUT**\r\n\r\nI experienced many situations where the browser type or the framework user needed:\r\n\r\n    text/html\r\n\r\n    application/javascript", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1393351187, 
               "id": "16363110", 
               "up_vote_count": 82
            }, 
            {
               "answer_id": 16587806, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1368784333, 
               "creation_date": 1368708232, 
               "score": 66, 
               "body_markdown": "I use the below\r\n\r\n    contentType: &#39;application/json&#39;,\r\n    data: JSON.stringify(SendData),", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1368784333, 
               "id": "16587806", 
               "up_vote_count": 69
            }, 
            {
               "answer_id": 17238862, 
               "tags": [], 
               "down_vote_count": 7, 
               "last_activity_date": 1373494597, 
               "creation_date": 1371828132, 
               "score": 44, 
               "body_markdown": "If the JSON is with padding then it will be `application/jsonp`. If the JSON is without padding then it will be `application/json`.\r\n\r\nTo deal with both, it is a good practice to use: &#39;application/javascript&#39; without bothering whether it is with padding or without padding.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1373494597, 
               "id": "17238862", 
               "up_vote_count": 51
            }, 
            {
               "answer_id": 17378317, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1373494631, 
               "creation_date": 1372494893, 
               "score": 52, 
               "body_markdown": "In [Spring][1] you have a defined type: `MediaType.APPLICATION_JSON_VALUE` which is equivalent to *application/json*.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Spring_Framework\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1373494631, 
               "id": "17378317", 
               "up_vote_count": 52
            }, 
            {
               "answer_id": 18144996, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1376045358, 
               "creation_date": 1376045358, 
               "score": 59, 
               "body_markdown": "The **Content-Type** header should be set to &#39;**application/json**&#39; when posting. Server listening for the request should include &quot;**Accept=application/json**&quot;.\r\nIn Spring MVC you can do it like this:\r\n\r\n    @RequestMapping(value=&quot;location&quot;, method = RequestMethod.POST, headers = &quot;Accept=application/json&quot;)\r\n        \r\nAdd headers to the response:\r\n    \r\n    HttpHeaders headers = new HttpHeaders();\r\n    headers.add(&quot;Content-Type&quot;, &quot;application/json&quot;);", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "18144996", 
               "up_vote_count": 59
            }, 
            {
               "answer_id": 21733365, 
               "tags": [], 
               "down_vote_count": 3, 
               "last_activity_date": 1451939238, 
               "creation_date": 1392221554, 
               "score": 90, 
               "body_markdown": "The [IANA registration for `application/json`](http://www.iana.org/assignments/media-types/application/json) says\r\n&gt; Applications that use this media type:  JSON has been used to\r\n   exchange data between applications written in all of these\r\n   programming languages: ActionScript, C, C#, Clojure, ColdFusion,\r\n   Common Lisp, E, Erlang, Go, Java, JavaScript, Lua, Objective CAML,\r\n   Perl, PHP, Python, Rebol, Ruby, Scala, and Scheme.\r\n\r\nYou&#39;ll notice that IANA.org [doesn&#39;t list any of these other media types](http://www.iana.org/assignments/media-types/media-types.xhtml), in fact even `application/javascript` is now obsolete. So `application/json` is really the only possible *correct* answer. \r\n\r\nBrowser support is another thing. \r\n\r\nThe most widely supported non-standard media types `text/json` or `text/javascript`. But some big names even use `text/plain`. Even more strange is the Content-Type header sent by Flickr, who returns a JSON string with `text/xml`. \r\nGoogle example included as well, responding with `text/html` yet a JSON string.\r\n\r\nExamples:\r\n\r\n    curl -I http://ajax.googleapis.com:80/ajax/services/search/web\\?q\\=json\r\n\r\nOutput: `Content-Type: text/html`\r\n\r\n    curl -I https://www.flickr.com/services/rest/?method=flickr.test.echo&amp;format=json&amp;api_key=f82254c1491d894f1204d8408f645a93\r\n\r\nOutput: `Content-Type: text/xml`\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1451939238, 
               "id": "21733365", 
               "up_vote_count": 93
            }, 
            {
               "answer_id": 22727561, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1405806582, 
               "creation_date": 1396071785, 
               "score": 37, 
               "body_markdown": "PHP developers use this:\r\n\r\n    &lt;?php\r\n        header(&quot;Content-type: application/json&quot;);\r\n\r\n        // Do something here...\r\n    ?&gt;\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1405806582, 
               "id": "22727561", 
               "up_vote_count": 39
            }, 
            {
               "answer_id": 28365370, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1451707402, 
               "creation_date": 1423224074, 
               "score": 43, 
               "body_markdown": "For JSON, I am using:\r\n\r\n     Content-Type: application/json\r\n\r\nThis described in the IETF&#39;s JSON Data Interchange Format 7158 proposal, [Section 1.2: Specifications of JSON][1.2].\r\n\r\n[1.2]: http://tools.ietf.org/html/rfc7158#section-1.2\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1451707402, 
               "id": "28365370", 
               "up_vote_count": 43
            }, 
            {
               "answer_id": 29395746, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1516156424, 
               "creation_date": 1427904824, 
               "score": 46, 
               "body_markdown": "&gt; The `application/json` works great in PHP to store an array or object\r\n&gt; data.\r\n\r\n   \r\nI use this code to put data in JSON on [*Google Cloud Storage (GCS)*][1] which is set [publically viewable][2]:\r\n\r\n    $context = stream_context_create([\r\n    \t&#39;gs&#39; =&gt; [\r\n    \t\t&#39;acl&#39;=&gt;&#39;public-read&#39;, \r\n    \t\t&#39;Content-Type&#39; =&gt; &#39;application/json&#39;,\r\n    \t]\r\n    ]);\r\n    \t\r\n    file_put_contents(\r\n    \t&quot;gs://BUCKETNAME/FILENAME.json&quot;, \r\n    \tjson_encode((object) $array), \r\n    \tfalse, \r\n    \t$context\r\n    );\r\n\r\nTo get back the data is straight forward:\r\n\r\n    $data = json_decode(file_get_contents(&quot;gs://BUCKETNAME/FILENAME.json&quot;));\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/35738814/4058484\r\n  [2]: https://stackoverflow.com/a/38866924/4058484", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1516156424, 
               "id": "29395746", 
               "up_vote_count": 46
            }, 
            {
               "answer_id": 30740848, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1469581043, 
               "creation_date": 1433877176, 
               "score": 36, 
               "body_markdown": "Extending the accepted responses, when you are using JSON in a REST context...\r\n\r\nThere is a [strong argument][1] about using `application/x-resource+json` and `application/x-collection+json` when you are representing REST resources and collections.\r\n\r\nAnd if you decide to follow the **jsonapi** specification, [you should][2] use of `application/vnd.api+json`, as it is documented.\r\n\r\nAltough there is not an universal standard, it is clear that the added semantic to the resources being transfered justify a more explicit *Content-Type* than just `application/json`.\r\n\r\nFollowing this reasoning, other contexts could justify a more specific *Content-Type*.\r\n\r\n  [1]: http://restful-api-design.readthedocs.org/en/latest/resources.html#content-types\r\n  [2]: http://jsonapi.org/format/#content-negotiation", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1469581043, 
               "id": "30740848", 
               "up_vote_count": 36
            }, 
            {
               "answer_id": 35400991, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1455506443, 
               "creation_date": 1455506443, 
               "score": 21, 
               "body_markdown": "[JSON][1] (JavaScript Object Notation) and [JSONP][2] (&quot;JSON with padding&quot;) formats seems to be very similar and therefor it might be very confusing which MIME type they should be using. Even though the formats seems to be very similar, there are some subtle differences between them.\r\n\r\nSo whenever in any doubts, I have very simple approach (which works perfectly find in most cases), namely, go and check corresponding RFC document.\r\n\r\n\r\n\r\n**JSON**\r\n[RFC 4627][3] (The application/json Media Type for JavaScript Object Notation (JSON)) is a specifications of JSON format. It says in section 6, that the MIME media type for JSON text is \r\n                           \r\n    application/json.\r\n\r\n\r\n\r\n**JSONP**\r\nJSONP (&quot;JSON with padding&quot;) is handled different way than JSON, in a browser. JSONP is treated as a regular JavaScript script and therefor it should use `application/javascript,` the current official MIME type for JavaScript. In many cases, however, `text/javascript` MIME type will work fine too.\r\n\r\nNote that `text/javascript` has been marked as obsolete by [RFC 4329][4] (Scripting Media Types) document and it is recommended to use `application/javascript` type instead. However, due to legacy reasons, `text/javascript` is still widely used and it has cross-browser support (which is not always a case with `application/javascript` MIME type, especially with older browsers).\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/JSON\r\n  [2]: https://en.wikipedia.org/wiki/JSONP\r\n  [3]: http://www.ietf.org/rfc/rfc4627.txt\r\n  [4]: http://www.rfc-editor.org/rfc/rfc4329.txt", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "35400991", 
               "up_vote_count": 21
            }, 
            {
               "answer_id": 36544505, 
               "tags": [], 
               "down_vote_count": 0, 
               "last_activity_date": 1461228280, 
               "creation_date": 1460366126, 
               "score": 38, 
               "body_markdown": "If you get data from REST API in JSON so you have to use content-type \r\n\r\n    For JSON data: Content-Type:application/json\r\n    For HTML data: Content-Type:text/html,\r\n    For XHTML data: Content-Type:application/xhtml+xml,\r\n    For XML data: Content-Type:text/xml, application/xml\r\n\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1461228280, 
               "id": "36544505", 
               "up_vote_count": 38
            }, 
            {
               "answer_id": 39315895, 
               "tags": [], 
               "down_vote_count": 4, 
               "last_activity_date": 1489428853, 
               "creation_date": 1472984480, 
               "score": 5, 
               "body_markdown": "For specifying the interesting JSON result, you add &quot;application/json&quot; in your request header like below:\r\n\r\n&quot;Accept:application/json&quot; is a desired response format.\r\n\r\n&quot;Content-Type:application/json&quot; specifies the content format of your request, but sometimes you specify both `application/json` and `application/xml`, but the quality of these might be different. Which server will send back the different response formats, look at the example:\r\n\r\n    Accept:application/json;q=0.4,application/xml;q=8\r\n\r\nThis will return XML, because XML has higher quality.\r\n", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1489428853, 
               "id": "39315895", 
               "up_vote_count": 9
            }, 
            {
               "answer_id": 40096127, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1516163881, 
               "creation_date": 1476740446, 
               "score": 3, 
               "body_markdown": "The proper current standard is `application/json`. While the default encoding is UTF-8, it is worth mentioning that it could also be UTF-16 or utf-32. When JSON is\r\nwritten in UTF-16 or UTF-32, binary content-transfer-encoding must be used.\r\n\r\nThere is more information about json here: https://tools.ietf.org/html/rfc4627\r\n\r\nmore information on binary transfer encoding here: https://www.w3.org/Protocols/rfc1341/5_Content-Transfer-Encoding.html ", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "last_edit_date": 1516163881, 
               "id": "40096127", 
               "up_vote_count": 4
            }, 
            {
               "answer_id": 41453240, 
               "tags": [], 
               "down_vote_count": 2, 
               "last_activity_date": 1483481721, 
               "creation_date": 1483481721, 
               "score": 2, 
               "body_markdown": "To complement the rest of the answers, the MIME type for JSON linked data (JSON-LD) [according to W3C][1] is:\r\n\r\n&gt; `application/ld+json`\r\n\r\n&gt; **Type name:** application\r\n\r\n&gt; **Subtype name:** ld+json\r\n\r\nAdditionally, from the same source:\r\n\r\n&gt; **File extension(s)**:\r\n\r\n&gt; `.jsonld`\r\n\r\n\r\n  [1]: https://www.w3.org/TR/json-ld-syntax/#iana-considerations", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "41453240", 
               "up_vote_count": 4
            }, 
            {
               "answer_id": 45558981, 
               "tags": [], 
               "down_vote_count": 1, 
               "last_activity_date": 1502164199, 
               "creation_date": 1502164199, 
               "score": 7, 
               "body_markdown": "     Content-type: application/json,json\r\n     Content-Type: application/javascript, json-P\r\n     Content-type: application/x-javascript, javascript\r\n     Content-type: text/javascript, javascript BUT obsolete, older IE versions \r\n     used to use as html attribute\r\n     Content-type: text/x-javascript, JavaScript Media Types BUT obsolete\r\n     Content-type: text/x-json, json before application/json got officially registered.", 
               "path": "3.stack.answer", 
               "is_accepted": false, 
               "id": "45558981", 
               "up_vote_count": 8
            }
         ], 
         "tags": "[u'json', u'content-type']", 
         "down_vote_count": 16, 
         "last_activity_date": 1519431178, 
         "answers": "", 
         "creation_date": "1232897119", 
         "code_snippet": "[u'<code>application/json\\napplication/x-javascript\\ntext/javascript\\ntext/x-javascript\\ntext/x-json\\n</code>', u'<code>application/json</code>', u'<code>application/javascript</code>', u'<code>text/html</code>', u'<code>application/json</code>', u'<code>application/json</code>', u'<code>text/json</code>', u'<code>application/*</code>', u'<code>text/*</code>', u'<code>text/*</code>', u'<code>application/*</code>', u'<code>application/json</code>', u'<code>text</code>', u'<code>text/xml/xhtml</code>', u'<code>.jpg</code>', u'<code>cat file.jpg</code>', u'<code>Content-Type: application/json\\n</code>', u'<code>Content-Type: application/javascript\\n</code>', u'<code>application/json</code>', u'<code>uploadForm.getForm().addListener(new FormListenerAdapter()\\n{\\n    @Override\\n    public void onActionFailed(Form form, int httpStatus, String responseText) \\n    {\\n        MessageBox.alert(\"Error\");\\n    }\\n\\n    @Override\\n    public void onActionComplete(Form form, int httpStatus, String responseText) \\n    {\\n        MessageBox.alert(\"Success\");\\n    }\\n});\\n</code>', u'<code>return new AbstractUrlBasedView() \\n{\\n    @SuppressWarnings(\"unchecked\")\\n    @Override\\n    protected void renderMergedOutputModel(Map model, HttpServletRequest request,\\n                                           HttpServletResponse response) throws Exception \\n    {\\n        response.setContentType(\"text/html\");\\n        response.getWriter().write(json);\\n    }\\n};\\n</code>', u'<code>{ \"Name\": \"Foo\", \"Id\": 1234, \"Rank\": 7 }\\n</code>', u'<code>application/json</code>', u'<code>functionCall({\"Name\": \"Foo\", \"Id\": 1234, \"Rank\": 7});\\n</code>', u'<code>application/javascript</code>', u'<code>application/json json\\n</code>', u'<code>sudo service apache2 restart\\n</code>', u'<code>application/json</code>', u'<code>content-Type: text/plain</code>', u'<code>content-Type: application/json</code>', u'<code>content-Type: application/json; charset=UTF-8</code>', u'<code>contentType: \"application/x-www-form-urlencoded; charset=UTF-8\"</code>', u'<code>application/json</code>', u'<code>application/javascript</code>', u'<code>application/json</code>', u'<code>application/x-javascript</code>', u'<code>web.config</code>', u'<code>&lt;httpCompression&gt;\\n    &lt;scheme name=\"gzip\" dll=\"%Windir%\\\\system32\\\\inetsrv\\\\gzip.dll\"/&gt;\\n    &lt;dynamicTypes&gt;\\n        &lt;add mimeType=\"text/*\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"message/*\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"application/javascript\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"*/*\" enabled=\"false\"/&gt;\\n    &lt;/dynamicTypes&gt;\\n    &lt;staticTypes&gt;\\n        &lt;add mimeType=\"text/*\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"message/*\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"application/javascript\" enabled=\"true\"/&gt;\\n        &lt;add mimeType=\"*/*\" enabled=\"false\"/&gt;\\n    &lt;/staticTypes&gt;\\n&lt;/httpCompression&gt;\\n&lt;urlCompression doStaticCompression=\"true\" doDynamicCompression=\"true\"/&gt;\\n</code>', u'<code>&lt;add mimeType=\"application/json\" enabled=\"true\"/&gt;\\n</code>', u'<code>&lt;add mimeType=\"application/x-javascript\" enabled=\"true\"/&gt;\\n</code>', u'<code>application/x-javascript\\n</code>', u'<code>application/x-javascript\\n</code>', u'<code>application/json</code>', u'<code>application/json</code>', u'<code>application/json</code>', u'<code>&lt;iframe&gt;</code>', u'<code>Content-Type</code>', u'<code>text/html</code>', u'<code>application/json</code>', u'<code>iframe</code>', u'<code>load</code>', u'<code>application/javascript</code>', u'<code>application/x-javascript</code>', u'<code>text/javascript</code>', u'<code>text/plain</code>', u'<code>application/json</code>', u'<code>text/html</code>', u'<code>application/json</code>', u'<code>text/plain</code>', u'<code>application/json</code>', u'<code>text/plain</code>', u'<code>text/plain</code>', u'<code>text/HTML</code>', u'<code>application/json</code>', u'<code>text/html</code>', u'<code>Content-Type: application/json\\n</code>', u'<code>application/json</code>', u'<code>application/x-javascript</code>', u'<code>application/javascript</code>', u'<code>text/javascript</code>', u'<code>application/javascript</code>', u'<code>text/x-javascript</code>', u'<code>text/x-json</code>', u'<code>application/json</code>', u'<code>text/javascript</code>', u'<code>&lt;script type=\"text/javascript\" ...</code>', u'<code>type=\"text/javascript\"</code>', u'<code>&lt;script&gt;...&lt;/script&gt;</code>', u'<code>&lt;%@ page language=\"java\" contentType=\"application/json; charset=UTF-8\"\\n    pageEncoding=\"UTF-8\"%&gt;\\n</code>', u'<code>application/json</code>', u'<code>application/json</code>', u\"<code>def ajaxFindSystems = {\\n  def result = Systems.list()\\n  render(contentType:'application/json') {\\n    results {\\n      result.each{sys-&gt;\\n        system(id:sys.id, name:sys.name)\\n      }\\n    }\\n    resultset (rows:result.size())\\n  }\\n}\\n</code>\", u'<code>application/json</code>', u'<code>application/javascript</code>', u'<code>application/json</code>', u'<code>text/json</code>', u'<code>text/javascript</code>', u'<code>text/plain</code>', u'<code>text/xml</code>', u'<code>text/html</code>', u'<code>curl -I http://ajax.googleapis.com:80/ajax/services/search/web\\\\?q\\\\=json\\n</code>', u'<code>Content-Type: text/html</code>', u'<code>curl -I https://www.flickr.com/services/rest/?method=flickr.test.echo&amp;format=json&amp;api_key=f82254c1491d894f1204d8408f645a93\\n</code>', u'<code>Content-Type: text/xml</code>', u'<code>application/json</code>', u'<code>text/html\\n\\napplication/javascript\\n</code>', u\"<code>contentType: 'application/json',\\ndata: JSON.stringify(SendData),\\n</code>\", u'<code>@RequestMapping(value=\"location\", method = RequestMethod.POST, headers = \"Accept=application/json\")\\n</code>', u'<code>HttpHeaders headers = new HttpHeaders();\\nheaders.add(\"Content-Type\", \"application/json\");\\n</code>', u'<code>MediaType.APPLICATION_JSON_VALUE</code>', u'<code>application/json</code>', u'<code>$context = stream_context_create([\\n    \\'gs\\' =&gt; [\\n        \\'acl\\'=&gt;\\'public-read\\', \\n        \\'Content-Type\\' =&gt; \\'application/json\\',\\n    ]\\n]);\\n\\nfile_put_contents(\\n    \"gs://BUCKETNAME/FILENAME.json\", \\n    json_encode((object) $array), \\n    false, \\n    $context\\n);\\n</code>', u'<code>$data = json_decode(file_get_contents(\"gs://BUCKETNAME/FILENAME.json\"));\\n</code>', u'<code>application/jsonp</code>', u'<code>application/json</code>', u'<code> Content-Type: application/json\\n</code>', u'<code>For JSON data: Content-Type:application/json\\nFor HTML data: Content-Type:text/html,\\nFor XHTML data: Content-Type:application/xhtml+xml,\\nFor XML data: Content-Type:text/xml, application/xml\\n</code>', u'<code>&lt;?php\\n    header(\"Content-type: application/json\");\\n\\n    // Do something here...\\n?&gt;\\n</code>', u'<code>application/x-resource+json</code>', u'<code>application/x-collection+json</code>', u'<code>application/vnd.api+json</code>', u'<code>application/json</code>', u'<code>application/vnd.api+json</code>', u'<code>application/json.\\n</code>', u'<code>application/javascript,</code>', u'<code>text/javascript</code>', u'<code>text/javascript</code>', u'<code>application/javascript</code>', u'<code>text/javascript</code>', u'<code>application/javascript</code>', u'<code> Content-type: application/json,json\\n Content-Type: application/javascript, json-P\\n Content-type: application/x-javascript, javascript\\n Content-type: text/javascript, javascript BUT obsolete, older IE versions \\n used to use as html attribute\\n Content-type: text/x-javascript, JavaScript Media Types BUT obsolete\\n Content-type: text/x-json, json before application/json got officially registered.\\n</code>']", 
         "score": 8807, 
         "answer_count": "33", 
         "accepted_answer_id": 477819, 
         "path": "2.stack", 
         "link": "https://stackoverflow.com/questions/477816/what-is-the-correct-json-content-type", 
         "question_id": 477816, 
         "last_edit_date": "1495540503", 
         "id": "16817955-1", 
         "up_vote_count": "8823"
      }
   ], 
   "private": "False", 
   "version_cnt": "4", 
   "owner": "acoomans", 
   "pm_name": "Alcatraz", 
   "collaborators_cnt": "7", 
   "created_time": "2014-02-13 21:34:00 UTC", 
   "fork_cnt": "58", 
   "id": "16817955", 
   "size": "1324", 
   "license": "MIT License", 
   "repo_keywords": "None", 
   "repo_dependency_cnt": "0", 
   "last_push": "2016-04-24 03:15:13  UTC", 
   "last_update": "2018-01-12 17:58:36  UTC", 
   "pm_dependency_cnt": "0", 
   "star_cnt": "340", 
   "github_id": "16817955", 
   "repo_url": "https://github.com/acoomans/ACCodeSnippetRepositoryPlugin", 
   "readMe": "# ACCodeSnippetRepositoryPlugin\n\nACCodeSnippetRepositoryPlugin is a Xcode plugin for seemless synchronization of snippets with a git repository.\n\nThe snippets are synchronized as human-readable text (and not an obscure _.codesnippet_ plist).\n\n[![Build Status](https://api.travis-ci.org/acoomans/ACCodeSnippetRepositoryPlugin.png)](https://api.travis-ci.org/acoomans/ACCodeSnippetRepositoryPlugin.png)\n\nIf you want to know more about snippets in Xcode, I recommend reading [Xcode Snippets on NSHipster](http://nshipster.com/xcode-snippets/).\n\nWant to try the plugin with an existing public repository? Try [acoomans](https://github.com/acoomans/xcode-snippets) or [mattt](https://github.com/mattt/Xcode-Snippets.git)'s snippets.\n\n\n## Install\n\n1. Build the project to install the plugin. The plugin is installed in `/Library/Application Support/Developer/Shared/Xcode/Plug-ins/ACCodeSnippetRepository.xcplugin`.\n\n2. Restart Xcode for the plugin to be activated.\n\nAlternatively, install through [Alcatraz](https://github.com/supermarin/Alcatraz) plugin manager.\n\n\n## Configuration\n\nThere should be a `Plug-ins` item in the xcode menu:\n\n![screenshots](Screenshots/screenshot01.png)\n\nFirst configure the plugin by forking a remote repository:\n\n![screenshots](Screenshots/screenshot02.png)\n\nWhen you fork, all snippets from the repository (with the right format, see below _Format_) will be imported in Xcode. Your existing snippets, that do not belong to any repository yet, will not be affected.\n\nAfter forking, you will given the choice to import (user) snippets from Xcode to the repository.\n\nAlso, you can remove the system snippets if you don't use them.\n\nIn case of any problem (see below, _Bugs and limitations_), you can go to the user snippets folder and backup your user snippets. Note that user snippets are automatically backed up before any fork.\n\n\n## Usage\n\nUse snippets like you always do in Xcode. Snippets are automatically added/edited/removed and pushed to the git repository.\n\n![screenshots](Screenshots/screenshot03.png)\n\n### Format \n\nThe snippets are text files with a _.m_ file extension, in the following format:\n\n* a header, containing:\n\t* the title\n\t* description\n\t* various Xcode-related information in a _Key: Value_ format (keys ordered alphabetically)\n* the code\n\nIf your snippet does not contain any header, the header will be added, committed and pushed when imported.\n\n**Note**: do not remove the Xcode-related information as they are needed for synchronization.\n\n**Note**: if you manually create a snippet by copying an existing one, change or remove the _IDECodeSnippetIdentifier_ as Xcode does not like having two snippets with the same identifier (will crash).\n\n![screenshots](Screenshots/screenshot04.png)\n\n### Synchronization\n\nEvery change in a snippet is commited and pushed independently.\n\nSnippets are synchronized (pulled) with the remote repository is done every 10 minutes (if the option is enabled) or when the `Update snippets` item was chosen in the menu.\n\nIn case of conflict during the merge, the remote repository has priority.\n\n\n## Bugs and limitations\n\nProbably a lot. \n\nBackup your snippets and your git repository. Expect bugs, crashes, synchronization issues, data and hair loss.\n\n\n## Contributing\n\n### Architecture\n\nFirst a quick word on the architecture:\n\nThe plugin does some swizzling with the _IDECodeSnippetRepository_ class from _IDECodeSnippetLibrary.ideplugin_ (_/Applications/Xcode.app/Contents/PlugIns/IDECodeSnippetLibrary.ideplugin_).\n\n_IDECodeSnippetRepository_ is modified so to make it possible to attach data stores (_ACCodeSnippetDataStoreProtocol_).\n\nHere's a colourful schematic to make you even more confused:\n\n![screenshots](Documentation/architecture.jpg)\n\n### Pull requests\n\nIf you want to contribute, send me a pull request.\n\n### Improvements\n\nIdeas of improvements:\n\n- synchronize _.codesnippet_ plists\n- multiple data stores (in progress but need to be careful when synchronizing)\n- github's gist support\n", 
   "path": "1.git", 
   "watcher_cnt": "340", 
   "repo_description": "A plugin for Xcode to synchronize code snippets with repositories", 
   "pm_keywords": "None", 
   "name": "ACCodeSnippetRepositoryPlugin", 
   "language": "Objective-C", 
   "pm_description": "None", 
   "homepage_url": "", 
   "homepage_content": "None"
}]